class ProspeccaoManager {
    constructor() {
        this.imagesMap = {};
        this.catalog = [];
        this.currentProspect = null;
        this.selectedProducts = [];
        this.prospectCount = 0;
        this.offerCount = 0;
        this.offerImageUrl = null; // Armazena a URL da imagem gerada
        this.isOfferImageGenerated = false; // Flag para verificar se a imagem foi gerada
        
        this.init();
    }

    async init() {
        console.log('üöÄ Inicializando Prospec√ß√£o Manager...');
        
        // Carregar imagens e cat√°logo
        await this.loadImages();
        await this.loadCatalog();
        
        // Configurar eventos
        this.setupEventListeners();
        
        // Carregar estat√≠sticas
        this.loadStats();
        
        console.log('‚úÖ Prospec√ß√£o Manager inicializado');
    }

    async loadImages() {
        try {
            const response = await fetch('imagens.json');
            this.imagesMap = await response.json();
            console.log('‚úÖ Imagens carregadas:', Object.keys(this.imagesMap).length);
        } catch (error) {
            console.error('‚ùå Erro ao carregar imagens:', error);
            this.imagesMap = {};
        }
    }

    async loadCatalog() {
    try {
        console.log('üì¶ Carregando cat√°logo din√¢mico...');
        
        // Primeiro tentar integra√ß√£o com CatalogManager
        const catalogIntegrated = await this.integrateCatalogManager();
        if (catalogIntegrated) {
            console.log('‚úÖ Cat√°logo carregado via CatalogManager');
            // Garantir pelo menos 150 produtos, se poss√≠vel
            if (this.catalog.length < 150) {
                const additionalProducts = this.createBasicCatalog().slice(0, 150 - this.catalog.length);
                this.catalog = [...this.catalog, ...additionalProducts];
            }
            return;
        }
        
        // Se n√£o conseguiu integrar, usar m√©todo tradicional
        console.log('üì¶ Carregando cat√°logo do sistema principal...');
        this.catalog = await this.loadProductsFromMainCatalog();
        
       if (this.catalog.length === 0) {
            console.log('‚ö†Ô∏è Nenhum produto encontrado, carregando cat√°logo b√°sico...');
            this.catalog = this.createBasicCatalog().slice(0, 50); // Limita a 50
        }
        if (this.catalog.length < 50) {
            const additionalProducts = this.createBasicCatalog().slice(0, 50 - this.catalog.length);
            this.catalog = [...this.catalog, ...additionalProducts];
        }
        
        console.log(`‚úÖ Cat√°logo carregado: ${this.catalog.length} produtos`);
        this.catalog = this.catalog.map(product => ({
            ...product,
            keywords: this.extractKeywordsFromName(product.name),
            searchText: this.createSearchableText(product)
        }));
        
        // Processar keywords automaticamente para todos os produtos
        this.catalog = this.catalog.map(product => ({
            ...product,
            keywords: this.extractKeywordsFromName(product.name),
            searchText: this.createSearchableText(product)
        }));
        
        console.log('üîÑ Keywords autom√°ticas geradas para todos os produtos');
    } catch (error) {
        console.error('‚ùå Erro ao carregar cat√°logo:', error);
        console.log('üîÑ Carregando cat√°logo b√°sico como fallback final...');
        this.catalog = this.createBasicCatalog().slice(0, 50); // Fallback com 50 produtos
        this.catalog = this.catalog.map(product => ({
            ...product,
            keywords: this.extractKeywordsFromName(product.name),
            searchText: this.createSearchableText(product)
        }));
        console.log(`‚úÖ Cat√°logo b√°sico carregado: ${this.catalog.length} produtos`);
    }
}
// M√©todo para integrar com o CatalogManager
async integrateCatalogManager() {
    try {
        // Verificar se o CatalogManager existe
        if (window.catalogManager) {
            console.log('üîó CatalogManager encontrado, integrando...');
            
            // Se o CatalogManager j√° tem produtos carregados
            if (window.catalogManager.products && window.catalogManager.products.length > 0) {
                this.catalog = window.catalogManager.products.map(product => ({
                    ...product,
                    keywords: this.extractKeywordsFromName(product.name),
                    searchText: this.createSearchableText(product)
                }));
                console.log(`‚úÖ ${this.catalog.length} produtos integrados do CatalogManager`);
                return true;
            }
            
            // Se n√£o tem produtos, tentar inicializar o CatalogManager
            if (typeof window.catalogManager.init === 'function') {
                await window.catalogManager.init();
                if (window.catalogManager.products && window.catalogManager.products.length > 0) {
                    this.catalog = window.catalogManager.products.map(product => ({
                        ...product,
                        keywords: this.extractKeywordsFromName(product.name),
                        searchText: this.createSearchableText(product)
                    }));
                    console.log(`‚úÖ ${this.catalog.length} produtos carregados ap√≥s inicializa√ß√£o do CatalogManager`);
                    return true;
                }
            }
        }
        return false;
    } catch (error) {
        console.error('‚ùå Erro na integra√ß√£o com CatalogManager:', error);
        return false;
    }
}

async loadProductsFromMainCatalog() {
    try {
        console.log('üîç Buscando produtos do sistema principal...');
        
        // M√©todo 1: Verificar se existe o CatalogManager carregado
        if (window.catalogManager && window.catalogManager.products && window.catalogManager.products.length > 0) {
            console.log(`‚úÖ ${window.catalogManager.products.length} produtos encontrados no CatalogManager`);
            return window.catalogManager.products.map(produto => ({
                code: produto.code || produto.id || `AUTO_${Date.now()}_${Math.random()}`,
                name: produto.name || produto.nome || 'Produto sem nome',
                price: this.parsePrice(produto.price || produto.preco || 0),
                category: produto.category || produto.categoria || 'Geral',
                unit: produto.unit || produto.unidade || 'UN',
                image: produto.image || produto.imagem || null,
                description: produto.description || produto.descricao || '',
                brand: produto.brand || produto.marca || ''
            }));
        }

        // M√©todo 2: Acessar produtosPorCategoria (vari√°vel global do sistema)
        if (window.produtosPorCategoria && Object.keys(window.produtosPorCategoria).length > 0) {
            const allProducts = [];
            Object.entries(window.produtosPorCategoria).forEach(([categoria, produtos]) => {
                console.log(`üìÇ Processando categoria: ${categoria} (${produtos.length} produtos)`);
                produtos.forEach(produto => {
                    if (produto && (produto.nome || produto.name)) {
                        allProducts.push({
                            code: produto.codigo || produto.id || `AUTO_${Date.now()}_${Math.random()}`,
                            name: produto.nome || produto.name,
                            price: this.parsePrice(produto.preco || produto.price || produto.valor),
                            category: categoria || produto.categoria || 'Geral',
                            unit: produto.unidade || produto.unit || 'UN',
                            image: produto.imagem || produto.image || null,
                            description: produto.descricao || produto.description || '',
                            brand: produto.marca || produto.brand || ''
                        });
                    }
                });
            });
            
            if (allProducts.length > 0) {
                console.log(`‚úÖ ${allProducts.length} produtos carregados do sistema principal`);
                return allProducts;
            }
        }

        // M√©todo 3: Tentar localStorage (cache do sistema)
        console.log('üîç Verificando cache do localStorage...');
        const cacheKeys = [
            'catalogCache', // Do seu CatalogManager
            'produtosPorCategoria',
            'catalogProducts',
            'productData',
            'pmg_produtos',
            'catalog_cache'
        ];
        
        for (const key of cacheKeys) {
            try {
                const cached = localStorage.getItem(key);
                if (cached) {
                    const data = JSON.parse(cached);
                    
                    // Se for o cache do CatalogManager
                    if (key === 'catalogCache' && data.products) {
                        console.log(`‚úÖ ${data.products.length} produtos carregados do cache ${key}`);
                        return data.products;
                    }
                    
                    // Para outros tipos de cache
                    const products = this.extractProductsFromCache(data);
                    if (products.length > 0) {
                        console.log(`‚úÖ ${products.length} produtos carregados do cache ${key}`);
                        return products;
                    }
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è Erro ao processar cache ${key}:`, err);
            }
        }

        // M√©todo 4: Usar cat√°logo b√°sico como fallback
        console.log('‚ö†Ô∏è Nenhuma fonte externa encontrada, usando cat√°logo b√°sico');
        return this.reateBasicCatalog();
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar produtos:', error);
        // Em caso de erro, sempre retornar cat√°logo b√°sico
        console.log('üîÑ Carregando cat√°logo b√°sico como fallback...');
        return this.reateBasicCatalog();
    }
}

// Extrair produtos de diferentes formatos de cache
extractProductsFromCache(data) {
    const products = [];
    
    try {
        if (Array.isArray(data)) {
            // Array direto de produtos
            data.forEach(item => {
                const product = this.normalizeProduct(item);
                if (product) products.push(product);
            });
        } else if (data && typeof data === 'object') {
            // Objeto com categorias
            Object.values(data).forEach(category => {
                if (Array.isArray(category)) {
                    category.forEach(item => {
                        const product = this.normalizeProduct(item);
                        if (product) products.push(product);
                    });
                }
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao extrair produtos do cache:', error);
    }
    
    return products;
}
// Normalizar produto de diferentes fontes
normalizeProduct(item) {
    if (!item) return null;
    
    const name = item.nome || item.name || item.titulo || item.produto;
    if (!name || name.length < 3) return null;
    
    return {
        code: item.codigo || item.id || item.sku || `NORM_${Date.now()}_${Math.random()}`,
        name: name.trim(),
        price: this.parsePrice(item.preco || item.price || item.valor || 0),
        category: item.categoria || item.category || item.tipo || 'Geral',
        unit: item.unidade || item.unit || item.medida || 'UN',
        image: item.imagem || item.image || item.foto || null,
        description: item.descricao || item.description || '',
        brand: item.marca || item.brand || ''
    };
}

// Parser melhorado de pre√ßos
parsePrice(priceStr) {
    if (typeof priceStr === 'number') return priceStr;
    if (!priceStr) return 0;
    
    const cleaned = String(priceStr)
        .replace(/[^\d,.-]/g, '') // Remove tudo exceto n√∫meros, v√≠rgulas, pontos e h√≠fens
        .replace(/,(\d{2})$/, '.$1') // Converte v√≠rgula decimal
        .replace(/,/g, ''); // Remove v√≠rgulas de milhares
    
    return parseFloat(cleaned) || 0;
}

// Criar texto pesquis√°vel otimizado
createSearchableText(product) {
    const parts = [
        product.name,
        product.category,
        product.brand,
        product.description,
        product.unit,
        ...(product.keywords || [])
    ].filter(part => part && typeof part === 'string' && part.trim()); // Filtra partes v√°lidas, strings n√£o vazias
    return parts
        .map(part => part.trim()) // Remove espa√ßos extras de cada parte
        .join(' ')
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remove acentos
        .replace(/[^a-z\s]/g, ' ') // Remove tudo exceto letras e espa√ßos
        .replace(/\s+/g, ' ') // Normaliza m√∫ltiplos espa√ßos
        .trim(); // Remove espa√ßos no in√≠cio e fim
}


// Sistema melhorado de extra√ß√£o de keywords
extractKeywordsFromName(productName) {
    if (!productName || typeof productName !== 'string' || !productName.trim()) return [];
    const name = productName
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remove acentos
        .replace(/[^a-z\s]/g, ' ') // Remove caracteres n√£o alfab√©ticos
        .trim();
    
    const keywords = new Set();
    // Dicion√°rio expandido para alimentos
    const foodDictionary = {
    carne: ['carne', 'beef', 'bovina', 'bovino', 'boi', 'vaca', 'ac√©m', 'alcatra', 'contra fil√©', 'contrafil√©', 'fil√© mignon', 'fraldinha', 'maminha', 'patinho', 'cox√£o', 'lagarto', 'm√∫sculo', 'costela', 'cupim', 'rabo', 'picanha', 'aranha', 'capa de fil√©', 'cord√£o', 'miolo', 'paleta', 'peito', 'matoso', 'jordan√©sia', 'plena', 'gold beef', 'frigoestrela', 'desfiada', 'mo√≠da', 'seca'],
    
    frango: ['frango', 'chicken', 'galinha', 'ave', 'aves', 'peito', 'coxa', 'sobrecoxa', 'asa', 'asas', 'sassami', 'filezinho', 'coxinha das asas', 'tulipa', 'passarinho', 'cora√ß√£o', 'f√≠gado', 'moela', 'empanado', 'nuggets', 'steak', 'chicken', 'desfiado', 'cozido', 'temperado', 'adoro', 'itabom', 'copacol', 'friato', 'aurora', 'perdig√£o', 'sadia', 'seara'],
    
    porco: ['porco', 'su√≠no', 'su√≠na', 'lombo', 'costelinha', 'costela', 'bisteca', 'carr√©', 'pernil', 'panceta', 'barriga', 'orelha', 'p√©', 'rabo', 'lingui√ßa', 'toscana', 'temperada', 'pamplona', 'my pork', 'frigoestrela', 'reffinato', 'salgado', 'tch√™ estrela', 'desfiado'],
    
    peixe: ['peixe', 'fish', 'atum', 'sardinha', 'til√°pia', 'bacalhau', 'merluza', 'ca√ß√£o', 'camar√£o', 'palemon', 'oceani', 'kani', 'aliche', 'polaca', 'alasca', 'seapro', 'gomes da costa', 'coqueiro', 'pescador', 'empanado', 'iscas'],
    
    embutidos: ['bacon', 'presunto', 'apresuntado', 'blanquet', 'peito de peru', 'mortadela', 'salsicha', 'lingui√ßa', 'calabresa', 'salame', 'pepperoni', 'copa', 'lombo canadense', 'paio', 'defumado', 'fatiado', 'italiano', 'hamburgu√™s', 'toscana', 'aurora', 'sadia', 'perdig√£o', 'seara', 'ceratti', 'frimesa', 'rezende', 'prieto', 'd√°lia', 'nobre'],
    
    queijo: ['queijo', 'mu√ßarela', 'mozzarella', 'prato', 'cheddar', 'parmes√£o', 'provolone', 'coalho', 'gorgonzola', 'brie', 'camembert', 'gouda', 'gruy√®re', 'estepe', 'reino', 'emmental', 'maasdam', 'mascarpone', 'ricota', 'cottage', 'minas', 'frescal', 'padr√£o', 'b√∫fala', 'processado', 'fatiado', 'fracionado', 'derretido', 'zero lactose', 'tirolez', 'scala', 'quat√°', 'polenghi', 'vigor', 'coronata'],
    
    leite: ['leite', 'integral', 'desnatado', 'semidesnatado', 'condensado', 'zero lactose', 'em p√≥', 'italac', 'piracanjuba', 'jussara', 'triangulo mineiro', 'la serenissima', 'mococa', 'itamb√©'],
    
    iogurte: ['iogurte', 'natural', 'grego', 'bebida l√°ctea', 'coalhada', 'kefir'],
    
    latic√≠nios: ['creme de leite', 'nata', 'chantilly', 'manteiga', 'margarina', 'requeij√£o', 'cream cheese', 'doce de leite', 'catupiry', 'philadelphia', 'dan√∫bio', 'polenghi', 'vigor', 'biocreme', 'quat√°', 'sem amido', 'com amido', 'traditional', 'sabor cheddar'],
    
    arroz: ['arroz', 'branco', 'integral', 'parboilizado', 'tipo 1', 'arb√≥rio', 'basmati', 'japon√™s', 'risoto', 'camil', 'solito', 'namorado', 'guin', 'inar√≠', '7 gr√£os'],
    
    feij√£o: ['feij√£o', 'preto', 'carioca', 'fradinho', 'branco', 'tipo 1', 'camil', 'solito'],
    
    gr√£os: ['lentilha', 'gr√£o de bico', 'ervilha', 'milho', 'aveia', 'quinoa', 'soja', 'prote√≠na texturizada', 'camil', 'bonare', 'quero'],
    
    massas: ['macarr√£o', 'massa', 'espaguete', 'spaghetti', 'penne', 'fusilli', 'parafuso', 'talharim', 'lasanha', 'nhoque', 'caracolino', 'gravata', 'fettuccine', 'yakissoba', 'fresca', 'grano duro', 'barilla', 'petybon', 'dona benta', 'renata', 'famigliare'],
    
    farinhas: ['farinha', 'trigo', 'mandioca', 'milho', 'rosca', 'panko', 'tipo 1', 'pizza', 'pastel', 'premium', 'especial', 'integral', 'anaconda', 'dona benta', 'rosa branca', 'nita', 'suprema', 'bunge', 'venturelli'],
    
    √≥leos: ['√≥leo', 'azeite', 'soja', 'girassol', 'canola', 'oliva', 'algod√£o', 'milho', 'dend√™', 'liza', 'soya', 'coamo', 'cocamar', 'extra virgem', 'composto', 'lisboa', 'gallo', 'morixe'],
    
    a√ß√∫car: ['a√ß√∫car', 'cristal', 'refinado', 'mascavo', 'demerara', 'confeiteiro', 'org√¢nico', 'sach√™', 'uni√£o', 'globo', 'caravelas', 'alto alegre', 'ado√ßante', 'sucralose'],
    
    temperos: ['tempero', 'sal', 'pimenta', 'or√©gano', 'manjeric√£o', 'p√°prica', 'chimichurri', 'cominho', 'color√≠fico', 'alho', 'cebola', 'salsa', 'cebolinha', 'louro', 'canela', 'noz moscada', 'gergelim', 'lemon pepper', 'baiano', 'saz√≥n', 'ajinomoto', 'glutamato', 'fuma√ßa', 'defumado', 'penina', 'brasilseco', 'kisabor'],
    
    molhos: ['molho', 'catchup', 'ketchup', 'maionese', 'mostarda', 'barbecue', 'shoyu', 'tar√™', 'tomate', 'pimenta', 'ingl√™s', 'agridoce', 't√°rtaro', 'cheddar', 'bechamel', 'demi glace', 'billy jack', 'thai sweet chilli', 'chipotle', 'pizza', 'heinz', 'hellmann', 'ekma', 'cep√™ra', 'hemmer'],
    
    conservas: ['conserva', 'azeitona', 'palmito', 'champignon', 'alcachofra', 'pepininho', 'biquinho', 'jalape√±o', 'alcaparra', 'tomate seco', 'cogumelo', 'aspargos', 'pickles', 'arco bello', 'colosso', 'di salerno', 'granja s√£o paulo'],
    
    bebidas_refrigerantes: ['refrigerante', 'coca cola', 'pepsi', 'guaran√°', 'fanta', 'sprite', 'dolly', 'sukita', 'antarctica', 'zero', 'sem a√ß√∫car', 'diet', 'tuba√≠na', 'ituba√≠na'],
    
    bebidas_alcoolicas: ['cerveja', 'vinho', 'whisky', 'vodka', 'cacha√ßa', 'gin', 'rum', 'licor', 'aperitivo', 'brahma', 'skol', 'heineken', 'stella', 'budweiser', 'original', 'johnnie walker', 'jack daniels', 'absolut', 'smirnoff', '51', 'ypi√≥ca'],
    
    sucos: ['suco', 'n√©ctar', 'polpa', 'concentrado', 'del valle', 'maguary', 'ice tea', 'maracuj√°', 'laranja', 'uva', 'manga', 'abacaxi', 'caju', 'lim√£o'],
    
    √°gua: ['√°gua', 'mineral', 'crystal', 's√£o louren√ßo', 'buonavita', 'com g√°s', 'sem g√°s', 't√¥nica', 'schweppes'],
    
    congelados: ['congelado', 'hamb√∫rguer', 'nuggets', 'batata', 'pizza', 'p√£o de alho', 'p√£o de queijo', 'polenta', 'mandioca', 'br√≥colis', 'couve flor', 'ervilha', 'seleta', 'escarola', 'espinafre', 'an√©is de cebola', 'hash brown', 'mccain', 'bem brasil', 'lambweston', 'simplot'],
    
    doces: ['chocolate', 'doce', 'brigadeiro', 'goiabada', 'geleia', 'mel', 'bombom', 'pa√ßoca', 'cocada', 'achocolatado', 'nescau', 'toddy', 'ovomaltine', 'forne√°vel', 'cobertura', 'recheio', 'granulado', 'confeiteiro', 'harald', 'nestl√©', 'dori'],
    
    limpeza: ['detergente', 'sab√£o', 'amaciante', 'desinfetante', '√°gua sanit√°ria', 'multiuso', 'yp√™', 'cl√°ssico', 'eucalipto', 'lavanda'],
    
    higiene: ['papel higi√™nico', 'papel toalha', 'absorvente', 'fralda', 'len√ßo', 'algod√£o', 'shampoo', 'condicionador', 'sabonete', 'creme dental', 'desodorante'],
    
    energ√©ticos: ['energ√©tico', 'isot√¥nico', 'red bull', 'monster', 'gatorade', 'long one'],
    
    especiais: ['sem gl√∫ten', 'sem lactose', 'zero a√ß√∫car', 'diet', 'light', 'org√¢nico', 'integral', 'natural', 'premium', 'gourmet', 'tradicional', 'caseiro', 'artesanal']
};


    // An√°lise por dicion√°rio
    Object.entries(foodDictionary).forEach(([category, terms]) => {
        terms.forEach(term => {
            if (name.includes(term)) {
                keywords.add(category); // Adiciona a categoria como palavra-chave
                keywords.add(term); // Adiciona o termo espec√≠fico
            }
        });
    });

    // Extrair palavras significativas
    const words = name
        .split(/\s+/) // Divide apenas por espa√ßos (ap√≥s limpeza)
        .filter(word => word.length > 2 && !['com', 'sem acucar', ' h ','sem','para', 'tipo', 'marca', 'de', 'a', 'o', 'e'].includes(word)); // Remove palavras irrelevantes
    words.forEach(word => keywords.add(word));

    // Identificar padr√µes contextuais
    this.identifyContextualPatterns(name, keywords);

    return Array.from(keywords).sort(); // Retorna palavras-chave ordenadas
}


// Identificar padr√µes contextuais no nome
identifyContextualPatterns(name, keywords) {
    const patterns = [
    // Formas de preparo/coc√ß√£o
    { regex: /frit[ao]s?/, keyword: 'frito' },
    { regex: /assad[ao]s?/, keyword: 'assado' },
    { regex: /cozid[ao]s?/, keyword: 'cozido' },
    { regex: /grelhad[ao]s?/, keyword: 'grelhado' },
    { regex: /empanad[ao]s?/, keyword: 'empanado' },
    { regex: /refogad[ao]s?/, keyword: 'refogado' },
    { regex: /marin√°d[ao]s?|marinad[ao]s?/, keyword: 'marinado' },
    { regex: /fermentad[ao]s?/, keyword: 'fermentado' },
    { regex: /curad[ao]s?/, keyword: 'curado' },
    { regex: /maturad[ao]s?/, keyword: 'maturado' },
    { regex: /defumad[ao]s?/, keyword: 'defumado' },
    { regex: /temperado/, keyword: 'temperado' },

    // Estados/temperatura
    { regex: /congelad[ao]s?/, keyword: 'congelado' },
    { regex: /resfriad[ao]s?/, keyword: 'resfriado' },
    { regex: /pasteurizad[ao]s?/, keyword: 'pasteurizado' },
    { regex: /seco/, keyword: 'seco' },
    { regex: /l√≠quido/, keyword: 'l√≠quido' },

    // Formas de corte/processamento
    { regex: /fatiad[ao]s?/, keyword: 'fatiado' },
    { regex: /picad[ao]s?/, keyword: 'picado' },
    { regex: /desfiado/, keyword: 'desfiado' },
    { regex: /ralad[ao]s?/, keyword: 'ralado' },
    { regex: /mo√≠d[ao]s?/, keyword: 'mo√≠do' },
    { regex: /triturd[ao]s?/, keyword: 'triturado' },
    { regex: /laminad[ao]s?/, keyword: 'laminado' },
    { regex: /granuld[ao]s?/, keyword: 'granulado' },
    { regex: /cortad[ao]s?/, keyword: 'cortado' },
    { regex: /serrd[ao]s?/, keyword: 'serrado' },
    { regex: /em tiras/, keyword: 'em tiras' },
    { regex: /em cubos/, keyword: 'em cubos' },
    { regex: /em rodelas/, keyword: 'em rodelas' },
    { regex: /em peda√ßos/, keyword: 'em peda√ßos' },
    { regex: /em p√≥/, keyword: 'em p√≥' },
    { regex: /flocos/, keyword: 'flocos' },

    // Condi√ß√µes f√≠sicas
    { regex: /inteiro/, keyword: 'inteiro' },
    { regex: /sem osso/, keyword: 'sem osso' },
    { regex: /com osso/, keyword: 'com osso' },
    { regex: /sem pele/, keyword: 'sem pele' },
    { regex: /com pele/, keyword: 'com pele' },
    { regex: /sem casca/, keyword: 'sem casca' },
    { regex: /com casca/, keyword: 'com casca' },
    { regex: /descascad[ao]s?/, keyword: 'descascado' },
    { regex: /sem caro√ßo/, keyword: 'sem caro√ßo' },
    { regex: /com caro√ßo/, keyword: 'com caro√ßo' },
    { regex: /limpo/, keyword: 'limpo' },

    // Caracter√≠sticas nutricionais/diet√©ticas
    { regex: /sem sal/, keyword: 'sem sal' },
    { regex: /com sal/, keyword: 'com sal' },
    { regex: /sem a√ß√∫car/, keyword: 'sem a√ß√∫car' },
    { regex: /zero a√ß√∫cares/, keyword: 'zero a√ß√∫cares' },
    { regex: /sem lactose/, keyword: 'sem lactose' },
    { regex: /zero lactose/, keyword: 'zero lactose' },
    { regex: /light/, keyword: 'light' },
    { regex: /diet/, keyword: 'diet' },
    { regex: /integral/, keyword: 'integral' },
    { regex: /desnatad[ao]/, keyword: 'desnatado' },
    { regex: /semidesnatad[ao]/, keyword: 'semidesnatado' },
    { regex: /org√¢nic[ao]/, keyword: 'org√¢nico' },

    // Sabores e caracter√≠sticas
    { regex: /doce/, keyword: 'doce' },
    { regex: /salgad[ao]/, keyword: 'salgado' },
    { regex: /picante/, keyword: 'picante' },
    { regex: /suave/, keyword: 'suave' },
    { regex: /natural/, keyword: 'natural' },
    { regex: /crocante/, keyword: 'crocante' },
    { regex: /macio/, keyword: 'macio' },
    { regex: /extra virgem/, keyword: 'extra virgem' },
    { regex: /concentrd[ao]/, keyword: 'concentrado' },

    // Qualidade/categoria
    { regex: /premium/, keyword: 'premium' },
    { regex: /gourmet/, keyword: 'gourmet' },
    { regex: /tradicional/, keyword: 'tradicional' },
    { regex: /especial/, keyword: 'especial' },
    { regex: /artesanal/, keyword: 'artesanal' },
    { regex: /caseiro/, keyword: 'caseiro' },
    { regex: /tipo [1-9]/, keyword: 'tipo classificado' },
    { regex: /classe (longo|curto)/, keyword: 'classe especial' },

    // Processamento industrial
    { regex: /processad[ao]s?/, keyword: 'processado' },
    { regex: /refinad[ao]s?/, keyword: 'refinado' },
    { regex: /cristal/, keyword: 'cristal' },
    { regex: /instant√¢ne[ao]/, keyword: 'instant√¢neo' },
    { regex: /sol√∫vel/, keyword: 'sol√∫vel' },

    // Formas espec√≠ficas de produtos
    { regex: /banda/, keyword: 'banda' },
    { regex: /barra/, keyword: 'barra' },
    { regex: /bisnaga/, keyword: 'bisnaga' },
    { regex: /espeto/, keyword: 'espeto' },
    { regex: /sach√™/, keyword: 'sach√™' }
];


     patterns.forEach(({ regex, keyword }) => {
        if (regex.test(name)) {
            keywords.add(keyword);
        }
    });
}


async ensureCatalogLoaded() {
    if (this.catalog.length === 0) {
        console.log('üì¶ Cat√°logo vazio - recarregando...');
        await this.loadCatalog();
        
        // Se ainda assim n√£o conseguiu carregar, usar cat√°logo b√°sico
        if (this.catalog.length === 0) {
            console.log('üîÑ For√ßando carregamento do cat√°logo b√°sico...');
            this.catalog = this.reateBasicCatalog().map(product => ({
                ...product,
                keywords: this.extractKeywordsFromName(product.name),
                searchText: this.createSearchableText(product)
            }));
            console.log(`‚úÖ Cat√°logo b√°sico for√ßado: ${this.catalog.length} produtos`);
        }
    }
}

// M√©todo auxiliar para transformar dados em cache
transformCachedProducts(cachedData) {
    return cachedData.map((item, index) => {
        // Tentar diferentes formatos de dados
        const product = {
            code: item.codigo || item.id || item.code || `AUTO_${index}`,
            name: item.nome || item.name || item.titulo || 'Produto sem nome',
            price: parseFloat(item.preco || item.price || item.valor || 0),
            category: item.categoria || item.category || item.tipo || 'Geral',
            unit: item.unidade || item.unit || item.medida || 'UN',
            keywords: this.extractKeywordsFromName(item.nome || item.name || ''),
            image: item.imagem || item.image || item.foto || null
        };
        
        return product;
    }).filter(product => product.name !== 'Produto sem nome'); // Filtrar produtos inv√°lidos
}


    createBasicCatalog() {
        // Produtos principais da PMG baseados no site
        return [
            {
                code: '0',
                name: 'erro',
                price: 18.65,
                category: 'erro',
                unit: 'LT',
                keywords: ['erro']
            }
        ];
    }

    setupEventListeners() {
        // Formul√°rio principal
        document.getElementById('prospectForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.processProspect();
        });

        // Busca por CNPJ
        document.getElementById('searchCnpj').addEventListener('click', () => {
            this.searchCNPJ();
        });

        // Formata√ß√£o do CNPJ
        document.getElementById('cnpj').addEventListener('input', (e) => {
            this.formatCNPJ(e.target);
        });
        

       // Modal - C√ìDIGO CORRIGIDO PARA FECHAR AO CLICAR FORA
        const modal = document.getElementById('offerModal');
        const closeBtn = document.getElementById('closeModal');
        
        // Fechar modal com bot√£o X
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.closeOfferModal();
            });
        }

        // NOVO: Fechar modal ao clicar fora do conte√∫do
        if (modal) {
            modal.addEventListener('click', (e) => {
                // Verifica se o clique foi no overlay (fundo do modal) e n√£o no conte√∫do
                if (e.target === modal) {
                    this.closeOfferModal();
                }
            });
        }

        // NOVO: Fechar modal com tecla ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const modal = document.getElementById('offerModal');
                if (modal && modal.style.display === 'block') {
                    this.closeOfferModal();
                }
            }
        });

        // Bot√µes de a√ß√£o
        document.getElementById('createOffer').addEventListener('click', () => {
            this.createOfferArt();
        });

       // Evento para copiar imagem da oferta
document.getElementById('copyOfferImage')?.addEventListener('click', () => this.copyOfferImage());

// Evento para copiar texto da oferta
document.getElementById('copyOfferText')?.addEventListener('click', () => this.copyOfferText());


    // NOVO: Event listeners para outros modais se existirem
        this.setupAdditionalModalListeners();
    }

    // NOVO: M√©todo espec√≠fico para fechar o modal de oferta
    closeOfferModal() {
        const modal = document.getElementById('offerModal');
        if (modal) {
            modal.style.display = 'none';
            console.log('üîê Modal de oferta fechado');
        }
    }

    // NOVO: M√©todo para configurar outros modais
    setupAdditionalModalListeners() {
        // Modal de oferta customizada (se existir)
        const customModal = document.querySelector('.offer-customized');
        if (customModal) {
            customModal.addEventListener('click', (e) => {
                if (e.target === customModal) {
                    customModal.style.display = 'none';
                }
            });

            // Bot√£o de fechar da oferta customizada
            const customCloseBtn = customModal.querySelector('.close-btn');
            if (customCloseBtn) {
                customCloseBtn.addEventListener('click', () => {
                    customModal.style.display = 'none';
                });
            }
        }
    }

    // NOVO: M√©todo melhorado para abrir modal
    openOfferModal() {
        const modal = document.getElementById('offerModal');
        if (modal) {
            modal.style.display = 'block';
            // Focar no modal para acessibilidade
            modal.focus();
            console.log('üîì Modal de oferta aberto');
        }
        
    }

    formatCNPJ(input) {
        let value = input.value.replace(/\D/g, '');
        value = value.replace(/^(\d{2})(\d)/, '$1.$2');
        value = value.replace(/^(\d{2})\.(\d{3})(\d)/, '$1.$2.$3');
        value = value.replace(/\.(\d{3})(\d)/, '.$1/$2');
        value = value.replace(/(\d{4})(\d)/, '$1-$2');
        input.value = value;
    }

    async searchCNPJ() {
    const cnpjInput = document.getElementById('cnpj');
    const cnpj = cnpjInput.value.replace(/\D/g, '');

    if (cnpj.length !== 14) {
        alert('‚ùå CNPJ deve ter 14 d√≠gitos');
        return;
    }

    // Mostrar loading
    const searchBtn = document.getElementById('searchCnpj');
    const originalText = searchBtn.innerHTML;
    searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Buscando...';
    searchBtn.disabled = true;

    try {
        const data = await this.getCompanyData(cnpj);
        
        // Mostrar preview dos dados encontrados
        this.showCompanyPreview(data);
        
        console.log('‚úÖ Dados encontrados:', data);

    } catch (error) {
        console.error('‚ùå Erro na busca por CNPJ:', error);
        alert('‚ùå Erro ao buscar CNPJ. Dados podem ter sido carregados do cache local.');
    } finally {
        searchBtn.innerHTML = originalText;
        searchBtn.disabled = false;
    }
}

showCompanyPreview(data) {
    // Criar um modal simples para mostrar os dados encontrados
    const existingPreview = document.getElementById('company-preview');
    if (existingPreview) {
        existingPreview.remove();
    }

    const preview = document.createElement('div');
    preview.id = 'company-preview';
    preview.innerHTML = `
        <div style="
            position: fixed; top: 20px; right: 20px; 
            background: white; border: 2px solid #667eea; 
            border-radius: 10px; padding: 1rem; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            max-width: 300px; z-index: 1000;
        ">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                <h4 style="margin: 0; color: #667eea;">‚úÖ Dados Encontrados</h4>
                <button onclick="this.parentElement.parentElement.remove()" style="
                    background: none; border: none; font-size: 1.2rem; cursor: pointer;
                ">&times;</button>
            </div>
            <p><strong>Empresa:</strong> ${data.fantasia}</p>
            <p><strong>CNPJ:</strong> ${data.cnpj}</p>
            <p><strong>Cidade:</strong> ${data.municipio}/${data.uf}</p>
            <p><strong>Atividade:</strong> ${data.atividade_principal}</p>
        </div>
    `;
    
    document.body.appendChild(preview);
    
    // Remover automaticamente ap√≥s 8 segundos
    setTimeout(() => {
        if (preview.parentElement) {
            preview.remove();
        }
    }, 8000);
}


getLocalCompanyData(cnpj) {
    const localDatabase = {
        '11111111000101': {
            nome: 'EXEMPLO ALIMENTA√á√ÉO E SERVI√áOS LTDA',
            fantasia: 'RESTAURANTE DEMO',
            cnpj: '11.111.111/0001-01',
            atividade_principal: 'Restaurantes e similares',
            logradouro: 'RUA EXEMPLO',
            numero: '123',
            bairro: 'CENTRO DEMO',
            municipio: 'SAO PAULO',
            uf: 'SP',
            cep: '01000-000',
            telefone: '(11) 9999-0001',
            email: 'contato@restaurantedemo.com',
            capital_social: '100000.00',
            abertura: '01/01/2020',
            situacao: 'ATIVA'
        }
    };

    return localDatabase[cnpj] || null;
}

showManualDataEntry(cnpj) {
    // Implementar modal para entrada manual de dados
    const modal = document.createElement('div');
    modal.innerHTML = `
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>‚ö†Ô∏è Dados do CNPJ n√£o encontrados</h3>
                <p>CNPJ: ${cnpj}</p>
                <p>Por favor, insira os dados manualmente ou tente novamente mais tarde.</p>
                <button onclick="this.closest('.modal-overlay').remove()">Fechar</button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}


    async processProspect() {
        const cnpj = document.getElementById('cnpj').value.replace(/\D/g, '');
        
        const cardapioFile = document.getElementById('cardapio').files[0];

        if (!cnpj || cnpj.length !== 14) {
            alert('‚ùå CNPJ inv√°lido');
            return;
        }

        // Mostrar loading
        this.showLoading();

        try {
            // Etapa 1: Buscar dados da empresa
            await this.updateLoadingStep(1);
            const companyData = await this.getCompanyData(cnpj);

            // Etapa 2: Analisar localiza√ß√£o
            await this.updateLoadingStep(2);
            const locationData = await this.analyzeLocation(companyData);

            // Etapa 3: Processar card√°pio
            await this.updateLoadingStep(3);
            const menuData = await this.processMenu(cardapioFile);

            // Etapa 4: Sugerir produtos
            await this.updateLoadingStep(4);
            const suggestions = await this.suggestProducts(companyData, menuData);

            // Etapa 5: Criar prospec√ß√£o
            await this.updateLoadingStep(5);
            this.currentProspect = {
                company: companyData,
                location: locationData,
                menu: menuData,
                suggestions: suggestions,
               
                timestamp: new Date().toISOString()
            };

            // Mostrar resultados
            await this.sleep(1000);
            this.showResults();
            this.updateStats();

        } catch (error) {
            console.error('‚ùå Erro no processamento:', error);
            alert('‚ùå Erro ao processar prospec√ß√£o: ' + error.message);
            this.hideLoading();
        }
    }

    async getCompanyData(cnpj) {
    try {
        console.log(`üîç Buscando CNPJ: ${cnpj}`);
        
        // Lista de APIs para tentar
        const apis = [
            {
                name: 'BrasilAPI',
                url: `https://brasilapi.com.br/api/cnpj/v1/${cnpj}`,
                transform: (data) => ({
                    nome: data.razao_social || 'N√£o informado',
                    fantasia: data.nome_fantasia || data.razao_social || 'N√£o informado',
                    cnpj: this.formatCNPJDisplay(data.cnpj || cnpj),
                    atividade_principal: data.cnae_fiscal_descricao || 'N√£o informado',
                    logradouro: data.logradouro || '',
                    numero: data.numero || '',
                    bairro: data.bairro || '',
                    municipio: data.municipio || '',
                    uf: data.uf || '',
                    cep: data.cep || '',
                    telefone: data.ddd_telefone_1 || '',
                    email: data.email || '',
                    capital_social: data.capital_social || '0',
                    abertura: data.data_inicio_atividade || '',
                    situacao: data.descricao_situacao_cadastral || 'Ativa'
                })
            },
            {
                name: 'ReceitaWS',
                url: `https://www.receitaws.com.br/v1/cnpj/${cnpj}`,
                transform: (data) => ({
                    nome: data.nome || 'N√£o informado',
                    fantasia: data.fantasia || data.nome || 'N√£o informado',
                    cnpj: data.cnpj || this.formatCNPJDisplay(cnpj),
                    atividade_principal: data.atividade_principal?.[0]?.text || 'N√£o informado',
                    logradouro: data.logradouro || '',
                    numero: data.numero || '',
                    bairro: data.bairro || '',
                    municipio: data.municipio || '',
                    uf: data.uf || '',
                    cep: data.cep || '',
                    telefone: data.telefone || '',
                    email: data.email || '',
                    capital_social: data.capital_social || '0',
                    abertura: data.abertura || '',
                    situacao: data.situacao || 'Ativa'
                })
            }
        ];

        // Tentar APIs uma por uma
        for (const api of apis) {
            try {
                console.log(`üîç Tentando ${api.name}...`);
                
                const response = await fetch(api.url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    
                    // Verificar se h√° erro na resposta
                    if (data.status === 'ERROR' || data.error) {
                        console.warn(`‚ö†Ô∏è ${api.name} retornou erro:`, data.message || data.error);
                        continue;
                    }

                    const transformedData = api.transform(data);
                    console.log(`‚úÖ Sucesso com ${api.name}:`, transformedData.nome);
                    return transformedData;
                }
            } catch (apiError) {
                console.warn(`‚ö†Ô∏è ${api.name} falhou:`, apiError.message);
                continue;
            }
        }

        throw new Error('Todas as APIs falharam');

    } catch (error) {
        console.error('‚ùå Erro ao buscar dados da empresa:', error);
        return this.getFallbackCompanyData(cnpj);
    }
}

// ==================== SISTEMA DE AN√ÅLISE POR PROXIMIDADE DE NOMES ====================

// M√©todo principal para analisar o card√°pio e gerar sugest√µes baseado em proximidade
analyzeMenuAndSuggestProducts(menu) {
    console.log('üîç Iniciando an√°lise por proximidade de nomes...');
    
    if (!menu || !menu.trim()) {
        return {
            analysis: 'Nenhum card√°pio fornecido para an√°lise.',
            suggestions: [],
            score: 0,
            keywords: []
        };
    }

    const menuLower = menu.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    
    // An√°lise contextual do card√°pio
    const analysisResult = this.performProximityAnalysis(menuLower);
    
    // Gera√ß√£o de sugest√µes baseadas em proximidade sem√¢ntica
    const suggestions = this.generateProximitySuggestions(analysisResult, menuLower);
    
    // Calcular score de adequa√ß√£o
    const adequacyScore = this.calculateProximityScore(analysisResult, suggestions);

    return {
        analysis: this.formatProximityReport(analysisResult),
        suggestions: suggestions.slice(0, 50), // Limitar a 50 sugest√µes
        score: adequacyScore,
        keywords: analysisResult.detectedKeywords,
        businessType: analysisResult.businessType
    };
}

// An√°lise de proximidade sem√¢ntica do card√°pio
performProximityAnalysis(menuText) {
    const analysis = {
        businessType: this.detectBusinessTypeByProximity(menuText),
        detectedKeywords: new Set(),
        ingredientProximity: new Map(),
        preparationMethods: new Set(),
        cuisineStyle: new Set(),
        priceAnalysis: this.extractPricePatterns(menuText),
        textComplexity: this.calculateTextComplexity(menuText)
    };

    // Mapas de proximidade sem√¢ntica
    const proximityMaps = {
    carnes: {
        terms: ['carne', 'boi', 'bovino', 'frango', 'porco', 'bacon', 'linguica', 'ac√©m', 'alcatra', 'picanha', 'fraldinha', 'contrafil√©', 'fil√©', 'maminha', 'costela', 'cupim', 'lagarto', 'm√∫sculo', 'peito', 'coxa', 'sobrecoxa', 'asa', 'sassami', 'lombo', 'pernil', 'bisteca', 'carr√©'],
        related: ['grelhado', 'assado', 'frito', 'temperado', 'defumado', 'resfriado', 'congelado', 'desfiado', 'mo√≠do', 'seco', 'cozido', 'marinado', 'sem osso', 'com osso']
    },

    embutidos: {
        terms: ['presunto', 'mortadela', 'salame', 'calabresa', 'pepperoni', 'copa', 'lombo canadense', 'paio', 'salsicha', 'blanquet', 'apresuntado', 'peito de peru'],
        related: ['fatiado', 'defumado', 'italiana', 'tradicional', 'toscana', 'hamburgu√™s', 'hot dog', 'gourmet']
    },

    queijos: {
        terms: ['queijo', 'mussarela', 'mu√ßarela', 'parmes√£o', 'cheddar', 'catupiry', 'cream cheese', 'provolone', 'gorgonzola', 'brie', 'gouda', 'coalho', 'prato', 'minas', 'ricota', 'mascarpone', 'cottage', 'requeij√£o'],
        related: ['derretido', 'gratinado', 'cremoso', 'fatiado', 'ralado', 'fracionado', 'processado', 'sem lactose', 'frescal', 'cura', 'b√∫fala', 'espeto', 'forma']
    },

    massas: {
        terms: ['massa', 'macarr√£o', 'pizza', 'lasanha', 'spaghetti', 'espaguete', 'penne', 'fusilli', 'talharim', 'fettuccine', 'parafuso', 'caracolino', 'pastel', 'nhoque'],
        related: ['molho', 'italiana', 'caseira', 'grano duro', 'ovos', 'fresca', 'yakissoba', 'gravata', 'com ovos', 'tradicional']
    },

    empanados: {
        terms: ['empanado', 'milanesa', 'parmegiana', 'crocante', 'nuggets', 'steak', 'chicken', 'iscas', 'tirinhas'],
        related: ['dourado', 'frito', 'tradicional', 'congelado', 'temperado', 'supreme', 'apimentado']
    },

    molhos: {
        terms: ['molho', 'catchup', 'ketchup', 'maionese', 'mostarda', 'barbecue', 'shoyu', 'tar√™', 'extrato', 'tomate', 'bechamel', 't√°rtaro', 'cheddar'],
        related: ['sach√™', 'temperado', 'picante', 'agridoce', 'tradicional', 'pizza', 'italiano', 'salada', 'caesar', 'gourmet', 'artesanal']
    },

    conservas: {
        terms: ['conserva', 'azeitona', 'palmito', 'champignon', 'alcachofra', 'pepininho', 'pickles', 'cogumelo', 'aspargos', 'tomate seco', 'atum', 'sardinha'],
        related: ['fatiado', 'inteiro', 'picado', 'rodela', 'enlatado', 'vidro', '√≥leo', 'natural', 'pupunha', 'a√ßa√≠']
    },

    temperos: {
        terms: ['tempero', 'sal', 'pimenta', 'or√©gano', 'manjeric√£o', 'p√°prica', 'chimichurri', 'cominho', 'color√≠fico', 'alho', 'cebola', 'canela', 'noz moscada', 'gergelim', 'curry', 'wasabi'],
        related: ['flocos', 'p√≥', 'gr√£os', 'desidratado', 'brasilseco', 'penina', 'food service', 'sach√™', 'defumado', 'picante', 'doce']
    },

    bebidas: {
        terms: ['refrigerante', 'suco', '√°gua', 'cerveja', 'vinho', 'whisky', 'vodka', 'cacha√ßa', 'coca cola', 'guaran√°', 'sprite', 'fanta', 'energ√©tico'],
        related: ['lata', 'pet', 'garrafa', 'zero a√ß√∫car', 'diet', 'tradicional', 'premium', 'integral', 'concentrado', 'tetra pack', 'long neck']
    },

    latic√≠nios: {
        terms: ['leite', 'iogurte', 'manteiga', 'margarina', 'creme de leite', 'leite condensado', 'nata', 'chantilly', 'ovo'],
        related: ['integral', 'desnatado', 'zero lactose', 'pasteurizado', 'condensado', 'semidesnatado', 'com sal', 'sem sal', 'sach√™', 'tablete']
    },

    doces: {
        terms: ['chocolate', 'doce', 'brigadeiro', 'goiabada', 'mel', 'a√ß√∫car', 'geleia', 'bombom', 'pa√ßoca', 'cocada'],
        related: ['forne√°vel', 'cobertura', 'recheio', 'granulado', 'ao leite', 'branco', 'meio amargo', 'cristal', 'refinado', 'mascavo', 'confeiteiro']
    },

    farinhas: {
        terms: ['farinha', 'trigo', 'mandioca', 'milho', 'rosca', 'polvilho', 'fub√°', 'tapioca', 'panko'],
        related: ['tipo 1', 'integral', 'pizza', 'pastel', 'premium', 'especial', 'fina', 'grossa', 'torrada', 'crua']
    },

    gr√£os: {
        terms: ['arroz', 'feij√£o', 'lentilha', 'gr√£o de bico', 'ervilha', 'milho', 'aveia', 'quinoa', 'soja'],
        related: ['tipo 1', 'integral', 'parboilizado', 'preto', 'carioca', 'branco', 'food service', 'arb√≥rio', 'japon√™s']
    },

    √≥leos: {
        terms: ['√≥leo', 'azeite', 'soja', 'girassol', 'canola', 'milho', 'algod√£o', 'oliva'],
        related: ['extra virgem', 'composto', 'liza', 'soya', 'coamo', 'refinado', 'prensado']
    },

    congelados: {
        terms: ['congelado', 'hamb√∫rguer', 'nuggets', 'batata', 'pizza', 'p√£o de alho', 'p√£o de queijo', 'br√≥colis', 'couve flor', 'polenta'],
        related: ['pr√© frito', 'empanado', 'palito', 'hash brown', 'smiles', 'wedges', 'tradicional', 'r√∫stico', 'temperado']
    },

    limpeza: {
        terms: ['detergente', 'sab√£o', 'amaciante', 'desinfetante', '√°gua sanit√°ria', 'multiuso'],
        related: ['eucalipto', 'lavanda', 'neutro', 'cl√°ssico', 'yp√™', 'l√≠quido', 'p√≥']
    },

    orientais: {
        terms: ['shoyu', 'saqu√™', 'wasabi', 'yakissoba', 'tar√™', 'kani', 'gengibre', 'panko', 'hashi'],
        related: ['taichi', 'mitsuwa', 'premium', 'suave', 'sach√™', 'karui', 'tradicional']
    },

    hamb√∫rgueres: {
        terms: ['hamb√∫rguer', 'burger', 'bovina', 'frango', 'aves', 'texas', 'faroeste'],
        related: ['tradicional', 'picanha', 'costela', 'gourmet', 'empanado', 'congelado', 'maturatta', 'brasa']
    }
};


    // An√°lise por proximidade
    Object.entries(proximityMaps).forEach(([category, config]) => {
        let categoryScore = 0;
        let foundTerms = [];

        config.terms.forEach(term => {
            if (menuText.includes(term)) {
                categoryScore += 2;
                foundTerms.push(term);
                analysis.detectedKeywords.add(term);
            }
        });

        config.related.forEach(related => {
            if (menuText.includes(related)) {
                categoryScore += 1;
                foundTerms.push(related);
                analysis.detectedKeywords.add(related);
            }
        });

        if (categoryScore > 0) {
            analysis.ingredientProximity.set(category, {
                score: categoryScore,
                terms: foundTerms,
                relevance: categoryScore / 5
            });
        }
    });

    return analysis;
}

// Detectar tipo de neg√≥cio por proximidade
detectBusinessTypeByProximity(menuText) {
    const patterns = {
    'pizzaria': ['pizza', 'margherita', 'calabresa', 'mussarela', 'mu√ßarela', 'molho de tomate', 'farinha para pizza', 'azeitona', 'tomate pelado', 'or√©gano', 'manjeric√£o', 'provolone', 'catupiry', 'massa para pizza', 'parmes√£o ralado', 'azeite', 'palmito', 'champignon', 'cebola', 'pimenta biquinho'],

    'restaurante_cantina': ['prato', 'refei√ß√£o', 'almo√ßo', 'card√°pio', 'molho', 'tempero completo', 'caldo de carne', 'caldo de galinha', 'arroz', 'feij√£o', 'macarr√£o', 'massa', 'carne bovina', 'frango', 'salada', 'legumes', 'extrato de tomate', '√≥leo de soja', 'alho', 'cebola', 'color√≠fico'],

    'lanchonete': ['lanche', 'hamb√∫rguer', 'batata frita', 'combo', 'bacon', 'presunto', 'queijo prato', 'catchup', 'maionese', 'mostarda', 'p√£o de hamb√∫rguer', 'refrigerante', 'suco', 'nuggets', 'steak', 'salsicha', 'hot dog', 'molho barbecue', 'picles'],

    'padaria': ['p√£o', 'farinha de trigo', 'fermento', 'a√ß√∫car', 'margarina', 'ovos', 'leite', 'chocolate', 'doce de leite', 'recheio', 'cobertura', 'mistura para bolo', 'ess√™ncia', 'melhorador de farinha', 'desmoldante', 'confeiteiro', 'baunilha'],

    'supermercado': ['variedades', 'geral', 'diversos', 'atacado', 'varejo', 'food service', 'grande volume', 'fam√≠lia', 'sortimento', 'b√°sicos', 'essenciais', 'casa', 'limpeza', 'higiene', 'mercearia'],

    'pessoa_fisica': ['pessoa f√≠sica', 'consumidor final', 'fam√≠lia', 'casa', 'uso dom√©stico', 'pequena quantidade', 'variedades', 'b√°sicos', 'essenciais'],

    'pastelaria': ['pastel', 'massa para pastel', 'farinha para pastel', '√≥leo para fritura', 'queijo', 'presunto', 'carne mo√≠da', 'palmito', 'camar√£o', 'frango desfiado', 'molho de pimenta', 'vinagre', 'catchup'],

    'bar_choperia': ['cerveja', 'bebidas alco√≥licas', 'whisky', 'vodka', 'gin', 'aperitivo', 'licor', 'cacha√ßa', 'vinho', 'espumante', 'petiscos', 'amendoim', 'azeitona', 'queijo', 'bacon', 'lingui√ßa', 'refrigerante', '√°gua', 'gelo'],

    'mercearia_sacolao': ['frutas', 'verduras', 'legumes', 'hortifruti', 'tomate', 'cebola', 'batata', 'cenoura', 'alface', 'b√°sicos', 'essenciais', 'abastecimento', 'vizinhan√ßa'],

    'hotel_motel_pousada': ['hospedagem', 'hotelaria', 'caf√© da manh√£', 'room service', 'variedades', 'conveni√™ncia', 'bebidas', 'snacks', 'higiene', 'amenities', 'frigobar'],

    'esfiharia': ['esfiha', 'esfirra', 'massa', 'farinha', 'fermento', 'carne mo√≠da', 'queijo', 'zaatar', 'hortel√£', 'lim√£o', 'tomate', 'cebola', 'temperos √°rabes', 'coalhada seca', 'tahine'],

    'cozinha_oriental': ['oriental', 'japon√™s', 'chin√™s', 'shoyu', 'saqu√™', 'wasabi', 'gengibre', 'algas nori', 'hashi', 'yakissoba', 'tar√™', 'missoshiru', 'gergelim', '√≥leo de gergelim', 'molho agridoce', 'kani', 'sake', 'taichi', 'panko'],

    'cozinha_industrial': ['industrial', 'grande volume', 'food service', 'institucional', 'empresa', 'f√°brica', 'cantina industrial', 'alimenta√ß√£o coletiva', 'grandes quantidades', 'atacado', 'fornecimento', 'distribui√ß√£o'],

    'churrascaria': ['churrasco', 'carne bovina', 'picanha', 'alcatra', 'fraldinha', 'maminha', 'costela', 'cupim', 'lingui√ßa', 'frango', 'sal grosso', 'tempero para churrasco', 'carv√£o', 'briquete', 'grelha', 'espeto', 'chimichurri'],

    'parmegiana': ['parmegiana', 'milanesa', 'empanado', 'queijo parmes√£o', 'molho de tomate', 'farinha de rosca', 'panko', 'ovo', 'fil√©', 'frango', 'carne', 'berinjela', 'gratinado'],

    'fabrica_massas': ['massas', 'macarr√£o', 'espaguete', 'penne', 'talharim', 'lasanha', 'nhoque', 'farinha grano duro', 'ovos', 'massa fresca', 'produ√ß√£o', 'industrial'],

    'confeitaria': ['confeitaria', 'doces', 'bombons', 'brigadeiro', 'chocolate', 'a√ß√∫car confeiteiro', 'glucose', 'ess√™ncias', 'corantes', 'granulado', 'confeitos', 'recheios', 'coberturas', 'pasta americana'],

    'laticinios_distribuidor': ['latic√≠nios', 'distribui√ß√£o', 'leite', 'queijos', 'iogurte', 'manteiga', 'requeij√£o', 'cream cheese', 'nata', 'creme de leite', 'atacado', 'revenda'],

    'loja_conveniencia': ['conveni√™ncia', '24 horas', 'snacks', 'bebidas', 'refrigerante', '√°gua', 'energ√©tico', 'salgadinhos', 'doces', 'cigarros', 'gelo', 'praticidade', 'r√°pido'],

    'acougue': ['a√ßougue', 'carnes', 'carne bovina', 'frango', 'su√≠no', 'embutidos', 'lingui√ßa', 'bacon', 'presunto', 'mortadela', 'cortes especiais', 'fil√© mignon', 'picanha', 'alcatra'],

    'rotisserie': ['rotisserie', 'frango assado', 'comida pronta', 'salgados', 'coxinha', 'empada', 'pratos prontos', 'congelados', 'semi-prontos', 'take away'],

    'adega': ['adega', 'vinhos', 'vinho nacional', 'vinho importado', 'espumantes', 'bebidas finas', 'whisky premium', 'vodka importada', 'licores', 'destilados', 'harmoniza√ß√£o'],

    'clube_associacao': ['clube', 'associa√ß√£o', 'desportiva', 'social', 'eventos', 'festa', 'churrasco', 'bebidas', 'petiscos', 'bar', 'cantina', 'recrea√ß√£o'],

    'buffet': ['buffet', 'eventos', 'festa', 'casamento', 'formatura', 'anivers√°rio', 'catering', 'finger food', 'salgadinhos', 'doces', 'bebidas', 'decora√ß√£o', 'descart√°veis'],

    'hamburgeria': ['hamburgueria', 'hamb√∫rguer gourmet', 'blend', 'bacon', 'queijos especiais', 'molhos especiais', 'batata r√∫stica', 'artesanal', 'premium', 'craft beer', 'onion rings'],

    'outros': ['diversos', 'variados', 'sortimento', 'geral', 'm√∫ltiplos', 'diferentes', 'variedade', 'misto']
};


    let bestMatch = 'restaurante_geral';
    let highestScore = 0;

    Object.entries(patterns).forEach(([type, keywords]) => {
        const score = keywords.reduce((sum, keyword) => {
            return sum + (menuText.includes(keyword) ? 1 : 0);
        }, 0);

        if (score > highestScore) {
            highestScore = score;
            bestMatch = type;
        }
    });

    return bestMatch;
}


getFallbackCompanyData(cnpj) {
    const cnpjLimpo = cnpj.replace(/\D/g, '');
    
    // Retornar apenas dados gen√©ricos - sem informa√ß√µes reais de clientes
    return {
        nome: 'EMPRESA N√ÉO ENCONTRADA',
        fantasia: 'Consulte manualmente',
        cnpj: this.formatCNPJDisplay(cnpj),
        atividade_principal: 'Consulte manualmente - Poss√≠vel: Lanchonete/Restaurante',
        logradouro: 'N√£o dispon√≠vel',
        numero: '',
        bairro: 'N√£o dispon√≠vel',
        municipio: 'S√£o Paulo',
        uf: 'SP',
        cep: '',
        telefone: '',
        email: '',
        capital_social: '0',
        abertura: '',
        situacao: 'Consulte manualmente'
    };
}

// M√©todo auxiliar para formatar CNPJ
formatCNPJDisplay(cnpj) {
    const clean = cnpj.replace(/\D/g, '');
    return clean.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, '$1.$2.$3/$4-$5');
}



    async analyzeLocation(companyData) {
        // An√°lise b√°sica de localiza√ß√£o
        const uf = companyData.uf;
        const municipio = companyData.municipio;

        // Dados demogr√°ficos simulados (em produ√ß√£o, usaria APIs como IBGE)
        const locationAnalysis = {
            estado: uf,
            cidade: municipio,
            regiao: this.getRegion(uf),
            populacao_estimada: this.estimatePopulation(municipio),
            perfil_economico: this.getEconomicProfile(uf),
            concorrencia: this.analyzeConcurrence(companyData.atividade_principal)
        };

        return locationAnalysis;
    }

    getRegion(uf) {
        const regioes = {
            'SP': 'Sudeste', 'RJ': 'Sudeste', 'MG': 'Sudeste', 'ES': 'Sudeste',
            'PR': 'Sul', 'SC': 'Sul', 'RS': 'Sul',
            'GO': 'Centro-Oeste', 'MT': 'Centro-Oeste', 'MS': 'Centro-Oeste', 'DF': 'Centro-Oeste',
            'BA': 'Nordeste', 'SE': 'Nordeste', 'AL': 'Nordeste', 'PE': 'Nordeste', 'PB': 'Nordeste', 'RN': 'Nordeste', 'CE': 'Nordeste', 'PI': 'Nordeste', 'MA': 'Nordeste'
        };
        return regioes[uf] || 'Norte';
    }

    estimatePopulation(municipio) {
        // Simula√ß√£o baseada em dados conhecidos
        const capitais = {
            
    'S√ÉO PAULO': 12000000,
    'RIO DE JANEIRO': 6700000,
    'BRAS√çLIA': 3000000,
    'SALVADOR': 2900000,
    'FORTALEZA': 2700000,
    'GUARULHOS': 1400000,
    'CAMPINAS': 1200000,
    'S√ÉO BERNARDO DO CAMPO': 850000,
    'SANTO ANDR√â': 720000,
    'OSASCO': 700000,
    'S√ÉO JOS√â DOS CAMPOS': 720000,
    'RIBEIR√ÉO PRETO': 700000,
    'SOROCABA': 680000,
    'SANTOS': 430000,
    'MAU√Å': 470000,
    'S√ÉO JOS√â DO RIO PRETO': 460000,
    'MOGI DAS CRUZES': 440000,
    'DIADEMA': 420000,
    'JUNDIA√ç': 420000,
    'CARAPICU√çBA': 400000,
    'PIRACICABA': 400000,
    'BAURU': 380000,
    'ITAQUAQUECETUBA': 360000,
    'FRANCA': 350000,
    'GUARUJ√Å': 320000,
    'TAUBAT√â': 320000,
    'PRAIA GRANDE': 330000,
    'LIMEIRA': 310000,
    'SUZANO': 300000,
    'TABO√ÉO DA SERRA': 280000,
    'SUMAR√â': 280000,
    'BARUERI': 270000,
    'EMBU DAS ARTES': 270000,
    'S√ÉO VICENTE': 360000,
    'AMERICANA': 240000,
    'JACARE√ç': 230000,
    'ARARAQUARA': 230000,
    'COTIA': 230000,
    'MAR√çLIA': 230000
        };
        return capitais[municipio.toUpperCase()] || 100000;
    }

    getEconomicProfile(uf) {
        const profiles = {
            'SP': 'Industrial e Comercial - Alto poder aquisitivo',
            'RJ': 'Servi√ßos e Turismo - M√©dio/Alto poder aquisitivo',
            'MG': 'Agropecu√°ria e Minera√ß√£o - M√©dio poder aquisitivo',
            'PR': 'Agropecu√°ria e Industrial - M√©dio poder aquisitivo',
            'SC': 'Industrial e Tecnol√≥gico - Alto poder aquisitivo',
            'RS': 'Agropecu√°ria e Industrial - M√©dio/Alto poder aquisitivo'
        };
        return profiles[uf] || 'Economia diversificada - M√©dio poder aquisitivo';
    }

    analyzeConcurrence(atividade) {
        if (atividade.toLowerCase().includes('restaurante') || 
            atividade.toLowerCase().includes('alimenta√ß√£o')) {
            return {
                nivel: 'Alto',
                observacao: 'Mercado de alimenta√ß√£o competitivo, oportunidade para diferencia√ß√£o com produtos premium'
            };
        }
        return {
            nivel: 'M√©dio',
            observacao: 'Concorr√™ncia moderada no setor'
        };
    }

    async processMenu(file) {
    if (!file) {
        return {
            items: [],
            categories: [],
            analysis: 'Nenhum card√°pio fornecido para an√°lise'
        };
    }

    try {
        console.log('üìÑ Processando arquivo de card√°pio:', file.name);
        this.updateLoadingStep(3);
        
        const content = await this.readFileContent(file);
        console.log('üìÑ Conte√∫do lido:', content.length, 'caracteres');
        
        // Processar o conte√∫do TXT
        const menuItems = this.extractMenuItems(content);
        console.log('üçΩÔ∏è Itens extra√≠dos:', menuItems.length);
        
        if (menuItems.length === 0) {
            // Tentar m√©todo alternativo se n√£o encontrou nada
            const alternativeItems = this.extractMenuItemsAlternative(content);
            console.log('üçΩÔ∏è M√©todo alternativo encontrou:', alternativeItems.length, 'Cracteres');
            
            if (alternativeItems.length > 0) {
                const categories = this.categorizeMenuItems(alternativeItems);
                return {
                    items: alternativeItems,
                    categories: categories,
                    analysis: this.generateMenuAnalysis(alternativeItems, categories)
                };
            }
        }
        
        const categories = this.categorizeMenuItems(menuItems);
        
        return {
            items: menuItems,
            categories: categories,
            analysis: this.generateMenuAnalysis(menuItems, categories)
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao processar card√°pio:', error);
        return {
            items: [],
            categories: [],
            analysis: `Erro ao processar card√°pio: ${error.message}. Verifique se o arquivo TXT foi salvo corretamente.`
        };
    }
}


    async readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsText(file);
        });
    }
extractMenuItemsAlternative(content) {
    const items = [];
    
    try {
        // Dividir em linhas e procurar por padr√µes espec√≠ficos
        const lines = content.split(/[\n\r]+/);
        
        lines.forEach(line => {
            line = line.trim();
            
            // Procurar por linhas que parecem ser itens de card√°pio
            if (line.length > 10 && 
                line.match(/^[A-Z√Å√â√ç√ì√ö√á]/) && 
                !line.match(/^(Content-|MIME-|Boundary|charset)/i)) {
                
                // Extrair nome e pre√ßo se existir
                const priceMatch = line.match(/R\$\s*(\d+[,.]?\d*)/);
                const name = line.replace(/R\$.*$/, '').trim();
                
                if (name.length > 3) {
                    items.push({
                        name: this.cleanItemName(name),
                        price: priceMatch ? priceMatch[1] : 'Consultar',
                        category: this.categorizeMenuItem(name)
                    });
                }
            }
        });
        
        console.log(`‚úÖ M√©todo alternativo encontrou ${items.length} itens`);
        return items;
        
    } catch (error) {
        console.error('‚ùå Erro no m√©todo alternativo:', error);
        return [];
    }
}

    // M√©todo melhorado para extrair itens do card√°pio
extractMenuItems(content) {
    const items = [];
    
    try {
        // Limpar conte√∫do TXT (remover cabe√ßalhos e codifica√ß√£o)
        let cleanContent = content
            .replace(/Content-Type:.*?\n/gi, '')
            .replace(/Content-Transfer-Encoding:.*?\n/gi, '')
            .replace(/=\n/g, '')
            .replace(/=([0-9A-F]{2})/g, (match, hex) => String.fromCharCode(parseInt(hex, 16)))
            .replace(/=C3=A([0-9A-F])/g, (match, hex) => String.fromCharCode(195, parseInt('A' + hex, 16)))
            .replace(/&amp;nbsp;/g, ' ')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/<[^>]*>/g, ' ')
            .replace(/\s+/g, ' ');

        console.log('üßπ Conte√∫do limpo para an√°lise');
        
        // Padr√µes para encontrar itens com pre√ßos
        const patterns = [
            // Padr√£o 1: Nome do item seguido de R$ pre√ßo
            /([A-Z√Å√â√ç√ì√ö√á][^R$\n]*?)\s*R\$\s*(\d{1,3}(?:,\d{2})?)/g,
            
            // Padr√£o 2: ### Nome do item (cabe√ßalhos de se√ß√£o)
            /###\s*([A-Z√Å√â√ç√ì√ö√á][^\n\r#]*)/g,
            
            // Padr√£o 3: Linhas que come√ßam com palavra mai√∫scula
            /^([A-Z√Å√â√ç√ì√ö√á][^\n\r]*?)(?:\s*R\$\s*(\d{1,3}(?:,\d{2})?))?$/gm
        ];

        patterns.forEach((pattern, index) => {
            console.log(`üîç Aplicando padr√£o ${index + 1}...`);
            let matches = [...cleanContent.matchAll(pattern)];
            
            matches.forEach(match => {
                const name = match[1]?.trim();
                const price = match[2] || '';
                
                if (name && name.length > 3 && !name.toLowerCase().includes('r$')) {
                    const item = {
                        name: this.cleanItemName(name),
                        price: price || 'Consultar',
                        category: this.categorizeMenuItem(name)
                    };
                    
                    // Evitar duplicatas
                    if (!items.some(existing => 
                        existing.name.toLowerCase() === item.name.toLowerCase())) {
                        items.push(item);
                    }
                }
            });
        });

        console.log(`‚úÖ Encontrados ${items.length} itens no card√°pio`);
        return items;
        
    } catch (error) {
        console.error('‚ùå Erro na extra√ß√£o de itens:', error);
        return [];
    }
}

// Limpar nome do item
cleanItemName(name) {
    return name
        .replace(/=C3=A[0-9A-F]/g, '√£')
        .replace(/=C3=AA/g, '√™')
        .replace(/=C3=A1/g, '√°')
        .replace(/=C3=A9/g, '√©')
        .replace(/=C3=AD/g, '√≠')
        .replace(/=C3=B3/g, '√≥')
        .replace(/=C3=BA/g, '√∫')
        .replace(/=C3=A7/g, '√ß')
        .replace(/&amp;/g, '&')
        .replace(/\s+/g, ' ')
        .trim();
}

    categorizeMenuItem(itemName) {
        const name = itemName.toLowerCase();

// PIZZARIA
if (name.includes('pizza') || name.includes('margherita') || name.includes('calabresa') ||
    name.includes('mu√ßarela') || name.includes('mozzarella') || name.includes('pepperoni') ||
    name.includes('molho pizza') || name.includes('azeitona') || name.includes('or√©gano') ||
    name.includes('champignon') || name.includes('palmito') || name.includes('catupiry') ||
    name.includes('farinha pizza')) {
    return 'Pizzaria';
}

// RESTAURANTE/CANTINA
if (name.includes('frango') || name.includes('chicken') || name.includes('parmegiana') ||
    name.includes('carne bovina') || name.includes('picanha') || name.includes('alcatra') ||
    name.includes('ac√©m') || name.includes('arroz') || name.includes('feij√£o') ||
    name.includes('macarr√£o') || name.includes('massa') || name.includes('molho tomate') ||
    name.includes('extrato tomate') || name.includes('tempero completo') ||
    name.includes('caldo carne') || name.includes('caldo galinha') || name.includes('food service')) {
    return 'Restaurante/Cantina';
}

// LANCHONETE
if (name.includes('hamb√∫rguer') || name.includes('burger') || name.includes('lanche') ||
    name.includes('batata frita') || name.includes('batata palito') || name.includes('nuggets') ||
    name.includes('bacon') || name.includes('catchup') || name.includes('maionese') ||
    name.includes('mostarda') || name.includes('hot dog') || name.includes('salsicha') ||
    name.includes('p√£o hamb√∫rguer') || name.includes('steak') || name.includes('empanado')) {
    return 'Lanchonete';
}

// PADARIA
if (name.includes('farinha trigo') || name.includes('fermento') || name.includes('a√ß√∫car') ||
    name.includes('margarina') || name.includes('manteiga') || name.includes('ovos') ||
    name.includes('chocolate forne√°vel') || name.includes('doce leite') || name.includes('mistura bolo') ||
    name.includes('recheio') || name.includes('cobertura') || name.includes('ess√™ncia') ||
    name.includes('granulado') || name.includes('a√ß√∫car confeiteiro') || name.includes('mel')) {
    return 'Padaria';
}

// SUPERMERCADO
if (name.includes('food service') || name.includes('atacado') || name.includes('variedades') ||
    name.includes('b√°sicos') || name.includes('essenciais') || name.includes('grande volume') ||
    (name.includes('arroz') && name.includes('5 kg')) ||
    (name.includes('a√ß√∫car') && name.includes('fardo')) ||
    name.includes('limpeza') || name.includes('papel higi√™nico')) {
    return 'Supermercado';
}

// PESSOA F√çSICA
if (name.includes('consumidor final') || name.includes('fam√≠lia') || name.includes('dom√©stico') ||
    name.includes('uso pessoal') || name.includes('embalagem pequena') ||
    (name.includes('1 kg') && !name.includes('food service'))) {
    return 'Pessoa F√≠sica';
}

// PASTELARIA
if (name.includes('pastel') || name.includes('farinha pastel') || name.includes('massa pastel') ||
    name.includes('√≥leo fritura') || name.includes('recheio pastel')) {
    return 'Pastelaria';
}

// BAR/CHOPERIA
if (name.includes('cerveja') || name.includes('whisky') || name.includes('vodka') ||
    name.includes('cacha√ßa') || name.includes('gin') || name.includes('rum') ||
    name.includes('bebidas alco√≥licas') || name.includes('petiscos') || name.includes('amendoim') ||
    name.includes('azeitona') && name.includes('conserva') || name.includes('aperitivo') ||
    name.includes('licor') || name.includes('vinho') || name.includes('energ√©tico')) {
    return 'Bar/Choperia';
}

// MERCEARIA/SACOL√ÉO
if (name.includes('frutas') || name.includes('verduras') || name.includes('legumes') ||
    name.includes('hortifruti') || name.includes('conservas') || name.includes('enlatados') ||
    name.includes('gr√£os') && !name.includes('food service') ||
    name.includes('temperos') && name.includes('pequeno') ||
    name.includes('condimentos') || name.includes('vinagre')) {
    return 'Mercearia/Sacol√£o';
}

// HOTEL/MOTEL/POUSADA
if (name.includes('hospedagem') || name.includes('hotelaria') || name.includes('caf√© manh√£') ||
    name.includes('room service') || name.includes('frigobar') || name.includes('amenities') ||
    name.includes('institucional') && name.includes('pequeno')) {
    return 'Hotel/Motel/Pousada';
}

// ESFIHARIA
if (name.includes('esfiha') || name.includes('esfirra') || name.includes('√°rabe') ||
    name.includes('coalhada') || name.includes('zaatar') || name.includes('tahine') ||
    name.includes('temperos √°rabes')) {
    return 'Esfiharia';
}

// COZINHA ORIENTAL
if (name.includes('shoyu') || name.includes('saqu√™') || name.includes('wasabi') ||
    name.includes('yakissoba') || name.includes('tar√™') || name.includes('oriental') ||
    name.includes('japon√™s') || name.includes('chin√™s') || name.includes('gengibre') ||
    name.includes('algas nori') || name.includes('hashi') || name.includes('taichi') ||
    name.includes('gergelim') || name.includes('kani') || name.includes('panko')) {
    return 'Cozinha Oriental';
}

// COZINHA INDUSTRIAL
if (name.includes('industrial') || name.includes('grande volume') ||
    (name.includes('food service') && (name.includes('5 kg') || name.includes('10 kg'))) ||
    name.includes('institucional') && name.includes('grandes quantidades') ||
    name.includes('cantina industrial') || name.includes('alimenta√ß√£o coletiva')) {
    return 'Cozinha Industrial';
}

// CHURRASCARIA
if (name.includes('churrasco') || name.includes('picanha') || name.includes('fraldinha') ||
    name.includes('maminha') || name.includes('costela') || name.includes('cupim') ||
    name.includes('sal grosso') || name.includes('tempero churrasco') ||
    name.includes('lingui√ßa toscana') || name.includes('briquete') ||
    name.includes('chimichurri') || name.includes('espeto')) {
    return 'Churrascaria';
}

// COLABORADOR
if (name.includes('colaborador') || name.includes('funcion√°rio') || name.includes('benef√≠cio') ||
    name.includes('vale alimenta√ß√£o') || name.includes('cesta b√°sica') ||
    name.includes('refeit√≥rio') || name.includes('cantina empresa')) {
    return 'Colaborador';
}

// F√ÅBRICA DE MASSAS
if (name.includes('massa fresca') || name.includes('grano duro') || name.includes('famigliare') ||
    name.includes('produ√ß√£o massas') || name.includes('massa artesanal') ||
    (name.includes('macarr√£o') && name.includes('industrial'))) {
    return 'F√°brica de Massas';
}

// CONFEITARIA
if (name.includes('confeitaria') || name.includes('doces finos') || name.includes('bombons') ||
    name.includes('brigadeiro') || name.includes('chocolate') && name.includes('confeiteiro') ||
    name.includes('doceiro') || name.includes('confeitos') || name.includes('granulado') ||
    name.includes('pasta americana') || name.includes('decora√ß√£o')) {
    return 'Confeitaria';
}

// LATIC√çNIOS/DISTRIBUIDOR
if (name.includes('distribui√ß√£o') || name.includes('atacado') && name.includes('latic√≠nios') ||
    name.includes('revenda') && (name.includes('queijo') || name.includes('leite')) ||
    name.includes('tirolez') || name.includes('polenghi') || name.includes('vigor') ||
    name.includes('quat√°') && name.includes('grande')) {
    return 'Latic√≠nios/Distribuidor';
}

// LOJA DE CONVENI√äNCIA
if (name.includes('conveni√™ncia') || name.includes('24 horas') || name.includes('snacks') ||
    name.includes('praticidade') || name.includes('r√°pido') ||
    name.includes('embalagem pequena') && name.includes('bebidas') ||
    name.includes('energ√©tico') || name.includes('gelo')) {
    return 'Loja de Conveni√™ncia';
}

// A√áOUGUE
if (name.includes('a√ßougue') || name.includes('carnes frescas') || name.includes('cortes especiais') ||
    name.includes('embutidos') && name.includes('frios') || name.includes('resfriado') ||
    name.includes('temperado') && name.includes('carne') ||
    name.includes('defumado') && name.includes('presunto')) {
    return 'A√ßougue';
}

// ROTISSERIE
if (name.includes('rotisserie') || name.includes('frango assado') || name.includes('comida pronta') ||
    name.includes('pratos prontos') || name.includes('take away') || name.includes('coxinha') ||
    name.includes('empada') || name.includes('salgados') && name.includes('congelado')) {
    return 'Rotisserie';
}

// ADEGA
if (name.includes('adega') || name.includes('vinhos') && name.includes('importado') ||
    name.includes('espumante') || name.includes('bebidas finas') ||
    name.includes('whisky premium') || name.includes('harmoniza√ß√£o') ||
    name.includes('chileno') || name.includes('argentino') || name.includes('portugu√™s')) {
    return 'Adega';
}

// CLUBE/ASSOCIA√á√ÉO DESPORTIVA
if (name.includes('clube') || name.includes('associa√ß√£o') || name.includes('desportiva') ||
    name.includes('social') || name.includes('eventos') && name.includes('recrea√ß√£o') ||
    name.includes('confraterniza√ß√£o')) {
    return 'Clube/Associa√ß√£o Desportiva';
}

// BUFFET
if (name.includes('buffet') || name.includes('eventos') || name.includes('festa') ||
    name.includes('casamento') || name.includes('catering') || name.includes('finger food') ||
    name.includes('formatura') || name.includes('anivers√°rio') || name.includes('descart√°veis')) {
    return 'Buffet';
}

// HAMBURGERIA
if (name.includes('hamburgeria') || name.includes('gourmet') && name.includes('hamb√∫rguer') ||
    name.includes('artesanal') && name.includes('burger') || name.includes('premium') &&
    (name.includes('bacon') || name.includes('queijo')) || name.includes('maturatta') ||
    name.includes('onion rings') || name.includes('craft beer')) {
    return 'Hamburgeria';
}

// BEBIDAS (categoria geral)
if (name.includes('refrigerante') || name.includes('suco') || name.includes('√°gua') ||
    name.includes('coca cola') || name.includes('pepsi') || name.includes('guaran√°') ||
    name.includes('fanta') || name.includes('sprite') || name.includes('isot√¥nico') ||
    name.includes('ice tea')) {
    return 'Bebidas';
}

// SOBREMESAS (categoria geral)
if (name.includes('sorvete') || name.includes('pudim') || name.includes('torta') ||
    name.includes('gelatina') || name.includes('mousse') || name.includes('brigadeiro') ||
    name.includes('doce') && !name.includes('leite') || name.includes('sobremesa') ||
    name.includes('calda') && name.includes('frutas')) {
    return 'Sobremesas';
}

// OUTROS (fallback)
return 'Outros';

        
        
    }

    categorizeMenuItems(items) {
        const categories = {};
        
        items.forEach(item => {
            if (!categories[item.category]) {
                categories[item.category] = [];
            }
            categories[item.category].push(item);
        });

        return categories;
    }

    generateMenuAnalysis(items, categories) {
    if (!items || items.length === 0) {
        return 'N√£o foi poss√≠vel extrair itens do card√°pio. Verifique se o arquivo TXT foi salvo corretamente da p√°gina web.';
    }

    const totalItems = items.length;
    const categoryCount = Object.keys(categories).length;
    const itemsWithPrice = items.filter(item => item.price !== 'Consultar').length;
    
    let analysis = `üìä **An√°lise do Card√°pio Processado**\n\n`;
    analysis += `‚úÖ **${totalItems} itens** encontrados\n`;
    analysis += `üìÇ **${categoryCount} categorias** identificadas\n`;
    analysis += `üí∞ **${itemsWithPrice} itens** com pre√ßo definido\n\n`;
    
    analysis += `üè∑Ô∏è **Distribui√ß√£o por Categorias:**\n`;
    Object.entries(categories).forEach(([category, categoryItems]) => {
        analysis += `‚Ä¢ ${category}: ${categoryItems.length} itens\n`;
    });

    analysis += '\nüéØ **Oportunidades de Neg√≥cio Identificadas:**\n';
    
    // Analisar categorias para sugest√µes espec√≠ficas baseadas em todos os segmentos
if (categories['Pizzaria'] && categories['Pizzaria'].length > 0) {
    analysis += 'üçï **Pizzaria** - Produtos recomendados: Calabresa Aurora, Mu√ßarela, Molho de Tomate Pizza, Azeitonas, Or√©gano, Farinha para Pizza, Champignon, Palmito\n';
}

if (categories['Restaurante'] || categories['Cantina'] && categories['Restaurante/Cantina'].length > 0) {
    analysis += 'üçΩÔ∏è **Restaurante/Cantina** - Produtos recomendados: Carnes Bovinas Resfriadas, Arroz Food Service, Feij√£o, Temperos Completos, √ìleo de Soja, Caldo de Carne/Galinha\n';
}

if (categories['Outros'] && categories['Outros'].length > 0) {
    analysis += 'üì¶ **Outros** - Produtos recomendados: Variedades sortidas, Produtos b√°sicos, Itens de uso geral\n';
}

if (categories['Lanchonete'] && categories['Lanchonete'].length > 0) {
    analysis += 'üçî **Lanchonete** - Produtos recomendados: Hamb√∫rguer Congelado, Bacon em Cubos, Batata Palito Pr√©-Frita, Catchup, Maionese, Queijo Prato Fatiado, Salsicha Hot Dog\n';
}

if (categories['Padaria'] && categories['Padaria'].length > 0) {
    analysis += 'ü•ñ **Padaria** - Produtos recomendados: Farinha de Trigo, Fermento Biol√≥gico, A√ß√∫car, Margarina, Ovos, Chocolate Forne√°vel, Doce de Leite, Ess√™ncias\n';
}

if (categories['Supermercado'] && categories['Supermercado'].length > 0) {
    analysis += 'üõí **Supermercado** - Produtos recomendados: Variedades Food Service, Produtos b√°sicos em grandes volumes, Itens de alta rota√ß√£o\n';
}

if (categories['Pessoa F√≠sica'] && categories['Pessoa F√≠sica'].length > 0) {
    analysis += 'üë§ **Pessoa F√≠sica** - Produtos recomendados: Embalagens menores, Produtos b√°sicos familiares, Itens essenciais\n';
}

if (categories['Pastelaria'] && categories['Pastelaria'].length > 0) {
    analysis += 'ü•ü **Pastelaria** - Produtos recomendados: Farinha para Pastel, √ìleo para Fritura, Queijo Mu√ßarela, Presunto, Carne Mo√≠da, Palmito Picado, Massa para Pastel\n';
}

if (categories['Bar'] || categories['Choperia'] && categories['Bar/Choperia'].length > 0) {
    analysis += 'üç∫ **Bar/Choperia** - Produtos recomendados: Cervejas, Bebidas Alco√≥licas, Whisky, Vodka, Cacha√ßa, Petiscos, Amendoim, Azeitonas, Lingui√ßa Calabresa\n';
}

if (categories['Mercearia'] || categories['Sacol√£o'] && categories['Mercearia/Sacol√£o'].length > 0) {
    analysis += 'ü•¨ **Mercearia/Sacol√£o** - Produtos recomendados: Produtos b√°sicos, Conservas, Enlatados, Gr√£os, Temperos, Itens de primeira necessidade\n';
}

if (categories['Hotel'] || categories['Motel'] || categories['Pousada'] && categories['Hotel/Motel/Pousada'].length > 0) {
    analysis += 'üè® **Hotel/Motel/Pousada** - Produtos recomendados: Food Service, Produtos para caf√© da manh√£, Leite, P√£es, Sucos, √Åguas Minerais, Amenities\n';
}

if (categories['Esfiharia'] && categories['Esfiharia'].length > 0) {
    analysis += 'ü•ô **Esfiharia** - Produtos recomendados: Farinha de Trigo, Fermento, Carne Mo√≠da, Queijo, Coalhada Seca, Hortel√£, Lim√£o, Temperos √Årabes\n';
}

if (categories['Cozinha Oriental'] && categories['Cozinha Oriental'].length > 0) {
    analysis += 'üçú **Cozinha Oriental** - Produtos recomendados: Shoyu, Saqu√™, Wasabi, Gengibre, Algas Nori, Macarr√£o Yakissoba, Tar√™, √ìleo de Gergelim, Hashi\n';
}

if (categories['Cozinha Industrial'] && categories['Cozinha Industrial'].length > 0) {
    analysis += 'üè≠ **Cozinha Industrial** - Produtos recomendados: Food Service grandes volumes, Temperos industriais, Caldos concentrados, √ìleos em gal√µes\n';
}

if (categories['Churrascaria'] && categories['Churrascaria'].length > 0) {
    analysis += 'ü•© **Churrascaria** - Produtos recomendados: Picanha, Alcatra, Fraldinha, Costela, Sal Grosso, Tempero para Churrasco, Lingui√ßa Toscana, Chimichurri\n';
}

if (categories['Colaborador'] && categories['Colaborador'].length > 0) {
    analysis += 'üë• **Colaborador** - Produtos recomendados: Benef√≠cios, Produtos para funcion√°rios\n';
}

if (categories['F√°brica de Massas'] && categories['F√°brica de Massas'].length > 0) {
    analysis += 'üçù **F√°brica de Massas** - Produtos recomendados: Farinha Grano Duro, Ovos Pasteurizados, Massa Fresca, Ingredientes para produ√ß√£o de massas\n';
}

if (categories['Confeitaria'] && categories['Confeitaria'].length > 0) {
    analysis += 'üßÅ **Confeitaria** - Produtos recomendados: Chocolate para Confeiteiro, A√ß√∫car Confeiteiro, Ess√™ncias, Corantes, Granulado, Recheios, Coberturas\n';
}

if (categories['Latic√≠nios'] || categories['Distribuidor'] && categories['Latic√≠nios/Distribuidor'].length > 0) {
    analysis += 'ü•õ **Latic√≠nios/Distribuidor** - Produtos recomendados: Leites diversos, Queijos, Requeij√£o, Cream Cheese, Manteiga, Iogurtes para revenda\n';
}

if (categories['Loja de Conveni√™ncia'] && categories['Loja de Conveni√™ncia'].length > 0) {
    analysis += 'üè™ **Loja de Conveni√™ncia** - Produtos recomendados: Snacks, Refrigerantes, √Åguas, Energ√©ticos, Produtos de conveni√™ncia, Embalagens pequenas\n';
}

if (categories['A√ßougue'] && categories['A√ßougue'].length > 0) {
    analysis += 'ü•© **A√ßougue** - Produtos recomendados: Carnes Bovinas, Frango, Su√≠no, Embutidos, Lingui√ßas, Bacon, Cortes especiais, Carnes temperadas\n';
}

if (categories['Rotisserie'] && categories['Rotisserie'].length > 0) {
    analysis += 'üçó **Rotisserie** - Produtos recomendados: Frango para Assar, Temperos, Produtos semi-prontos, Salgados congelados, Pratos prontos\n';
}

if (categories['Adega'] && categories['Adega'].length > 0) {
    analysis += 'üç∑ **Adega** - Produtos recomendados: Vinhos Nacionais, Vinhos Importados, Espumantes, Whisky Premium, Vodka Importada, Licores, Bebidas Finas\n';
}

if (categories['Clube'] || categories['Associa√ß√£o Desportiva'] && categories['Clube/Associa√ß√£o Desportiva'].length > 0) {
    analysis += '‚öΩ **Clube/Associa√ß√£o Desportiva** - Produtos recomendados: Bebidas para eventos, Petiscos, Churrasco, Cerveja, Refrigerantes, Produtos para cantina\n';
}

if (categories['Buffet'] && categories['Buffet'].length > 0) {
    analysis += 'üéâ **Buffet** - Produtos recomendados: Food Service para eventos, Salgadinhos, Doces para festa, Bebidas, Descart√°veis, Produtos para catering\n';
}

if (categories['Hamburgeria'] && categories['Hamburgeria'].length > 0) {
    analysis += 'üçî **Hamburgeria** - Produtos recomendados: Hamb√∫rguer Gourmet, Bacon Premium, Queijos Especiais, Molhos Especiais, Batata R√∫stica, Onion Rings, Craft Beer\n';
}

if (categories['Sobremesas'] && categories['Sobremesas'].length > 0) {
    analysis += 'üç∞ **Sobremesas** - Produtos recomendados: Leite Condensado, Creme de Leite, A√ß√∫cares diversos, Chocolate, Gelatinas, Frutas em Calda, Coberturas\n';
}

if (categories['Bebidas'] && categories['Bebidas'].length > 0) {
    analysis += 'ü•§ **Bebidas** - Produtos recomendados: Refrigerantes, Sucos, √Åguas Minerais, Energ√©ticos, Isot√¥nicos, Bebidas Alco√≥licas, Cervejas\n';
}


    analysis += '\nüìã **Primeiros itens encontrados:**\n';
    items.slice(0, 5).forEach(item => {
        analysis += `‚Ä¢ ${item.name} - ${item.price}\n`;
    });

    if (totalItems > 5) {
        analysis += `‚Ä¢ ... e mais ${totalItems - 5} itens encontrados\n`;
    }

    return analysis;
}


    // Atualizar o m√©todo suggestProducts para usar apenas o cat√°logo real:
async suggestProducts(companyData, menuData) {
    console.log('üß† Iniciando an√°lise inteligente com cat√°logo real...');
    
    try {
        // Garantir que o cat√°logo est√° carregado
        await this.ensureCatalogLoaded();
        
        const suggestions = [];
        const menuItems = menuData.items || [];
        
        console.log(`üì¶ Analisando ${this.catalog.length} produtos do cat√°logo real`);
        console.log(`üçΩÔ∏è Contra ${menuItems.length} itens do card√°pio`);

        if (menuItems.length === 0) {
            console.log('‚ö†Ô∏è Nenhum item no card√°pio, usando an√°lise por tipo de empresa');
            return this.suggestByCompanyType(companyData);
        }

        // An√°lise inteligente por similaridade de texto
        const matches = this.findProductMatches(menuItems);
        
        // Converter matches para sugest√µes
        const sortedMatches = matches
            .sort((a, b) => b.score - a.score)
            .slice(0, 50);

        for (const match of sortedMatches) {
            suggestions.push({
                ...match.product,
                reason: match.reason,
                image: this.getProductImageSafe(match.product.code),
                priority: match.score,
                confidence: this.calculateConfidenceFromScore(match.score),
                matchedItems: match.matchedItems
            });
        }

        console.log(`‚úÖ ${suggestions.length} produtos sugeridos baseados no cat√°logo real`);
        return suggestions;

    } catch (error) {
        console.error('‚ùå Erro na an√°lise:', error);
        throw error; // Re-throw para mostrar erro ao usu√°rio
    }
}

// Busca de produtos por correspond√™ncia textual
findProductMatches(menuItems) {
    const matches = [];
    const menuText = menuItems.map(item => item.name.toLowerCase()).join(' ');
    
    console.log('üîç Texto do card√°pio para an√°lise:', menuText.substring(0, 200) + '...');
    
    this.catalog.forEach(product => {
        let score = 0;
        const matchedItems = [];
        let reason = '';
        
        // An√°lise por similaridade textual direta
        const similarity = this.calculateTextSimilarity(menuText, product.searchText || product.name.toLowerCase());
        if (similarity > 0.1) {
            score += similarity * 20;
            reason = `Similaridade textual detectada (${(similarity * 100).toFixed(1)}%)`;
        }
        
        // An√°lise por keywords
        const keywordMatches = this.countKeywordMatches(menuText, product.keywords || []);
        if (keywordMatches > 0) {
            score += keywordMatches * 5;
            reason = `${keywordMatches} palavra(s)-chave encontrada(s)`;
        }
        
        // An√°lise item por item
        menuItems.forEach(menuItem => {
            const itemSimilarity = this.calculateTextSimilarity(
                menuItem.name.toLowerCase(), 
                product.name.toLowerCase()
            );
            
            if (itemSimilarity > 0.2) {
                score += itemSimilarity * 10;
                matchedItems.push(menuItem.name);
                reason = `Produto relacionado a "${menuItem.name}"`;
            }
        });
        
        if (score > 2) {
            matches.push({
                product,
                score,
                reason: reason || 'Produto identificado como relevante',
                matchedItems
            });
        }
    });
    
    console.log(`üéØ ${matches.length} produtos encontraram correspond√™ncias`);
    return matches;
}
// Normalize text for comparison
    normalizeText(text) {
        if (!text || typeof text !== 'string') return '';
        return text
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[^a-z\s]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    // Calculate cosine similarity between two texts
    calculateTextSimilarity(text1, text2) {
        // Split texts into words
        const words1 = text1.split(' ').filter(word => word.length > 2);
        const words2 = text2.split(' ').filter(word => word.length > 2);

        // Create word frequency vectors
        const wordSet = new Set([...words1, ...words2]);
        const vector1 = Array.from(wordSet).map(word => words1.filter(w => w === word).length);
        const vector2 = Array.from(wordSet).map(word => words2.filter(w => w === word).length);

        // Calculate dot product
        const dotProduct = vector1.reduce((sum, val, i) => sum + val * vector2[i], 0);

        // Calculate magnitudes
        const magnitude1 = Math.sqrt(vector1.reduce((sum, val) => sum + val * val, 0));
        const magnitude2 = Math.sqrt(vector2.reduce((sum, val) => sum + val * val, 0));

        // Avoid division by zero
        if (magnitude1 === 0 || magnitude2 === 0) return 0;

        // Calculate cosine similarity
        return dotProduct / (magnitude1 * magnitude2);
    }

    // Updated method to suggest products based solely on text similarity
    async analyzeMenuAndSuggestProducts(menuText) {
        try {
            console.log('üîç Analisando card√°pio para sugest√£o de produtos...');
            
            // Normalize menu text for comparison
            const normalizedMenuText = this.normalizeText(menuText);
            if (!normalizedMenuText) {
                console.warn('‚ö†Ô∏è Nenhum texto v√°lido extra√≠do do card√°pio');
                return [];
            }

            // Calculate text similarity for each product
            const productsWithScores = this.catalog.map(product => {
                const similarity = this.calculateTextSimilarity(normalizedMenuText, product.searchText);
                return { ...product, similarity, reason: `Similaridade de texto: ${Math.round(similarity * 100)}%` };
            });

            // Sort by similarity score and take top 5
            const suggestedProducts = productsWithScores
                .sort((a, b) => b.similarity - a.similarity)
                .slice(0, 5)
                .filter(product => product.similarity > 0.1); // Minimum similarity threshold

            console.log(`‚úÖ ${suggestedProducts.length} produtos sugeridos com base em similaridade de texto`);
            return suggestedProducts;
        } catch (error) {
            console.error('‚ùå Erro ao sugerir produtos:', error);
            return [];
        }
    }
// Contar matches de keywords
countKeywordMatches(text, keywords) {
    if (!keywords || keywords.length === 0) return 0;
    
    return keywords.filter(keyword => 
        text.includes(keyword.toLowerCase())
    ).length;
}
// Sugest√µes baseadas apenas no tipo de empresa (sem produtos hardcoded)
suggestByCompanyType(companyData) {
    console.log('üè¢ An√°lise por tipo de empresa sem card√°pio');
    
    const activity = companyData.atividade_principal.toLowerCase();
    const suggestions = [];
    
    // Categorias relevantes por tipo (sem produtos espec√≠ficos)
    const relevantCategories = this.getRelevantCategories(activity);
    
    this.catalog.forEach(product => {
        let score = 0;
        
        // Score por categoria
        relevantCategories.forEach(({ category, weight }) => {
            if (product.category.toLowerCase().includes(category.toLowerCase())) {
                score += weight;
            }
        });
        
        // Score por palavras-chave relacionadas √† atividade
        const activityKeywords = this.getActivityKeywords(activity);
        const keywordMatches = this.countKeywordMatches(
            product.searchText || product.name.toLowerCase(),
            activityKeywords
        );
        
        score += keywordMatches * 2;
        
        if (score > 3) {
            suggestions.push({
                ...product,
                reason: `Recomendado para ${activity}`,
                image: this.getProductImageSafe(product.code),
                priority: score,
                confidence: score > 8 ? 'Alta' : score > 5 ? 'M√©dia' : 'Baixa',
                matchedItems: []
            });
        }
    });
    
    return suggestions
        .sort((a, b) => b.priority - a.priority)
        .slice(0, 8);
}
getRelevantCategories(activity) {
    const mappings = {
    'lanchonete': [
        { category: 'Embutidos', weight: 8 },
        { category: 'Congelados', weight: 7 },
        { category: 'Latic√≠nios', weight: 6 },
        { category: '√ìleos', weight: 5 }
    ],
    'pizzaria': [
        { category: 'Embutidos', weight: 9 },
        { category: 'Latic√≠nios', weight: 8 },
        { category: 'Molhos', weight: 7 },
        { category: 'Conservas', weight: 5 }
    ],
    'restaurante': [
        { category: 'Carnes', weight: 9 },
        { category: 'Gr√£os', weight: 8 },
        { category: 'Temperos', weight: 6 },
        { category: '√ìleos', weight: 5 }
    ],
    'restaurante_cantina': [
        { category: 'Carnes', weight: 9 },
        { category: 'Gr√£os', weight: 8 },
        { category: 'Temperos', weight: 7 },
        { category: 'Molhos', weight: 6 }
    ],
    'padaria': [
        { category: 'Farinhas', weight: 9 },
        { category: 'Doces', weight: 8 },
        { category: 'Latic√≠nios', weight: 7 },
        { category: '√ìleos', weight: 5 }
    ],
    'supermercado': [
        { category: 'Gr√£os', weight: 7 },
        { category: 'Latic√≠nios', weight: 6 },
        { category: 'Carnes', weight: 6 },
        { category: 'Limpeza', weight: 5 }
    ],
    'pessoa_fisica': [
        { category: 'Gr√£os', weight: 6 },
        { category: 'Latic√≠nios', weight: 5 },
        { category: 'Carnes', weight: 5 },
        { category: 'Limpeza', weight: 4 }
    ],
    'pastelaria': [
        { category: 'Farinhas', weight: 9 },
        { category: '√ìleos', weight: 8 },
        { category: 'Latic√≠nios', weight: 7 },
        { category: 'Carnes', weight: 6 }
    ],
    'bar_choperia': [
        { category: 'Bebidas', weight: 9 },
        { category: 'Conservas', weight: 7 },
        { category: 'Embutidos', weight: 6 },
        { category: 'Temperos', weight: 4 }
    ],
    'mercearia_sacolao': [
        { category: 'Gr√£os', weight: 8 },
        { category: 'Conservas', weight: 7 },
        { category: 'Temperos', weight: 6 },
        { category: '√ìleos', weight: 5 }
    ],
    'hotel_motel_pousada': [
        { category: 'Latic√≠nios', weight: 7 },
        { category: 'Bebidas', weight: 6 },
        { category: 'Gr√£os', weight: 5 },
        { category: 'Limpeza', weight: 5 }
    ],
    'esfiharia': [
        { category: 'Farinhas', weight: 9 },
        { category: 'Carnes', weight: 8 },
        { category: 'Latic√≠nios', weight: 7 },
        { category: 'Temperos', weight: 6 }
    ],
    'cozinha_oriental': [
        { category: 'Orientais', weight: 9 },
        { category: 'Carnes', weight: 7 },
        { category: 'Massas', weight: 6 },
        { category: 'Temperos', weight: 5 }
    ],
    'cozinha_industrial': [
        { category: 'Carnes', weight: 8 },
        { category: 'Gr√£os', weight: 8 },
        { category: 'Temperos', weight: 7 },
        { category: '√ìleos', weight: 6 }
    ],
    'churrascaria': [
        { category: 'Carnes', weight: 10 },
        { category: 'Temperos', weight: 8 },
        { category: 'Embutidos', weight: 6 },
        { category: 'Conservas', weight: 4 }
    ],
    'colaborador': [
        { category: 'Gr√£os', weight: 5 },
        { category: 'Latic√≠nios', weight: 4 },
        { category: 'Bebidas', weight: 4 },
        { category: 'Doces', weight: 3 }
    ],
    'fabrica_massas': [
        { category: 'Massas', weight: 10 },
        { category: 'Farinhas', weight: 9 },
        { category: 'Latic√≠nios', weight: 6 },
        { category: 'Temperos', weight: 4 }
    ],
    'confeitaria': [
        { category: 'Doces', weight: 10 },
        { category: 'Farinhas', weight: 8 },
        { category: 'Latic√≠nios', weight: 7 },
        { category: '√ìleos', weight: 5 }
    ],
    'laticinios_distribuidor': [
        { category: 'Latic√≠nios', weight: 10 },
        { category: 'Doces', weight: 6 },
        { category: 'Bebidas', weight: 4 },
        { category: 'Conservas', weight: 3 }
    ],
    'loja_conveniencia': [
        { category: 'Bebidas', weight: 8 },
        { category: 'Doces', weight: 7 },
        { category: 'Congelados', weight: 6 },
        { category: 'Limpeza', weight: 4 }
    ],
    'acougue': [
        { category: 'Carnes', weight: 10 },
        { category: 'Embutidos', weight: 8 },
        { category: 'Temperos', weight: 6 },
        { category: 'Latic√≠nios', weight: 4 }
    ],
    'rotisserie': [
        { category: 'Carnes', weight: 9 },
        { category: 'Congelados', weight: 8 },
        { category: 'Temperos', weight: 7 },
        { category: 'Molhos', weight: 5 }
    ],
    'adega': [
        { category: 'Bebidas', weight: 10 },
        { category: 'Conservas', weight: 6 },
        { category: 'Embutidos', weight: 5 },
        { category: 'Latic√≠nios', weight: 4 }
    ],
    'clube_associacao': [
        { category: 'Bebidas', weight: 8 },
        { category: 'Carnes', weight: 7 },
        { category: 'Embutidos', weight: 6 },
        { category: 'Congelados', weight: 5 }
    ],
    'buffet': [
        { category: 'Carnes', weight: 8 },
        { category: 'Congelados', weight: 8 },
        { category: 'Latic√≠nios', weight: 7 },
        { category: 'Bebidas', weight: 6 }
    ],
    'hamburgeria': [
        { category: 'Carnes', weight: 9 },
        { category: 'Latic√≠nios', weight: 8 },
        { category: 'Congelados', weight: 7 },
        { category: 'Molhos', weight: 6 }
    ],
    'outros': [
        { category: 'Gr√£os', weight: 5 },
        { category: 'Latic√≠nios', weight: 4 },
        { category: 'Temperos', weight: 4 },
        { category: '√ìleos', weight: 3 }
    ]
};

    
    // Encontrar mapeamento mais pr√≥ximo
    for (const [key, categories] of Object.entries(mappings)) {
        if (activity.includes(key)) {
            return categories;
        }
    }
    
    // Default gen√©rico expandido para todas as categorias
return [
    // Categorias essenciais - maior peso
    { category: 'Gr√£os', weight: 8 },
    { category: 'Latic√≠nios', weight: 7 },
    { category: 'Carnes', weight: 7 },
    { category: '√ìleos', weight: 6 },
    { category: 'Temperos', weight: 6 },
    
    // Categorias importantes - peso m√©dio-alto
    { category: 'Farinhas', weight: 5 },
    { category: 'Molhos', weight: 5 },
    { category: 'Bebidas', weight: 5 },
    { category: 'Embutidos', weight: 5 },
    { category: 'Doces', weight: 4 },
    { category: 'Massas', weight: 4 },
    { category: 'Conservas', weight: 4 },
    
    // Categorias complementares - peso m√©dio
    { category: 'Congelados', weight: 3 },
    { category: 'A√ß√∫cares', weight: 3 },
    { category: 'Limpeza', weight: 3 },
    { category: 'Cereais_Graos', weight: 2 },
    { category: 'Oleaginosas', weight: 2 },
    { category: 'Frutas_Polpas', weight: 2 },
    
    // Categorias espec√≠ficas - peso baixo
    { category: 'Orientais', weight: 1 },
    { category: 'Condimentos_Especiais', weight: 1 },
    { category: 'Produtos_Panificacao', weight: 1 },
    { category: 'Higiene', weight: 1 },
    { category: 'Descartaveis', weight: 1 },
    { category: 'Utensilios', weight: 1 }
];

}
getActivityKeywords(activity) {
    const keywordMaps = {
    'pizzaria': [
        'pizza', 'calabresa', 'queijo', 'mu√ßarela', 'molho', 'azeitona', 'or√©gano', 'manjeric√£o', 
        'tomate pelado', 'farinha pizza', 'champignon', 'palmito', 'parmes√£o', 'provolone', 
        'catupiry', 'azeite', 'massa pizza', 'pepperoni', 'presunto', 'bacon', 'cebola'
    ],
    
    'restaurante': [
        'carne', 'arroz', 'tempero', '√≥leo', 'sal', 'feij√£o', 'frango', 'boi', 'su√≠no', 'peixe',
        'caldo', 'extrato tomate', 'color√≠fico', 'alho', 'cebola', 'pimenta', 'molho tomate',
        'macarr√£o', 'massa', 'farinha', 'a√ß√∫car', 'vinagre', 'shoyu', 'food service'
    ],
    
    'lanchonete': [
        'hamb√∫rguer', 'batata', 'bacon', 'queijo prato', 'lanche', 'p√£o hamb√∫rguer', 'catchup', 
        'maionese', 'mostarda', 'salsicha', 'hot dog', 'nuggets', 'refrigerante', 'suco',
        'batata frita', 'presunto', 'mortadela', 'molho barbecue', 'pickles'
    ],
    
    'padaria': [
        'farinha', 'a√ß√∫car', 'fermento', 'leite', 'ovo', 'margarina', 'manteiga', 'chocolate',
        'doce leite', 'a√ß√∫car confeiteiro', 'ess√™ncia', 'baunilha', 'mistura bolo', 'recheio',
        'cobertura', 'granulado', 'mel', 'leite condensado', 'creme leite'
    ],
    
    'supermercado': [
        'variedades', 'food service', 'atacado', 'b√°sicos', 'essenciais', 'arroz', 'feij√£o',
        'a√ß√∫car', '√≥leo', 'sal', 'farinha', 'macarr√£o', 'leite', 'queijo', 'refrigerante',
        'detergente', 'sab√£o', 'papel higi√™nico', 'limpeza', 'higiene'
    ],
    
    'pessoa_fisica': [
        'consumidor final', 'fam√≠lia', 'casa', 'dom√©stico', 'pequena quantidade', 'b√°sicos',
        'essenciais', 'variedades', 'uso pessoal', 'embalagem pequena', 'unit√°rio'
    ],
    
    'pastelaria': [
        'pastel', 'farinha pastel', '√≥leo fritura', 'queijo', 'presunto', 'carne mo√≠da',
        'palmito', 'camar√£o', 'frango desfiado', 'molho pimenta', 'vinagre', 'catchup',
        'massa pastel', 'recheio', 'tempero'
    ],
    
    'bar_choperia': [
        'cerveja', 'bebidas alco√≥licas', 'whisky', 'vodka', 'gin', 'cacha√ßa', 'vinho', 
        'aperitivo', 'licor', 'petiscos', 'amendoim', 'azeitona', 'queijo', 'bacon',
        'lingui√ßa', 'refrigerante', '√°gua', 'energ√©tico', 'gelo'
    ],
    
    'mercearia_sacolao': [
        'frutas', 'verduras', 'legumes', 'b√°sicos', 'essenciais', 'tomate', 'cebola',
        'batata', 'cenoura', 'abastecimento', 'vizinhan√ßa', 'conservas', 'enlatados',
        'gr√£os', 'temperos'
    ],
    
    'hotel_motel_pousada': [
        'hospedagem', 'hotelaria', 'caf√© manh√£', 'room service', 'variedades', 'conveni√™ncia',
        'bebidas', 'snacks', 'higiene', 'amenities', 'frigobar', 'food service', 'institucional'
    ],
    
    'esfiharia': [
        'esfiha', 'esfirra', 'massa', 'farinha', 'fermento', 'carne mo√≠da', 'queijo',
        'zaatar', 'hortel√£', 'lim√£o', 'tomate', 'cebola', 'temperos √°rabes', 'coalhada',
        'tahine', 'azeite', 'pimenta'
    ],
    
    'cozinha_oriental': [
        'oriental', 'japon√™s', 'chin√™s', 'shoyu', 'saqu√™', 'wasabi', 'gengibre', 'algas nori',
        'hashi', 'yakissoba', 'tar√™', 'missoshiru', 'gergelim', '√≥leo gergelim', 'kani',
        'panko', 'taichi', 'mitsuwa'
    ],
    
    'cozinha_industrial': [
        'industrial', 'grande volume', 'food service', 'institucional', 'empresa', 'f√°brica',
        'cantina industrial', 'alimenta√ß√£o coletiva', 'grandes quantidades', 'atacado',
        'fornecimento', 'distribui√ß√£o', 'volume'
    ],
    
    'churrascaria': [
        'churrasco', 'carne bovina', 'picanha', 'alcatra', 'fraldinha', 'maminha', 'costela',
        'cupim', 'lingui√ßa', 'frango', 'sal grosso', 'tempero churrasco', 'carv√£o', 'briquete',
        'espeto', 'chimichurri', 'defumado'
    ],
    
    'colaborador': [
        'funcion√°rios', 'benef√≠cios', 'produtos funcion√°rios', 'alimenta√ß√£o funcion√°rios',
        'cesta b√°sica', 'vale alimenta√ß√£o', 'refeit√≥rio', 'cantina empresa'
    ],
    
    'fabrica_massas': [
        'massas', 'macarr√£o', 'espaguete', 'penne', 'talharim', 'lasanha', 'nhoque',
        'farinha grano duro', 'ovos', 'massa fresca', 'produ√ß√£o', 'industrial', 'famigliare'
    ],
    
    'confeitaria': [
        'confeitaria', 'doces', 'bombons', 'brigadeiro', 'chocolate', 'a√ß√∫car confeiteiro',
        'glucose', 'ess√™ncias', 'corantes', 'granulado', 'confeitos', 'recheios', 'coberturas',
        'pasta americana', 'forne√°vel', 'harald', 'doceiro'
    ],
    
    'laticinios_distribuidor': [
        'latic√≠nios', 'distribui√ß√£o', 'leite', 'queijos', 'iogurte', 'manteiga', 'requeij√£o',
        'cream cheese', 'nata', 'creme leite', 'atacado', 'revenda', 'tirolez', 'vigor'
    ],
    
    'loja_conveniencia': [
        'conveni√™ncia', '24 horas', 'snacks', 'bebidas', 'refrigerante', '√°gua', 'energ√©tico',
        'salgadinhos', 'doces', 'gelo', 'praticidade', 'r√°pido', 'embalagem pequena'
    ],
    
    'acougue': [
        'a√ßougue', 'carnes', 'carne bovina', 'frango', 'su√≠no', 'embutidos', 'lingui√ßa',
        'bacon', 'presunto', 'mortadela', 'cortes especiais', 'fil√© mignon', 'picanha',
        'alcatra', 'costela', 'resfriado', 'congelado'
    ],
    
    'rotisserie': [
        'rotisserie', 'frango assado', 'comida pronta', 'salgados', 'coxinha', 'empada',
        'pratos prontos', 'congelados', 'semi-prontos', 'take away', 'temperos', 'assado'
    ],
    
    'adega': [
        'adega', 'vinhos', 'vinho nacional', 'vinho importado', 'espumantes', 'bebidas finas',
        'whisky premium', 'vodka importada', 'licores', 'destilados', 'harmoniza√ß√£o',
        'chileno', 'argentino', 'portugu√™s'
    ],
    
    'clube_associacao': [
        'clube', 'associa√ß√£o', 'desportiva', 'social', 'eventos', 'festa', 'churrasco',
        'bebidas', 'petiscos', 'bar', 'cantina', 'recrea√ß√£o', 'volume', 'cerveja'
    ],
    
    'buffet': [
        'buffet', 'eventos', 'festa', 'casamento', 'formatura', 'anivers√°rio', 'catering',
        'finger food', 'salgadinhos', 'doces', 'bebidas', 'decora√ß√£o', 'descart√°veis',
        'food service'
    ],
    
    'hamburgeria': [
        'hamburgueria', 'hamb√∫rguer gourmet', 'blend', 'bacon', 'queijos especiais',
        'molhos especiais', 'batata r√∫stica', 'artesanal', 'premium', 'craft beer',
        'onion rings', 'cheddar', 'maturatta'
    ],
    
    'cantina': [
        'cantina', 'prato feito', 'self service', 'refei√ß√£o', 'almo√ßo', 'jantar', 'comida caseira',
        'food service', 'institucional', 'empresarial', 'escolar', 'volume'
    ],
    
    'outros': [
        'diversos', 'variados', 'sortimento', 'geral', 'm√∫ltiplos', 'diferentes', 'variedade',
        'misto', 'especiais', 'customizado', 'sob medida'
    ]
};

    
    for (const [key, keywords] of Object.entries(keywordMaps)) {
        if (activity.includes(key)) {
            return keywords;
        }
    }
    
    return ['tempero', 'sal', 'oleo']; // Keywords b√°sicas
}
calculateConfidenceFromScore(score) {
    if (score >= 15) return 'Muito Alta';
    if (score >= 10) return 'Alta';
    if (score >= 6) return 'M√©dia';
    if (score >= 3) return 'Baixa';
    return 'Muito Baixa';
}
// M√©todo seguro para buscar imagens (evita erros)
getProductImageSafe(productCode) {
    try {
        return this.getProductImage(productCode);
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao carregar imagem:', error);
        return `data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="150" viewBox="0 0 200 150"><rect width="200" height="150" fill="%23f0f0f0"/><text x="100" y="75" text-anchor="middle" fill="%23666" font-size="12">Produto</text></svg>`;
    }
}

// Sugest√µes de emerg√™ncia caso tudo falhe
getFallbackSuggestions() {
    console.log('üÜò Usando sugest√µes de emerg√™ncia');
    
    const basicProducts = [
        {
            
        },
        {
            
        },
        {
           
        }
    ];
    
    return basicProducts;
}

async processProspectSafe() {
    const cnpj = document.getElementById('cnpj').value.replace(/\D/g, '');
    
    const cardapioFile = document.getElementById('cardapio').files[0];

    if (!cnpj || cnpj.length !== 14) {
        alert('‚ùå CNPJ inv√°lido');
        return;
    }

    // Mostrar loading
    this.showLoading();

    try {
        // Timeout de 30 segundos para evitar travamentos
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout: Opera√ß√£o demorou muito')), 30000);
        });

        const analysisPromise = this.processProspectWithSteps(cnpj, cardapioFile);
        
        // Race entre a an√°lise e o timeout
        await Promise.race([analysisPromise, timeoutPromise]);
        
    } catch (error) {
        console.error('‚ùå Erro ou timeout:', error);
        alert('‚ùå An√°lise demorou muito. Tente novamente com um card√°pio menor.');
        this.hideLoading();
    }
}

async processProspectWithSteps(cnpj, cardapioFile) {
    // Etapa 1
    await this.updateLoadingStep(1);
    const companyData = await this.getCompanyData(cnpj);

    // Etapa 2  
    await this.updateLoadingStep(2);
    const locationData = await this.analyzeLocation(companyData);

    // Etapa 3
    await this.updateLoadingStep(3);
    const menuData = await this.processMenu(cardapioFile);

    // Etapa 4 - COM TIMEOUT
    await this.updateLoadingStep(4);
    const suggestions = await Promise.race([
        this.suggestProducts(companyData, menuData),
        new Promise((resolve) => {
            setTimeout(() => resolve(this.getFallbackSuggestions()), 10000);
        })
    ]);

    // Etapa 5
    await this.updateLoadingStep(5);
    this.currentProspect = {
        company: companyData,
        location: locationData,
        menu: menuData,
        suggestions: suggestions,
        
        timestamp: new Date().toISOString()
    };

    await this.sleep(1000);
    this.showResults();
    this.updateStats();
}


// Encontrar produtos similares usando m√∫ltiplos algoritmos
findSimilarProducts(menuItemName, menuCategory) {
    const matches = [];
    const searchTerm = menuItemName.toLowerCase();
    
    this.catalog.forEach(product => {
        let similarity = 0;
        let reason = '';
        
        // M√©todo 1: Similaridade direta do nome
        const nameSimilarity = this.calculateStringSimilarity(searchTerm, product.name.toLowerCase());
        if (nameSimilarity > 0.3) {
            similarity += nameSimilarity * 10;
            reason = `Nome similar: "${product.name}"`;
        }
        
        // M√©todo 2: Palavras-chave em comum
        const keywordScore = this.calculateKeywordSimilarity(searchTerm, product.keywords || []);
        if (keywordScore > 0) {
            similarity += keywordScore * 5;
            reason = reason || `Ingrediente relacionado encontrado`;
        }
        
        // M√©todo 3: Categoria similar
        if (menuCategory && product.category) {
            const categorySimilarity = this.calculateStringSimilarity(
                menuCategory.toLowerCase(), 
                product.category.toLowerCase()
            );
            if (categorySimilarity > 0.5) {
                similarity += categorySimilarity * 3;
                reason = reason || `Categoria similar: ${product.category}`;
            }
        }
        
        // M√©todo 4: An√°lise de contexto (ingredientes comuns)
        const contextScore = this.analyzeContextualRelevance(searchTerm, product);
        if (contextScore > 0) {
            similarity += contextScore * 2;
            reason = reason || `Contextualmente relevante`;
        }
        
        if (similarity > 2) { // Threshold m√≠nimo
            matches.push({
                product,
                similarity,
                reason
            });
        }
    });
    
    return matches.sort((a, b) => b.similarity - a.similarity);
}

// Calcular similaridade entre strings (algoritmo melhorado)
calculateStringSimilarity(str1, str2) {
    // Jaro-Winkler para melhor precis√£o com nomes de produtos
    const jaro = this.jaroSimilarity(str1, str2);
    const prefix = this.commonPrefixLength(str1, str2);
    return jaro + (0.1 * prefix * (1 - jaro));
}

jaroSimilarity(s1, s2) {
    if (s1.length === 0 && s2.length === 0) return 1;
    if (s1.length === 0 || s2.length === 0) return 0;
    
    const matchDistance = Math.floor(Math.max(s1.length, s2.length) / 2) - 1;
    const s1Matches = new Array(s1.length).fill(false);
    const s2Matches = new Array(s2.length).fill(false);
    let matches = 0;
    let transpositions = 0;
    
    // Find matches
    for (let i = 0; i < s1.length; i++) {
        const start = Math.max(0, i - matchDistance);
        const end = Math.min(i + matchDistance + 1, s2.length);
        
        for (let j = start; j < end; j++) {
            if (s2Matches[j] || s1[i] !== s2[j]) continue;
            s1Matches[i] = s2Matches[j] = true;
            matches++;
            break;
        }
    }
    
    if (matches === 0) return 0;
    
    // Find transpositions
    let k = 0;
    for (let i = 0; i < s1.length; i++) {
        if (!s1Matches[i]) continue;
        while (!s2Matches[k]) k++;
        if (s1[i] !== s2[k]) transpositions++;
        k++;
    }
    
    return (matches / s1.length + matches / s2.length + 
            (matches - transpositions / 2) / matches) / 3;
}

commonPrefixLength(s1, s2) {
    let prefix = 0;
    for (let i = 0; i < Math.min(s1.length, s2.length, 4); i++) {
        if (s1[i] === s2[i]) prefix++;
        else break;
    }
    return prefix;
}

// Calcular similaridade por palavras-chave
calculateKeywordSimilarity(searchTerm, productKeywords) {
    if (!productKeywords || productKeywords.length === 0) return 0;
    
    let matches = 0;
    const searchWords = searchTerm.split(/\s+/).filter(word => word.length > 2);
    
    searchWords.forEach(searchWord => {
        productKeywords.forEach(keyword => {
            if (keyword.includes(searchWord) || searchWord.includes(keyword)) {
                matches++;
            }
        });
    });
    
    return matches / Math.max(searchWords.length, productKeywords.length);
}

// Analisar relev√¢ncia contextual
analyzeContextualRelevance(menuItem, product) {
    let score = 0;
    const item = menuItem.toLowerCase();
    const productName = product.name.toLowerCase();
    
    // Contextos culin√°rios
    const contexts = {
    'pizzaria': [
        'queijo', 'mu√ßarela', 'mozzarella', 'calabresa', 'molho', 'tomate pelado', 'azeitona', 'bacon', 'presunto', 
        'or√©gano', 'manjeric√£o', 'farinha pizza', 'champignon', 'palmito', 'parmes√£o', 'provolone', 'catupiry', 
        'azeite', 'massa pizza', 'pepperoni', 'cebola', 'pimenta biquinho', 'extrato tomate'
    ],
    
    'restaurante_cantina': [
        'carne bovina', 'frango', 'arroz', 'feij√£o', 'tempero completo', 'sal', '√≥leo', 'alho', 'cebola', 'color√≠fico',
        'macarr√£o', 'massa', 'molho tomate', 'extrato tomate', 'caldo carne', 'caldo galinha', 'farinha trigo',
        'a√ß√∫car', 'vinagre', 'shoyu', 'legumes', 'conservas', 'food service'
    ],
    
    'lanchonete': [
        'hamb√∫rguer', 'carne mo√≠da', 'batata frita', 'batata palito', 'bacon', 'queijo prato', 'p√£o hamb√∫rguer', 
        'catchup', 'ketchup', 'maionese', 'mostarda', 'salsicha', 'hot dog', 'nuggets', 'refrigerante', 'suco',
        'presunto', 'mortadela', 'molho barbecue', 'pickles', 'cebola', 'tomate', 'alface'
    ],
    
    'padaria': [
        'farinha trigo', 'a√ß√∫car', 'fermento', 'leite', 'ovos', 'margarina', 'manteiga', 'chocolate forne√°vel',
        'doce leite', 'a√ß√∫car confeiteiro', 'ess√™ncia', 'baunilha', 'mistura bolo', 'recheio', 'cobertura',
        'granulado', 'mel', 'leite condensado', 'creme leite', 'melhorador farinha', 'desmoldante'
    ],
    
    'supermercado': [
        'variedades', 'food service', 'atacado', 'b√°sicos', 'essenciais', 'arroz', 'feij√£o', 'a√ß√∫car', '√≥leo',
        'sal', 'farinha', 'macarr√£o', 'leite', 'queijo', 'refrigerante', 'detergente', 'sab√£o', 'papel higi√™nico',
        'limpeza', 'higiene', 'conservas', 'enlatados', 'gr√£os'
    ],
    
    'pessoa_fisica': [
        'consumidor final', 'fam√≠lia', 'casa', 'dom√©stico', 'b√°sicos', 'essenciais', 'arroz', 'feij√£o', 'a√ß√∫car',
        '√≥leo', 'sal', 'farinha', 'leite', 'queijo', 'carne', 'frango', 'ovos', 'manteiga', 'margarina',
        'embalagem pequena', 'uso pessoal', 'limpeza', 'higiene'
    ],
    
    'pastelaria': [
        'farinha pastel', 'massa pastel', '√≥leo fritura', 'queijo', 'mu√ßarela', 'presunto', 'carne mo√≠da',
        'palmito picado', 'camar√£o', 'frango desfiado', 'molho pimenta', 'vinagre', 'catchup', 'cebola',
        'alho', 'temperos', 'recheios'
    ],
    
    'bar_choperia': [
        'cerveja', 'bebidas alco√≥licas', 'whisky', 'vodka', 'gin', 'cacha√ßa', 'vinho', 'aperitivo', 'licor',
        'petiscos', 'amendoim', 'azeitona', 'queijo', 'bacon', 'lingui√ßa calabresa', 'refrigerante', '√°gua',
        'energ√©tico', 'gelo', 'conservas', 'embutidos', 'salame', 'copa'
    ],
    
    'mercearia_sacolao': [
        'frutas', 'verduras', 'legumes', 'b√°sicos', 'essenciais', 'tomate', 'cebola', 'batata', 'cenoura',
        'conservas', 'enlatados', 'gr√£os', 'temperos', 'condimentos', 'azeite', 'vinagre', 'sal',
        'a√ß√∫car', 'farinha', 'arroz', 'feij√£o'
    ],
    
    'hotel_motel_pousada': [
        'hospedagem', 'hotelaria', 'caf√© manh√£', 'food service', 'variedades', 'conveni√™ncia', 'bebidas',
        'snacks', 'higiene', 'limpeza', 'frigobar', 'institucional', 'leite', 'caf√©', 'a√ß√∫car', 'margarina',
        'geleias', 'sucos', '√°guas minerais'
    ],
    
    'esfiharia': [
        'farinha trigo', 'fermento', 'carne mo√≠da', 'queijo', 'coalhada seca', 'hortel√£', 'lim√£o', 'tomate',
        'cebola', 'temperos √°rabes', 'azeite', 'pimenta', 'massa', 'recheios', 'zaatar', 'tahine'
    ],
    
    'cozinha_oriental': [
        'shoyu', 'saqu√™', 'wasabi', 'gengibre', 'algas nori', 'hashi', 'yakissoba', 'tar√™', 'missoshiru',
        'gergelim', '√≥leo gergelim', 'kani', 'panko', 'taichi', 'mitsuwa', 'molho agridoce', 'arroz japon√™s',
        'macarr√£o oriental', 'temperos orientais'
    ],
    
    'cozinha_industrial': [
        'food service', 'grande volume', 'institucional', 'atacado', 'fornecimento', 'distribui√ß√£o',
        'temperos industriais', 'caldos concentrados', '√≥leos gal√£o', 'conservas grandes', 'gr√£os grandes volumes',
        'farinhas industriais', 'a√ß√∫car industrial', 'sal industrial'
    ],
    
    'churrascaria': [
        'carne bovina', 'picanha', 'alcatra', 'fraldinha', 'maminha', 'costela', 'cupim', 'lingui√ßa toscana',
        'frango', 'sal grosso', 'tempero churrasco', 'carv√£o', 'briquete', 'espeto', 'chimichurri',
        'defumado', 'embutidos', 'bacon'
    ],
    
    'colaborador': [
        'funcion√°rios', 'benef√≠cios', 'cesta b√°sica', 'vale alimenta√ß√£o', 'refeit√≥rio', 'cantina empresa',
        'b√°sicos', 'essenciais', 'arroz', 'feij√£o', 'a√ß√∫car', '√≥leo', 'sal', 'caf√©', 'leite', 'a√ß√∫car'
    ],
    
    'fabrica_massas': [
        'macarr√£o', 'massas', 'espaguete', 'penne', 'talharim', 'lasanha', 'nhoque', 'farinha grano duro',
        'ovos pasteurizados', 'massa fresca', 'produ√ß√£o industrial', 'famigliare', 'renata', 'petybon',
        'barilla', 'semolina'
    ],
    
    'confeitaria': [
        'chocolate', 'a√ß√∫car confeiteiro', 'glucose', 'ess√™ncias', 'corantes', 'granulado', 'confeitos',
        'recheios', 'coberturas', 'pasta americana', 'forne√°vel', 'harald', 'doceiro', 'bombons',
        'brigadeiro', 'doces finos', 'decora√ß√£o'
    ],
    
    'laticinios_distribuidor': [
        'leite', 'queijos', 'iogurte', 'manteiga', 'requeij√£o', 'cream cheese', 'nata', 'creme leite',
        'atacado', 'revenda', 'distribui√ß√£o', 'tirolez', 'vigor', 'polenghi', 'scala', 'quat√°',
        'coronata', 'latic√≠nios diversos'
    ],
    
    'loja_conveniencia': [
        'conveni√™ncia', '24 horas', 'snacks', 'bebidas', 'refrigerante', '√°gua', 'energ√©tico', 'salgadinhos',
        'doces', 'gelo', 'praticidade', 'r√°pido', 'embalagem pequena', 'cigarros', 'caf√©', 'sandu√≠ches'
    ],
    
    'acougue': [
        'carnes', 'carne bovina', 'frango', 'su√≠no', 'embutidos', 'lingui√ßa', 'bacon', 'presunto',
        'mortadela', 'cortes especiais', 'fil√© mignon', 'picanha', 'alcatra', 'costela', 'resfriado',
        'congelado', 'temperado', 'defumado'
    ],
    
    'rotisserie': [
        'frango assado', 'comida pronta', 'salgados', 'coxinha', 'empada', 'pratos prontos', 'congelados',
        'semi-prontos', 'take away', 'temperos', 'assado', 'frango temperado', 'produtos prontos'
    ],
    
    'adega': [
        'vinhos', 'vinho nacional', 'vinho importado', 'espumantes', 'bebidas finas', 'whisky premium',
        'vodka importada', 'licores', 'destilados', 'harmoniza√ß√£o', 'chileno', 'argentino', 'portugu√™s',
        'bebidas especiais', 'premium'
    ],
    
    'clube_associacao': [
        'eventos', 'festa', 'churrasco', 'bebidas', 'petiscos', 'bar', 'cantina', 'recrea√ß√£o', 'volume',
        'cerveja', 'refrigerantes', 'carnes', 'lingui√ßas', 'social', 'desportiva', 'confraterniza√ß√£o'
    ],
    
    'buffet': [
        'eventos', 'festa', 'casamento', 'formatura', 'anivers√°rio', 'catering', 'finger food', 'salgadinhos',
        'doces festa', 'bebidas', 'decora√ß√£o', 'descart√°veis', 'food service', 'pratos elaborados',
        'sobremesas', 'canap√©s'
    ],
    
    'hamburgeria': [
        'hamb√∫rguer gourmet', 'blend', 'bacon premium', 'queijos especiais', 'molhos especiais', 
        'batata r√∫stica', 'artesanal', 'premium', 'craft beer', 'onion rings', 'cheddar', 'maturatta',
        'p√£es especiais', 'ingredientes gourmet'
    ],
    
    'pizza': [
        'queijo', 'mu√ßarela', 'calabresa', 'molho tomate', 'azeitona', 'bacon', 'presunto', 'or√©gano',
        'manjeric√£o', 'champignon', 'palmito', 'parmes√£o', 'catupiry', 'pepperoni', 'massa pizza'
    ],
    
    'salada': [
        'azeite', 'vinagre', 'tomate', 'alface', 'atum', 'milho', 'azeitona', 'palmito', 'queijo frescal',
        'pepino', 'cebola', 'cenoura', 'ervilha', 'sal', 'pimenta reino', 'lim√£o', 'manjeric√£o'
    ],
    
    'macarr√£o': [
        'molho tomate', 'queijo parmes√£o', 'carne mo√≠da', 'frango', 'bacon', 'alho', 'cebola', 'azeite',
        'manjeric√£o', 'or√©gano', 'cream cheese', 'requeij√£o', 'extrato tomate', 'massa'
    ],
    
    'frango': [
        'tempero completo', '√≥leo', 'batata', 'arroz', 'sal', 'pimenta', 'alho', 'cebola', 'color√≠fico',
        'lim√£o', 'molho', 'empanado', 'farinha rosca', 'ovos'
    ],
    
    'carne': [
        'sal', 'tempero', '√≥leo', 'batata', 'arroz', 'alho', 'cebola', 'pimenta', 'color√≠fico', 'vinagre',
        'molho', 'carne bovina', 'su√≠na', 'defumado'
    ],
    
    'sobremesa': [
        'a√ß√∫car', 'leite', 'chocolate', 'creme leite', 'leite condensado', 'ovos', 'manteiga', 'farinha',
        'ess√™ncia baunilha', 'gelatina', 'frutas calda', 'mel', 'doce leite'
    ],
    
    'lanche': [
        'p√£o', 'queijo', 'presunto', 'manteiga', 'bacon', 'mortadela', 'salsicha', 'maionese', 'catchup',
        'mostarda', 'alface', 'tomate', 'milho'
    ],
    
    'bebidas': [
        'refrigerante', 'suco', '√°gua mineral', 'cerveja', 'energ√©tico', 'isot√¥nico', 'caf√©', 'ch√°',
        'bebidas alco√≥licas', 'vinhos', 'whisky', 'vodka', 'licores'
    ],
    
    'temperos': [
        'sal', 'pimenta reino', 'or√©gano', 'manjeric√£o', 'alho', 'cebola', 'color√≠fico', 'cominho',
        'p√°prica', 'chimichurri', 'tempero baiano', 'lemon pepper', 'tempero completo'
    ],
    
    'molhos': [
        'molho tomate', 'catchup', 'maionese', 'mostarda', 'barbecue', 'shoyu', 'molho ingl√™s',
        'molho pimenta', 'tar√™', 'molho cheddar', 'bechamel', 't√°rtaro'
    ],
    
    'conservas': [
        'azeitona', 'palmito', 'champignon', 'alcachofra', 'pepininho', 'pickles', 'atum', 'sardinha',
        'milho', 'ervilha', 'tomate pelado', 'aspargos', 'cogumelo'
    ],
    
    'congelados': [
        'hamb√∫rguer congelado', 'nuggets', 'batata frita', 'pizza', 'p√£o alho', 'p√£o queijo', 'br√≥colis',
        'couve flor', 'polenta', 'mandioca', 'frango empanado'
    ],
    
    'outros': [
        'diversos', 'variados', 'sortimento', 'geral', 'm√∫ltiplos', 'variedade', 'misto', 'especiais',
        'customizado', 'sob medida', 'produtos espec√≠ficos'
    ]
};

    
    Object.entries(contexts).forEach(([context, ingredients]) => {
        if (item.includes(context)) {
            ingredients.forEach(ingredient => {
                if (productName.includes(ingredient)) {
                    score += 2;
                }
            });
        }
    });
    
    return Math.min(score, 10); // Cap no score
}

// Buscar produtos por tipo de atividade (fallback)
findProductsByActivity(companyData, menuData) {
    const activity = companyData.atividade_principal.toLowerCase();
    const matches = [];
    
    // Categorias relevantes por tipo de neg√≥cio
    const activityCategories = {
    'pizzaria': ['embutidos', 'latic√≠nios', 'molhos', 'conservas', '√≥leos', 'temperos', 'farinhas'],
    
    'restaurante_cantina': ['carnes', 'gr√£os', 'temperos', '√≥leos', 'latic√≠nios', 'molhos', 'conservas', 'massas'],
    
    'lanchonete': ['embutidos', 'congelados', '√≥leos', 'latic√≠nios', 'bebidas', 'molhos', 'carnes'],
    
    'padaria': ['a√ß√∫cares', 'farinhas', '√≥leos', 'latic√≠nios', 'ovos', 'doces', 'temperos'],
    
    'supermercado': ['gr√£os', 'latic√≠nios', 'carnes', 'limpeza', 'bebidas', 'conservas', '√≥leos', 'a√ß√∫cares'],
    
    'pessoa_fisica': ['gr√£os', 'latic√≠nios', 'carnes', 'limpeza', 'bebidas', '√≥leos'],
    
    'pastelaria': ['farinhas', '√≥leos', 'latic√≠nios', 'carnes', 'conservas', 'temperos'],
    
    'bar_choperia': ['bebidas', 'conservas', 'embutidos', 'temperos', 'oleaginosas'],
    
    'mercearia_sacolao': ['gr√£os', 'conservas', 'temperos', '√≥leos', 'a√ß√∫cares', 'massas'],
    
    'hotel_motel_pousada': ['latic√≠nios', 'bebidas', 'gr√£os', 'limpeza', 'doces', 'carnes'],
    
    'esfiharia': ['farinhas', 'carnes', 'latic√≠nios', 'temperos', '√≥leos', 'conservas'],
    
    'cozinha_oriental': ['orientais', 'carnes', 'massas', 'temperos', '√≥leos', 'conservas'],
    
    'cozinha_industrial': ['carnes', 'gr√£os', 'temperos', '√≥leos', 'molhos', 'conservas'],
    
    'churrascaria': ['carnes', 'temperos', 'embutidos', 'conservas', 'bebidas', '√≥leos'],
    
    'colaborador': ['gr√£os', 'latic√≠nios', 'bebidas', 'doces', 'limpeza'],
    
    'fabrica_massas': ['massas', 'farinhas', 'latic√≠nios', 'temperos', '√≥leos', 'ovos'],
    
    'confeitaria': ['doces', 'farinhas', 'latic√≠nios', '√≥leos', 'a√ß√∫cares', 'temperos'],
    
    'laticinios_distribuidor': ['latic√≠nios', 'doces', 'bebidas', 'conservas'],
    
    'loja_conveniencia': ['bebidas', 'doces', 'congelados', 'limpeza', 'embutidos'],
    
    'acougue': ['carnes', 'embutidos', 'temperos', 'latic√≠nios', 'conservas'],
    
    'rotisserie': ['carnes', 'congelados', 'temperos', 'molhos', '√≥leos'],
    
    'adega': ['bebidas', 'conservas', 'embutidos', 'latic√≠nios', 'doces'],
    
    'clube_associacao': ['bebidas', 'carnes', 'embutidos', 'congelados', 'temperos'],
    
    'buffet': ['carnes', 'congelados', 'latic√≠nios', 'bebidas', 'doces', 'temperos'],
    
    'hamburgeria': ['carnes', 'latic√≠nios', 'congelados', 'molhos', 'embutidos', '√≥leos'],
    
    'outros': ['gr√£os', 'latic√≠nios', 'temperos', '√≥leos', 'conservas']
};

    
    let relevantCategories = [];
    Object.entries(activityCategories).forEach(([type, categories]) => {
        if (activity.includes(type) || activity.includes(type.slice(0, -1))) {
            relevantCategories = categories;
        }
    });
    
    if (relevantCategories.length === 0) {
        relevantCategories = ['gr√£os', '√≥leos', 'temperos']; // B√°sicos
    }
    
    this.catalog.forEach(product => {
        const categoryMatch = relevantCategories.some(cat => 
            product.category.toLowerCase().includes(cat)
        );
        
        if (categoryMatch) {
            matches.push({
                product,
                similarity: 5, // Score m√©dio para matches por atividade
                reason: `Recomendado para ${activity}`,
                matchedMenuItem: `Tipo de neg√≥cio: ${activity}`
            });
        }
    });
    
    return matches.sort((a, b) => b.similarity - a.similarity).slice(0, 8);
}

// Gerar raz√£o inteligente
generateIntelligentReason(item) {
    if (item.matchedMenuItem && item.similarity > 7) {
        return `Produto ideal para "${item.matchedMenuItem}" - Alta similaridade detectada`;
    } else if (item.matchedMenuItem && item.similarity > 5) {
        return `Recomendado para complementar "${item.matchedMenuItem}"`;
    } else if (item.similarity > 5) {
        return `Produto relacionado aos itens do seu card√°pio`;
    } else {
        return item.reason || 'Produto sugerido para seu tipo de neg√≥cio';
    }
}


// Calcular n√≠vel de confian√ßa
calculateConfidenceLevel(similarity) {
    if (similarity >= 8) return 'Muito Alta';
    if (similarity >= 6) return 'Alta';  
    if (similarity >= 4) return 'M√©dia';
    if (similarity >= 2) return 'Baixa';
    return 'Muito Baixa';
}
getProductImage(productCode) {
    // Primeiro, tentar buscar do mapeamento de imagens
    if (this.imagesMap && this.imagesMap[productCode]) {
        return this.imagesMap[productCode];
    }
    
    // Buscar no produto do cat√°logo
    const product = this.catalog.find(p => p.code === productCode);
    if (product && product.image) {
        return product.image;
    }
    
    // Buscar no sistema principal de imagens (se dispon√≠vel)
    if (window.produtosPorCategoria) {
        for (const categoria of Object.values(window.produtosPorCategoria)) {
            const produtoEncontrado = categoria.find(p => 
                p.codigo === productCode || p.id === productCode
            );
            if (produtoEncontrado && produtoEncontrado.imagem) {
                return produtoEncontrado.imagem;
            }
        }
    }
    
    // Placeholder personalizado
    return `data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="150" viewBox="0 0 200 150"><rect width="200" height="150" fill="%23f8f9fa"/><circle cx="100" cy="60" r="20" fill="%23dee2e6"/><rect x="75" y="85" width="50" height="30" fill="%23dee2e6"/><text x="100" y="130" text-anchor="middle" fill="%23868e96" font-size="10">Produto ${productCode}</text></svg>`;
}


    detectActivityType(companyData, menuData) {
        const activity = companyData.atividade_principal.toLowerCase();
        const menuCategories = Object.keys(menuData.categories || {});

// Pizzaria
if (activity.includes('pizzaria') || menuCategories.includes('Pizzas') || 
    activity.includes('pizza') || menuCategories.includes('Pizza')) {
    return 'pizzaria';
}

// Restaurante/Cantina
if (activity.includes('restaurante') || activity.includes('cantina') || 
    activity.includes('refei√ß√£o') || menuCategories.includes('Pratos Principais') ||
    menuCategories.includes('Almo√ßo') || menuCategories.includes('Jantar') ||
    activity.includes('self service') || activity.includes('prato feito')) {
    return 'restaurante_cantina';
}

// Lanchonete
if (activity.includes('lanchonete') || menuCategories.includes('Lanches') ||
    menuCategories.includes('Hamb√∫rgueres') || activity.includes('lanche') ||
    activity.includes('fast food') || menuCategories.includes('Sandu√≠ches')) {
    return 'lanchonete';
}

// Padaria
if (activity.includes('padaria') || activity.includes('panifica√ß√£o') ||
    menuCategories.includes('P√£es') || menuCategories.includes('Doces') ||
    activity.includes('confeitaria') || menuCategories.includes('Bolos') ||
    activity.includes('panificadora')) {
    return 'padaria';
}

// Bar/Choperia
if (activity.includes('bar') || activity.includes('choperia') || 
    activity.includes('bebida') || menuCategories.includes('Bebidas Alco√≥licas') ||
    menuCategories.includes('Cervejas') || activity.includes('pub') ||
    menuCategories.includes('Petiscos')) {
    return 'bar_choperia';
}

// Hamburgeria
if (activity.includes('hamburgeria') || activity.includes('burger') ||
    menuCategories.includes('Hamb√∫rgueres Gourmet') || activity.includes('hamburgueria') ||
    menuCategories.includes('Burgers') || activity.includes('hamb√∫rguer artesanal')) {
    return 'hamburgeria';
}

// Churrascaria
if (activity.includes('churrascaria') || activity.includes('churrasco') ||
    menuCategories.includes('Carnes na Brasa') || activity.includes('rod√≠zio') ||
    menuCategories.includes('Espetos') || activity.includes('grelhados')) {
    return 'churrascaria';
}

// Esfiharia
if (activity.includes('esfiharia') || activity.includes('esfiha') ||
    menuCategories.includes('Esfihas') || activity.includes('comida √°rabe') ||
    menuCategories.includes('√Årabes') || activity.includes('esfirra')) {
    return 'esfiharia';
}

// Cozinha Oriental
if (activity.includes('oriental') || activity.includes('japon√™s') ||
    activity.includes('chin√™s') || menuCategories.includes('Oriental') ||
    menuCategories.includes('Japonesa') || menuCategories.includes('Chinesa') ||
    activity.includes('sushi') || activity.includes('yakissoba')) {
    return 'cozinha_oriental';
}

// Pastelaria
if (activity.includes('pastelaria') || activity.includes('pastel') ||
    menuCategories.includes('Past√©is') || activity.includes('salgados fritos') ||
    menuCategories.includes('Salgados')) {
    return 'pastelaria';
}

// A√ßougue
if (activity.includes('a√ßougue') || activity.includes('acougue') ||
    activity.includes('carnes') || menuCategories.includes('Carnes Frescas') ||
    activity.includes('frigor√≠fico') || activity.includes('casa de carnes')) {
    return 'acougue';
}

// Supermercado
if (activity.includes('supermercado') || activity.includes('mercado') ||
    activity.includes('hipermercado') || activity.includes('varejo') ||
    activity.includes('emp√≥rio') || activity.includes('mercearia grande')) {
    return 'supermercado';
}

// Mercearia/Sacol√£o
if (activity.includes('mercearia') || activity.includes('sacol√£o') ||
    activity.includes('hortifruti') || activity.includes('quitanda') ||
    activity.includes('verdur√£o') || menuCategories.includes('Hortifruti')) {
    return 'mercearia_sacolao';
}

// Loja de Conveni√™ncia
if (activity.includes('conveni√™ncia') || activity.includes('convenience') ||
    activity.includes('24 horas') || activity.includes('praticidade') ||
    menuCategories.includes('Conveni√™ncia')) {
    return 'loja_conveniencia';
}

// Adega
if (activity.includes('adega') || activity.includes('vinhos') ||
    menuCategories.includes('Vinhos') || activity.includes('bebidas finas') ||
    menuCategories.includes('Vinhos Importados') || activity.includes('wine bar')) {
    return 'adega';
}

// Buffet
if (activity.includes('buffet') || activity.includes('eventos') ||
    activity.includes('festa') || menuCategories.includes('Eventos') ||
    activity.includes('catering') || activity.includes('casamento')) {
    return 'buffet';
}

// Hotel/Motel/Pousada
if (activity.includes('hotel') || activity.includes('motel') ||
    activity.includes('pousada') || activity.includes('hospedagem') ||
    activity.includes('pousada') || menuCategories.includes('Room Service') ||
    activity.includes('hotelaria')) {
    return 'hotel_motel_pousada';
}

// Rotisserie
if (activity.includes('rotisserie') || activity.includes('frango assado') ||
    activity.includes('comida pronta') || menuCategories.includes('Pratos Prontos') ||
    activity.includes('take away') || activity.includes('semi-prontos')) {
    return 'rotisserie';
}

// Confeitaria
if (activity.includes('confeitaria') || activity.includes('doces finos') ||
    menuCategories.includes('Doces Finos') || activity.includes('bombons') ||
    menuCategories.includes('Confeitaria') || activity.includes('chocolateria')) {
    return 'confeitaria';
}

// F√°brica de Massas
if (activity.includes('f√°brica de massas') || activity.includes('massas frescas') ||
    menuCategories.includes('Massas Frescas') || activity.includes('produ√ß√£o massas') ||
    activity.includes('massa artesanal') || activity.includes('macarr√£o fresco')) {
    return 'fabrica_massas';
}

// Latic√≠nios/Distribuidor
if (activity.includes('latic√≠nios') || activity.includes('distribuidor') ||
    activity.includes('queijos') || menuCategories.includes('Latic√≠nios') ||
    activity.includes('distribui√ß√£o') || activity.includes('atacado aliment√≠cio')) {
    return 'laticinios_distribuidor';
}

// Cozinha Industrial
if (activity.includes('industrial') || activity.includes('food service') ||
    activity.includes('institucional') || activity.includes('cantina industrial') ||
    activity.includes('alimenta√ß√£o coletiva') || activity.includes('grandes volumes')) {
    return 'cozinha_industrial';
}

// Clube/Associa√ß√£o Desportiva
if (activity.includes('clube') || activity.includes('associa√ß√£o') ||
    activity.includes('desportiva') || activity.includes('social') ||
    menuCategories.includes('Eventos Sociais') || activity.includes('recreativo')) {
    return 'clube_associacao';
}

// Pessoa F√≠sica
if (activity.includes('pessoa f√≠sica') || activity.includes('consumidor final') ||
    activity.includes('uso dom√©stico') || activity.includes('fam√≠lia') ||
    activity.includes('casa') || activity.includes('residencial')) {
    return 'pessoa_fisica';
}

// Colaborador
if (activity.includes('colaborador') || activity.includes('funcion√°rio') ||
    activity.includes('benef√≠cio') || activity.includes('vale alimenta√ß√£o') ||
    activity.includes('cesta b√°sica')) {
    return 'colaborador';
}

// Outros (fallback)
return 'outros';


       
    }

    getRecommendationReason(product, activityType, menuData) {
        const reasons = {
    'pizzaria': {
        '27': 'Calabresa √© ingrediente essencial para pizzas tradicionais',
        '271': 'Bacon em cubos ideal para pizzas gourmet',
        '1351': 'Atum para diversificar sabores de pizza',
        '47': 'Banha para massa de pizza crocante',
        '4385': 'A√ß√∫car para equilibrar molho de tomate',
        '846': 'Mu√ßarela Tirolez - queijo premium para cobertura',
        '531': 'Extrato de tomate para molho de pizza concentrado',
        '489': 'Palmito para pizzas vegetarianas',
        '1029': 'Azeitona preta sem caro√ßo - praticidade no preparo',
        '4377': 'Or√©gano peruano - aroma aut√™ntico para pizzas'
    },
    
    'restaurante_cantina': {
        '5167': 'Ac√©m bovino resfriado - carne de qualidade para pratos principais',
        '89': 'Arroz food service - base para pratos executivos',
        '803': 'Feij√£o preto food service - acompanhamento tradicional',
        '506': 'Caldo de carne - real√ßador de sabor',
        '531': 'Extrato de tomate - base para molhos',
        '595': 'Color√≠fico - cor e sabor em pratos brasileiros',
        '925': '√ìleo de soja - versatilidade no preparo',
        '150': 'Macarr√£o espaguete com ovos - pratos principais',
        '8': 'Coca Cola sem a√ß√∫car - bebida popular',
        '1280': 'Molho shoyu - tempero oriental'
    },
    
    'lanchonete': {
        '271': 'Bacon em cubos essencial para hamb√∫rguers premium',
        '25': 'Batata palito pr√©-frita - praticidade e qualidade',
        '66': 'Hamb√∫rguer bovino sabor picanha - produto principal',
        '411': 'Catchup - molho indispens√°vel',
        '351': 'Maionese grande - acompanhamento essencial',
        '27': 'Calabresa - versatilidade em sandu√≠ches',
        '7': 'Coca Cola lata - bebida l√≠der',
        '142': 'Apresuntado Aurora - frios de qualidade',
        '417': 'Mostarda - complemento cl√°ssico',
        '334': 'Queijo coalho espeto - lanche regional'
    },
    
    'padaria': {
        '309': 'Farinha de trigo tipo 1 - base para p√£es',
        '4385': 'A√ß√∫car refinado granulado - ado√ßante principal',
        '318': 'Fermento biol√≥gico fresco - crescimento da massa',
        '688': 'Leite integral - hidrata√ß√£o e sabor',
        '1087': 'Ovos brancos - estrutura e cor',
        '245': 'Margarina com sal 75% - gordura para massas',
        '416': 'Chocolate forne√°vel - recheios e coberturas',
        '708': 'Leite condensado integral - doces e recheios',
        '4727': 'Fermento em p√≥ qu√≠mico - crescimento de bolos',
        '7069': 'Melhorador de farinha - qualidade da massa'
    },
    
    'supermercado': {
        '89': 'Arroz food service - produto b√°sico de alta rota√ß√£o',
        '4385': 'A√ß√∫car refinado - essencial para fam√≠lias',
        '925': '√ìleo de soja - uso di√°rio nas cozinhas',
        '5167': 'Ac√©m bovino - prote√≠na acess√≠vel',
        '688': 'Leite integral - consumo familiar',
        '7': 'Coca Cola lata - bebida popular',
        '358': 'Detergente neutro - limpeza dom√©stica',
        '89': 'Arroz food service - alta margem',
        '701': '√Ågua sanit√°ria - higieniza√ß√£o',
        '222': 'Papel higi√™nico - produto essencial'
    },
    
    'pessoa_fisica': {
        '4': 'Farinha de trigo pequena - por√ß√£o familiar',
        '4385': 'A√ß√∫car cristal - ado√ßante dom√©stico',
        '688': 'Leite integral - consumo di√°rio',
        '5167': 'Ac√©m bovino - prote√≠na familiar',
        '1087': 'Ovos brancos - uso vers√°til',
        '245': 'Margarina - gordura para o dia a dia',
        '7': 'Coca Cola - bebida familiar',
        '358': 'Detergente neutro - limpeza casa',
        '222': 'Papel higi√™nico - higiene familiar',
        '271': 'Bacon - sabor especial para refei√ß√µes'
    },
    
    'pastelaria': {
        '877': 'Farinha de trigo pastel - massa espec√≠fica',
        '925': '√ìleo de soja - fritura de qualidade',
        '846': 'Mu√ßarela - recheio tradicional',
        '142': 'Apresuntado - recheio salgado',
        '5167': 'Carne mo√≠da - recheio popular',
        '532': 'Palmito picado - recheio vegetariano',
        '318': 'Fermento biol√≥gico - crescimento da massa',
        '47': 'Banha - fritura crocante',
        '1087': 'Ovos - liga para massa',
        '5242': 'Massa para pastel rolo - praticidade'
    },
    
    'bar_choperia': {
        '3': 'Cerveja Skol pilsen - bebida principal',
        '1579': 'Cerveja Heineken - premium',
        '1258': 'Vodka Smirnoff - destilado popular',
        '1261': 'Whisky Johnnie Walker Red - whisky tradicional',
        '1029': 'Azeitona preta - petisco cl√°ssico',
        '1010': 'Amendoim torrado salgado - acompanhamento',
        '271': 'Bacon em cubos - petisco gourmet',
        '27': 'Calabresa - tira-gosto',
        '7': 'Coca Cola - mistura para drinks',
        '1845': 'Red Bull - energ√©tico para drinks'
    },
    
    'mercearia_sacolao': {
        '89': 'Arroz food service - produto b√°sico',
        '803': 'Feij√£o preto - essencial brasileiro',
        '4385': 'A√ß√∫car cristal - insumo b√°sico',
        '925': '√ìleo de soja - gordura principal',
        '531': 'Extrato de tomate - base para molhos',
        '1029': 'Azeitona - conserva popular',
        '489': 'Palmito - produto regional',
        '322': 'Ervilha grande - conserva b√°sica',
        '333': 'Milho grande - versatilidade culin√°ria',
        '438': 'Sal refinado - tempero fundamental'
    },
    
    'hotel_motel_pousada': {
        '688': 'Leite integral - caf√© da manh√£',
        '4385': 'A√ß√∫car cristal - ado√ßante para h√≥spedes',
        '7': 'Coca Cola lata - frigobar',
        '1387': '√Ågua mineral Crystal - cortesia',
        '708': 'Leite condensado - caf√© da manh√£',
        '245': 'Margarina - caf√© da manh√£',
        '873': 'Caf√© Pil√£o - bebida principal',
        '89': 'Arroz food service - cozinha industrial',
        '358': 'Detergente neutro - limpeza quartos',
        '222': 'Papel higi√™nico - amenities'
    },
    
    'esfiharia': {
        '309': 'Farinha de trigo tipo 1 - massa de esfiha',
        '318': 'Fermento biol√≥gico - crescimento da massa',
        '5167': 'Carne mo√≠da - recheio principal',
        '846': 'Mu√ßarela - recheio queijo',
        '925': '√ìleo de soja - pincelar massas',
        '1087': 'Ovos - dourar esfihas',
        '595': 'Color√≠fico - cor da massa',
        '506': 'Caldo de carne - tempero do recheio',
        '438': 'Sal refinado - tempero b√°sico',
        '1019': 'Tempero baiano - sabor √°rabe'
    },
    
    'cozinha_oriental': {
        '1118': 'Molho shoyu Cep√™ra - tempero b√°sico oriental',
        '4447': 'Saqu√™ seco - bebida tradicional',
        '7208': 'Wasabi em p√≥ - condimento japon√™s',
        '6008': 'Gengibre em conserva - acompanhamento',
        '6644': 'Algas marinhas nori - preparo de sushi',
        '8128': 'Macarr√£o para yakissoba - prato principal',
        '6246': 'Molho tar√™ - molho agridoce',
        '1046': 'Gergelim branco - finaliza√ß√£o de pratos',
        '8236': '√ìleo de gergelim - sabor oriental',
        '6043': 'Hashi de bambu - utens√≠lio tradicional'
    },
    
    'cozinha_industrial': {
        '89': 'Arroz food service - grandes volumes',
        '5167': 'Ac√©m bovino - prote√≠na em escala',
        '925': '√ìleo de soja - fritura industrial',
        '506': 'Caldo de carne - tempero concentrado',
        '456': 'Saz√≥n carnes - tempero industrial',
        '7667': 'Ajinomoto food service - real√ßador',
        '531': 'Extrato de tomate - molho base',
        '350': 'Maionese sach√™ - por√ß√£o individual',
        '412': 'Catchup sach√™ - condimento industrial',
        '460': 'Base culin√°ria Leco - praticidade'
    },
    
    'churrascaria': {
        '5136': 'Picanha bovina - corte nobre',
        '7342': 'Alcatra com maminha - corte popular',
        '7142': 'Fraldinha bovina - sabor intenso',
        '929': 'Sal grosso - tempero tradicional',
        '1019': 'Tempero baiano - sabor regional',
        '191': 'Lingui√ßa toscana - acompanhamento',
        '1342': 'Briquete - combust√≠vel para churrasqueira',
        '7008': 'Chimichurri - molho argentino',
        '3': 'Cerveja Skol - bebida tradicional',
        '271': 'Bacon - entrada premium'
    },
    
    'colaborador': {
        '89': 'Arroz food service - cesta b√°sica',
        '803': 'Feij√£o preto - alimento b√°sico',
        '4385': 'A√ß√∫car cristal - ado√ßante b√°sico',
        '925': '√ìleo de soja - gordura essencial',
        '688': 'Leite integral - prote√≠na',
        '4': 'Farinha de trigo - panifica√ß√£o',
        '438': 'Sal refinado - tempero b√°sico',
        '150': 'Macarr√£o espaguete - carboidrato',
        '7': 'Coca Cola - benef√≠cio',
        '873': 'Caf√© tradicional - bebida di√°ria'
    },
    
    'fabrica_massas': {
        '249': 'Macarr√£o espaguete grano duro - mat√©ria-prima',
        '6145': 'Macarr√£o caracolino com ovos - produ√ß√£o',
        '1653': 'Macarr√£o fettuccine grano duro - linha premium',
        '591': 'Macarr√£o penne grano duro - formato popular',
        '1087': 'Ovos pasteurizados - ingrediente essencial',
        '4': 'Farinha de trigo - base da produ√ß√£o',
        '8563': 'Massa fresca espaguete - produto final',
        '8565': 'Massa para lasanha - diversifica√ß√£o',
        '8567': 'Nhoque de batata - linha especial',
        '925': '√ìleo de soja - processo produtivo'
    },
    
    'confeitaria': {
        '796': 'Chocolate ao leite Nestl√© - cobertura premium',
        '4225': 'A√ß√∫car confeiteiro - finaliza√ß√£o',
        '4542': 'Glicose - textura dos doces',
        '6527': 'Chocolate forne√°vel ao leite - recheio',
        '7589': 'Chocolate granulado crocante - decora√ß√£o',
        '416': 'Chocolate forne√°vel confeiteiro - versatilidade',
        '708': 'Leite condensado - base para brigadeiros',
        '1567': 'Recheio sabor chocolate Mo√ßa - praticidade',
        '6604': 'Chocolate em p√≥ 100% cacau - sabor intenso',
        '1396': 'Cereja marrasquino - decora√ß√£o'
    },
    
    'laticinios_distribuidor': {
        '846': 'Mu√ßarela Tirolez - queijo premium',
        '688': 'Leite integral Italac - distribui√ß√£o',
        '2899': 'Requeij√£o Tirolez sem amido - qualidade',
        '882': 'Manteiga sem sal Tirolez - produto nobre',
        '38': 'Cream cheese Dan√∫bio - linha gourmet',
        '967': 'Queijo cottage Tirolez - linha light',
        '126': 'Queijo maasdam - importado',
        '201': 'Parmes√£o 6 meses Scala - matura√ß√£o',
        '583': 'Creme de leite pasteurizado - praticidade',
        '4579': 'Leite semidesnatado - op√ß√£o saud√°vel'
    },
    
    'loja_conveniencia': {
        '7': 'Coca Cola lata - bebida l√≠der',
        '1845': 'Red Bull energ√©tico - produto premium',
        '3': 'Cerveja Skol pilsen - bebida popular',
        '1387': '√Ågua mineral Crystal - hidrata√ß√£o',
        '721': 'F√≥sforo Queluz - conveni√™ncia',
        '4564': 'Bombom Ouro Branco - doce popular',
        '594': 'Bombom Sonho de Valsa - chocolate premium',
        '1083': 'Queijo Polenguinho - lanche pr√°tico',
        '4775': 'Presunto fatiado Seara - praticidade',
        '6781': 'Pa√ßoquinha de amendoim - doce regional'
    },
    
    'acougue': {
        '5167': 'Ac√©m bovino resfriado - corte popular',
        '7142': 'Fraldinha bovina - corte nobre',
        '5136': 'Picanha bovina - corte premium',
        '158': 'Coxas e sobrecoxas de frango - aves',
        '271': 'Bacon em cubos - embutido popular',
        '27': 'Calabresa Aurora - lingui√ßa tradicional',
        '142': 'Apresuntado Aurora - frios',
        '250': 'Mortadela tradicional Bologna - embutido',
        '43': 'Pepperoni fatiado - produto especial',
        '1019': 'Tempero baiano - tempero para carnes'
    },
    
    'rotisserie': {
        '158': 'Coxas e sobrecoxas de frango - produto principal',
        '193': 'Fil√© de peito desfiado temperado - praticidade',
        '1019': 'Tempero baiano - sabor tradicional',
        '595': 'Color√≠fico - cor dourada',
        '925': '√ìleo de soja - fritura',
        '5555': 'P√£o de alho congelado - acompanhamento',
        '8157': 'P√£o de queijo congelado - salgado',
        '270': 'Steak de frango empanado - produto pronto',
        '506': 'Caldo de galinha - sabor intenso',
        '271': 'Bacon - ingrediente especial'
    },
    
    'adega': {
        '1647': 'Vinho argentino Malbec Concha y Toro - tinto premium',
        '1582': 'Vinho chileno Sauvignon Blanc - branco seco',
        '1329': 'Espumante Chandon R√©serve Brut - celebra√ß√£o',
        '1261': 'Whisky Johnnie Walker Red - destilado tradicional',
        '1347': 'Vodka Absolut - premium importado',
        '1253': 'Licor Baileys - creme irland√™s',
        '2931': 'Espumante Chandon Brut Ros√© - ros√© premium',
        '1815': 'Vinho Casillero del Diablo - chileno premium',
        '1256': 'Vinho portugu√™s Periquita - tinto cl√°ssico',
        '1029': 'Azeitona preta - acompanhamento'
    },
    
    'clube_associacao': {
        '3': 'Cerveja Skol pilsen - bebida social',
        '5136': 'Picanha bovina - churrasco social',
        '271': 'Bacon em cubos - petisco',
        '27': 'Calabresa - churrasco tradicional',
        '7': 'Coca Cola lata - bebida popular',
        '1029': 'Azeitona preta - aperitivo',
        '1010': 'Amendoim torrado - petisco cl√°ssico',
        '929': 'Sal grosso - churrasco',
        '1342': 'Briquete - churrasqueira',
        '18': 'Guaran√° Antarctica - refrigerante nacional'
    },
    
    'buffet': {
        '5167': 'Ac√©m bovino - prote√≠na para eventos',
        '158': 'Coxas e sobrecoxas - aves para festa',
        '89': 'Arroz food service - acompanhamento',
        '271': 'Bacon em cubos - canap√©s',
        '846': 'Mu√ßarela - salgados',
        '708': 'Leite condensado - doces',
        '796': 'Chocolate ao leite - sobremesas',
        '7': 'Coca Cola lata - bebida evento',
        '1387': '√Ågua mineral - hidrata√ß√£o',
        '5555': 'P√£o de alho - acompanhamento'
    },
    
    'hamburgeria': {
        '66': 'Hamb√∫rguer bovino sabor picanha - produto principal',
        '271': 'Bacon premium - ingrediente gourmet',
        '846': 'Mu√ßarela artesanal - queijo especial',
        '25': 'Batata palito pr√©-frita - acompanhamento',
        '411': 'Catchup gourmet - molho especial',
        '351': 'Maionese artesanal - cremosidade',
        '417': 'Mostarda especial - sabor diferenciado',
        '7': 'Coca Cola - bebida cl√°ssica',
        '3': 'Cerveja artesanal - bebida premium',
        '8235': 'Cebola caramelizada - ingrediente gourmet'
    },
    
    'geral': {
        '89': 'Arroz food service - produto b√°sico essencial',
        '4385': 'A√ß√∫car cristal - insumo fundamental',
        '925': '√ìleo de soja - gordura vers√°til',
        '5167': 'Ac√©m bovino - prote√≠na acess√≠vel',
        '271': 'Bacon - versatilidade culin√°ria',
        '25': 'Batata congelada - praticidade',
        '688': 'Leite integral - consumo di√°rio',
        '7': 'Coca Cola - bebida universal',
        '438': 'Sal refinado - tempero b√°sico',
        '358': 'Detergente neutro - limpeza essencial'
    }
};
;

        return reasons[activityType]?.[product.code] || 
               reasons['geral'][product.code] || 
               'Produto recomendado para sua opera√ß√£o';
    }

    calculatePriority(product, activityType, menuData) {
        let priority = 5; // Base

        // Sistema de Prioridades por Categoria e Tipo de Estabelecimento

// PIZZARIA
if (product.category === 'Embutidos' && activityType === 'pizzaria') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'pizzaria') priority += 4;
if (product.category === 'Molhos' && activityType === 'pizzaria') priority += 3;
if (product.category === 'Conservas' && activityType === 'pizzaria') priority += 3;
if (product.category === 'Temperos' && activityType === 'pizzaria') priority += 3;
if (product.category === 'Farinhas' && activityType === 'pizzaria') priority += 2;
if (product.category === '√ìleos' && activityType === 'pizzaria') priority += 2;

// RESTAURANTE/CANTINA
if (product.category === 'Carnes' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 4;
if (product.category === 'Gr√£os' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 4;
if (product.category === 'Temperos' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 3;
if (product.category === 'Molhos' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 3;
if (product.category === '√ìleos' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 3;
if (product.category === 'Massas' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 2;
if (product.category === 'Conservas' && (activityType === 'restaurante' || activityType === 'restaurante_cantina')) priority += 2;

// LANCHONETE
if (product.category === 'Embutidos' && activityType === 'lanchonete') priority += 4;
if (product.category === 'Congelados' && activityType === 'lanchonete') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'lanchonete') priority += 3;
if (product.category === 'Molhos' && activityType === 'lanchonete') priority += 3;
if (product.category === 'Carnes' && activityType === 'lanchonete') priority += 3;
if (product.category === '√ìleos' && activityType === 'lanchonete') priority += 2;
if (product.category === 'Bebidas' && activityType === 'lanchonete') priority += 2;

// PADARIA
if (product.category === 'Farinhas' && activityType === 'padaria') priority += 4;
if (product.category === 'Doces' && activityType === 'padaria') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'padaria') priority += 3;
if (product.category === 'A√ß√∫cares' && activityType === 'padaria') priority += 3;
if (product.category === '√ìleos' && activityType === 'padaria') priority += 2;
if (product.category === 'Temperos' && activityType === 'padaria') priority += 2;

// SUPERMERCADO
if (product.category === 'Gr√£os' && activityType === 'supermercado') priority += 3;
if (product.category === 'Latic√≠nios' && activityType === 'supermercado') priority += 3;
if (product.category === 'Carnes' && activityType === 'supermercado') priority += 3;
if (product.category === 'Limpeza' && activityType === 'supermercado') priority += 3;
if (product.category === 'Bebidas' && activityType === 'supermercado') priority += 2;
if (product.category === 'Conservas' && activityType === 'supermercado') priority += 2;

// PESSOA F√çSICA
if (product.category === 'Gr√£os' && activityType === 'pessoa_fisica') priority += 3;
if (product.category === 'Latic√≠nios' && activityType === 'pessoa_fisica') priority += 2;
if (product.category === 'Carnes' && activityType === 'pessoa_fisica') priority += 2;
if (product.category === 'Limpeza' && activityType === 'pessoa_fisica') priority += 2;
if (product.category === 'Bebidas' && activityType === 'pessoa_fisica') priority += 2;

// PASTELARIA
if (product.category === 'Farinhas' && activityType === 'pastelaria') priority += 4;
if (product.category === '√ìleos' && activityType === 'pastelaria') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'pastelaria') priority += 3;
if (product.category === 'Carnes' && activityType === 'pastelaria') priority += 3;
if (product.category === 'Conservas' && activityType === 'pastelaria') priority += 2;
if (product.category === 'Temperos' && activityType === 'pastelaria') priority += 2;

// BAR/CHOPERIA
if (product.category === 'Bebidas' && (activityType === 'bar' || activityType === 'bar_choperia')) priority += 5;
if (product.category === 'Conservas' && (activityType === 'bar' || activityType === 'bar_choperia')) priority += 3;
if (product.category === 'Embutidos' && (activityType === 'bar' || activityType === 'bar_choperia')) priority += 3;
if (product.category === 'Oleaginosas' && (activityType === 'bar' || activityType === 'bar_choperia')) priority += 2;
if (product.category === 'Temperos' && (activityType === 'bar' || activityType === 'bar_choperia')) priority += 1;

// MERCEARIA/SACOL√ÉO
if (product.category === 'Gr√£os' && (activityType === 'mercearia' || activityType === 'mercearia_sacolao')) priority += 4;
if (product.category === 'Conservas' && (activityType === 'mercearia' || activityType === 'mercearia_sacolao')) priority += 3;
if (product.category === 'Temperos' && (activityType === 'mercearia' || activityType === 'mercearia_sacolao')) priority += 3;
if (product.category === '√ìleos' && (activityType === 'mercearia' || activityType === 'mercearia_sacolao')) priority += 2;
if (product.category === 'A√ß√∫cares' && (activityType === 'mercearia' || activityType === 'mercearia_sacolao')) priority += 2;

// HOTEL/MOTEL/POUSADA
if (product.category === 'Latic√≠nios' && (activityType === 'hotel' || activityType === 'hotel_motel_pousada')) priority += 3;
if (product.category === 'Bebidas' && (activityType === 'hotel' || activityType === 'hotel_motel_pousada')) priority += 3;
if (product.category === 'Gr√£os' && (activityType === 'hotel' || activityType === 'hotel_motel_pousada')) priority += 2;
if (product.category === 'Limpeza' && (activityType === 'hotel' || activityType === 'hotel_motel_pousada')) priority += 2;
if (product.category === 'Doces' && (activityType === 'hotel' || activityType === 'hotel_motel_pousada')) priority += 2;

// ESFIHARIA
if (product.category === 'Farinhas' && activityType === 'esfiharia') priority += 4;
if (product.category === 'Carnes' && activityType === 'esfiharia') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'esfiharia') priority += 3;
if (product.category === 'Temperos' && activityType === 'esfiharia') priority += 3;
if (product.category === '√ìleos' && activityType === 'esfiharia') priority += 2;
if (product.category === 'Conservas' && activityType === 'esfiharia') priority += 2;

// COZINHA ORIENTAL
if (product.category === 'Orientais' && (activityType === 'oriental' || activityType === 'cozinha_oriental')) priority += 5;
if (product.category === 'Carnes' && (activityType === 'oriental' || activityType === 'cozinha_oriental')) priority += 3;
if (product.category === 'Massas' && (activityType === 'oriental' || activityType === 'cozinha_oriental')) priority += 3;
if (product.category === 'Temperos' && (activityType === 'oriental' || activityType === 'cozinha_oriental')) priority += 2;
if (product.category === '√ìleos' && (activityType === 'oriental' || activityType === 'cozinha_oriental')) priority += 2;

// COZINHA INDUSTRIAL
if (product.category === 'Carnes' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 4;
if (product.category === 'Gr√£os' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 4;
if (product.category === 'Temperos' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 3;
if (product.category === '√ìleos' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 3;
if (product.category === 'Molhos' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 2;
if (product.category === 'Conservas' && (activityType === 'industrial' || activityType === 'cozinha_industrial')) priority += 2;

// CHURRASCARIA
if (product.category === 'Carnes' && activityType === 'churrascaria') priority += 5;
if (product.category === 'Temperos' && activityType === 'churrascaria') priority += 4;
if (product.category === 'Embutidos' && activityType === 'churrascaria') priority += 3;
if (product.category === 'Bebidas' && activityType === 'churrascaria') priority += 2;
if (product.category === 'Conservas' && activityType === 'churrascaria') priority += 2;

// COLABORADOR
if (product.category === 'Gr√£os' && activityType === 'colaborador') priority += 2;
if (product.category === 'Latic√≠nios' && activityType === 'colaborador') priority += 2;
if (product.category === 'Bebidas' && activityType === 'colaborador') priority += 1;
if (product.category === 'Doces' && activityType === 'colaborador') priority += 1;

// F√ÅBRICA DE MASSAS
if (product.category === 'Massas' && (activityType === 'fabrica_massas' || activityType === 'massas')) priority += 5;
if (product.category === 'Farinhas' && (activityType === 'fabrica_massas' || activityType === 'massas')) priority += 4;
if (product.category === 'Latic√≠nios' && (activityType === 'fabrica_massas' || activityType === 'massas')) priority += 2;
if (product.category === 'Temperos' && (activityType === 'fabrica_massas' || activityType === 'massas')) priority += 1;

// CONFEITARIA
if (product.category === 'Doces' && activityType === 'confeitaria') priority += 5;
if (product.category === 'Farinhas' && activityType === 'confeitaria') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'confeitaria') priority += 3;
if (product.category === 'A√ß√∫cares' && activityType === 'confeitaria') priority += 3;
if (product.category === '√ìleos' && activityType === 'confeitaria') priority += 2;

// LATIC√çNIOS/DISTRIBUIDOR
if (product.category === 'Latic√≠nios' && (activityType === 'laticinios' || activityType === 'laticinios_distribuidor')) priority += 5;
if (product.category === 'Doces' && (activityType === 'laticinios' || activityType === 'laticinios_distribuidor')) priority += 2;
if (product.category === 'Bebidas' && (activityType === 'laticinios' || activityType === 'laticinios_distribuidor')) priority += 1;
if (product.category === 'Conservas' && (activityType === 'laticinios' || activityType === 'laticinios_distribuidor')) priority += 1;

// LOJA DE CONVENI√äNCIA
if (product.category === 'Bebidas' && (activityType === 'conveniencia' || activityType === 'loja_conveniencia')) priority += 4;
if (product.category === 'Doces' && (activityType === 'conveniencia' || activityType === 'loja_conveniencia')) priority += 3;
if (product.category === 'Congelados' && (activityType === 'conveniencia' || activityType === 'loja_conveniencia')) priority += 3;
if (product.category === 'Embutidos' && (activityType === 'conveniencia' || activityType === 'loja_conveniencia')) priority += 2;
if (product.category === 'Limpeza' && (activityType === 'conveniencia' || activityType === 'loja_conveniencia')) priority += 1;

// A√áOUGUE
if (product.category === 'Carnes' && activityType === 'acougue') priority += 5;
if (product.category === 'Embutidos' && activityType === 'acougue') priority += 4;
if (product.category === 'Temperos' && activityType === 'acougue') priority += 3;
if (product.category === 'Latic√≠nios' && activityType === 'acougue') priority += 2;
if (product.category === 'Conservas' && activityType === 'acougue') priority += 1;

// ROTISSERIE
if (product.category === 'Carnes' && activityType === 'rotisserie') priority += 4;
if (product.category === 'Congelados' && activityType === 'rotisserie') priority += 4;
if (product.category === 'Temperos' && activityType === 'rotisserie') priority += 3;
if (product.category === 'Molhos' && activityType === 'rotisserie') priority += 2;
if (product.category === '√ìleos' && activityType === 'rotisserie') priority += 2;

// ADEGA
if (product.category === 'Bebidas' && activityType === 'adega') priority += 5;
if (product.category === 'Conservas' && activityType === 'adega') priority += 3;
if (product.category === 'Embutidos' && activityType === 'adega') priority += 2;
if (product.category === 'Latic√≠nios' && activityType === 'adega') priority += 2;
if (product.category === 'Doces' && activityType === 'adega') priority += 1;

// CLUBE/ASSOCIA√á√ÉO DESPORTIVA
if (product.category === 'Bebidas' && (activityType === 'clube' || activityType === 'clube_associacao')) priority += 4;
if (product.category === 'Carnes' && (activityType === 'clube' || activityType === 'clube_associacao')) priority += 3;
if (product.category === 'Embutidos' && (activityType === 'clube' || activityType === 'clube_associacao')) priority += 3;
if (product.category === 'Congelados' && (activityType === 'clube' || activityType === 'clube_associacao')) priority += 2;
if (product.category === 'Temperos' && (activityType === 'clube' || activityType === 'clube_associacao')) priority += 2;

// BUFFET
if (product.category === 'Carnes' && activityType === 'buffet') priority += 4;
if (product.category === 'Congelados' && activityType === 'buffet') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'buffet') priority += 3;
if (product.category === 'Bebidas' && activityType === 'buffet') priority += 3;
if (product.category === 'Doces' && activityType === 'buffet') priority += 2;
if (product.category === 'Temperos' && activityType === 'buffet') priority += 2;

// HAMBURGERIA
if (product.category === 'Carnes' && activityType === 'hamburgeria') priority += 4;
if (product.category === 'Latic√≠nios' && activityType === 'hamburgeria') priority += 4;
if (product.category === 'Congelados' && activityType === 'hamburgeria') priority += 3;
if (product.category === 'Molhos' && activityType === 'hamburgeria') priority += 3;
if (product.category === 'Embutidos' && activityType === 'hamburgeria') priority += 3;
if (product.category === '√ìleos' && activityType === 'hamburgeria') priority += 2;

// OUTROS (fallback para categorias n√£o espec√≠ficas)
if (product.category === 'Gr√£os' && activityType === 'outros') priority += 2;
if (product.category === 'Latic√≠nios' && activityType === 'outros') priority += 2;
if (product.category === 'Temperos' && activityType === 'outros') priority += 1;
if (product.category === '√ìleos' && activityType === 'outros') priority += 1;

// PRIORIDADES ESPECIAIS PARA PRODUTOS ESPEC√çFICOS
// Food Service (prioridade para grandes volumes)
if (product.name.includes('FOOD SERVICE') && ['restaurante', 'cozinha_industrial', 'buffet', 'hotel'].includes(activityType)) {
    priority += 2;
}

// Produtos Premium/Gourmet
if ((product.name.includes('PREMIUM') || product.name.includes('GOURMET')) && 
    ['hamburgeria', 'churrascaria', 'adega'].includes(activityType)) {
    priority += 1;
}

// Produtos Congelados para estabelecimentos que precisam de praticidade
if (product.category === 'Congelados' && 
    ['lanchonete', 'buffet', 'rotisserie', 'loja_conveniencia'].includes(activityType)) {
    priority += 1;
}

// Bebidas Alco√≥licas para estabelecimentos licenciados
if (product.name.includes('CERVEJA') || product.name.includes('VINHO') || 
    product.name.includes('WHISKY') || product.name.includes('VODKA')) {
    if (['bar_choperia', 'adega', 'clube_associacao', 'churrascaria'].includes(activityType)) {
        priority += 2;
    }
}


        // Prioridade por keywords no menu
        if (menuData.items) {
            const menuText = menuData.items.map(item => item.name.toLowerCase()).join(' ');
            product.keywords.forEach(keyword => {
                if (menuText.includes(keyword)) priority += 1;
            });
        }

        return priority;
    }

    
    showLoading() {
        document.getElementById('loadingSection').style.display = 'block';
        document.getElementById('resultsSection').style.display = 'none';
    }

    hideLoading() {
        document.getElementById('loadingSection').style.display = 'none';
    }

    async updateLoadingStep(stepNumber) {
        const steps = document.querySelectorAll('.step');
        const progressFill = document.getElementById('progressFill');
        
        // Remover active de todos os steps
        steps.forEach(step => step.classList.remove('active'));
        
        // Ativar step atual
        const currentStep = document.getElementById(`step${stepNumber}`);
        if (currentStep) {
            currentStep.classList.add('active');
        }
        
        // Atualizar barra de progresso
        const progress = (stepNumber / 5) * 100;
        progressFill.style.width = progress + '%';
        
        // Aguardar um pouco para o usu√°rio ver o progresso
        await this.sleep(1500);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    showResults() {
        this.hideLoading();
        document.getElementById('resultsSection').style.display = 'grid';

        // Renderizar informa√ß√µes da empresa
        this.renderCompanyInfo();
        
        // Renderizar an√°lise do card√°pio
        this.renderMenuAnalysis();
        
        // Renderizar produtos sugeridos
        this.renderProductSuggestions();
        
        // Renderizar script de vendas
        this.renderSalesScript();
    }

    renderCompanyInfo() {
        const container = document.getElementById('companyDetails');
        const company = this.currentProspect.company;
        
        container.innerHTML = `
            <div class="company-details">
                <h3><i class="fas fa-building"></i> ${company.fantasia || company.nome}</h3>
                <div class="info-grid">
                    <div class="info-item">
                        <strong>CNPJ:</strong> ${company.cnpj}
                    </div>
                    <div class="info-item">
                        <strong>Atividade:</strong> ${company.atividade_principal}
                    </div>
                    <div class="info-item">
                        <strong>Localiza√ß√£o:</strong> ${company.municipio}/${company.uf}
                    </div>
                    <div class="info-item">
                        <strong>Situa√ß√£o:</strong> ${company.situacao}
                    </div>
                    <div class="info-item">
                        <strong>Abertura:</strong> ${company.abertura}
                    </div>
                    <div class="info-item">
                        <strong>Capital Social:</strong> R$ ${company.capital_social}
                    </div>
                </div>
                ${company.telefone ? `<p><i class="fas fa-phone"></i> <strong>Telefone:</strong> ${company.telefone}</p>` : ''}
                ${company.email ? `<p><i class="fas fa-envelope"></i> <strong>Email:</strong> ${company.email}</p>` : ''}
            </div>
            <div class="location-analysis">
                <h4><i class="fas fa-map-marker-alt"></i> An√°lise de Localiza√ß√£o</h4>
                <p><strong>Regi√£o:</strong> ${this.currentProspect.location.regiao}</p>
                <p><strong>Perfil Econ√¥mico:</strong> ${this.currentProspect.location.perfil_economico}</p>
                <p><strong>Alcance Estimado:</strong> ${this.currentProspect.location.populacao_estimada.toLocaleString()}</p>
                <div class="concurrence-info">
                    <strong>Concorr√™ncia:</strong> ${this.currentProspect.location.concorrencia.nivel}
                    <br><small>${this.currentProspect.location.concorrencia.observacao}</small>
                </div>
            </div>
        `;
        if (window.socialAnalyzer) {
        window.socialAnalyzer.setupSocialAnalysisUI();
    }
    }

    renderMenuAnalysis() {
    const container = document.getElementById('menuAnalysis');
    const menu = this.currentProspect.menu;
    
    if (menu.items.length === 0) {
        container.innerHTML = '<p><i class="fas fa-info-circle"></i> Nenhum card√°pio fornecido para an√°lise</p>';
        return;
    }

    // Converter an√°lise de texto para HTML com quebras adequadas
    const analysisHtml = this.convertAnalysisToHtml(menu.analysis);

    container.innerHTML = `
        <div class="menu-stats">
            <div class="stat-card">
                <span class="stat-number">${menu.items.length}</span>
                <span class="stat-label">Itens no Card√°pio</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">${Object.keys(menu.categories).length}</span>
                <span class="stat-label">Categorias</span>
            </div>
        </div>
        <div class="menu-categories">
            ${Object.entries(menu.categories).map(([category, items]) => `
                <div class="category-item">
                    <strong>${category}:</strong> ${items.length} itens
                </div>
            `).join('')}
        </div>
        <div class="menu-analysis-text">
            <h4><i class="fas fa-chart-pie"></i> An√°lise Detalhada:</h4>
            <div class="analysis-content">
                ${analysisHtml}
            </div>
        </div>
    `;
}

// Novo m√©todo para converter an√°lise em HTML formatado
convertAnalysisToHtml(analysisText) {
    if (!analysisText) return '<p>An√°lise n√£o dispon√≠vel</p>';
    
    // Dividir o texto em linhas e processar
    const lines = analysisText.split('\n');
    let html = '';
    
    lines.forEach(line => {
        line = line.trim();
        
        if (!line) {
            // Linha vazia - adicionar espa√ßamento
            html += '<br>';
        } else if (line.startsWith('üìä **') && line.endsWith('**')) {
            // T√≠tulo principal
            const title = line.replace(/üìä \*\*(.*)\*\*/, '$1');
            html += `<h4 class="analysis-title">üìä ${title}</h4>`;
        } else if (line.startsWith('‚úÖ **') || line.startsWith('üìÇ **') || line.startsWith('üí∞ **')) {
            // Estat√≠sticas principais
            const text = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            html += `<p class="analysis-stat">${text}</p>`;
        } else if (line.startsWith('üè∑Ô∏è **') && line.endsWith('**')) {
            // Se√ß√£o de categorias
            const title = line.replace(/üè∑Ô∏è \*\*(.*)\*\*/, '$1');
            html += `<h5 class="analysis-section">üè∑Ô∏è ${title}</h5>`;
        } else if (line.startsWith('üéØ **') && line.endsWith('**')) {
            // Se√ß√£o de oportunidades
            const title = line.replace(/üéØ \*\*(.*)\*\*/, '$1');
            html += `<h5 class="analysis-section opportunities">üéØ ${title}</h5>`;
        } else if (line.startsWith('üìã **') && line.endsWith('**')) {
            // Se√ß√£o de itens
            const title = line.replace(/üìã \*\*(.*)\*\*/, '$1');
            html += `<h5 class="analysis-section">üìã ${title}</h5>`;
        } else if (line.startsWith('‚Ä¢ ')) {
            // Itens de lista
            const item = line.substring(2);
            html += `<div class="analysis-item">‚Ä¢ ${item}</div>`;
        } else if (line.startsWith('üçï **') || line.startsWith('üçî **') || 
                  line.startsWith('üçΩÔ∏è **') || line.startsWith('ü•§ **') || 
                  line.startsWith('üç∞ **')) {
            // Oportunidades espec√≠ficas
            const text = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            html += `<div class="opportunity-item">${text}</div>`;
        } else {
            // Texto normal
            html += `<p class="analysis-text">${line}</p>`;
        }
    });
    
    return html;
}


    renderProductSuggestions() {
        const container = document.getElementById('productSuggestions');
        const suggestions = this.currentProspect.suggestions;
        
        container.innerHTML = `
            <p class="suggestions-intro">
                <i class="fas fa-lightbulb"></i> 
                Com base na an√°lise da empresa e card√°pio, recomendamos os seguintes produtos:
            </p>
            <div class="product-grid">
                ${suggestions.map((product, index) => `
                    <div class="product-card" data-code="${product.code}">
                        <div class="selection-indicator">
                            <i class="fas fa-check"></i>
                        </div>
                        <img src="${product.image}" alt="${product.name}" onerror="this.src='${this.getProductImage(product.code)}'">
                        <h4>${product.name}</h4>
                        <div class="price">R$ ${product.price.toFixed(2)}</div>
                        <div class="unit">Por ${product.unit}</div>
                        <div class="reason">
                            <small><i class="fas fa-info-circle"></i> ${product.reason}</small>
                        </div>
                    </div>
                `).join('')}
            </div>
            <div class="selection-info">
                <p><i class="fas fa-mouse-pointer"></i> Clique nos produtos para selecionar/desselecionar</p>
                <p><strong id="selectedCount">0</strong> produtos selecionados</p>
            </div>
        `;

        // Adicionar eventos de sele√ß√£o
        this.setupProductSelection();
    }

    setupProductSelection() {
        const productCards = document.querySelectorAll('.product-card');
        
        productCards.forEach(card => {
            card.addEventListener('click', () => {
                const code = card.dataset.code;
                
                if (card.classList.contains('selected')) {
                    // Desselecionar
                    card.classList.remove('selected');
                    this.selectedProducts = this.selectedProducts.filter(p => p.code !== code);
                } else {
                    // Selecionar
                    card.classList.add('selected');
                    const product = this.currentProspect.suggestions.find(p => p.code === code);
                    if (product) {
                        this.selectedProducts.push(product);
                    }
                }

                // Atualizar contador
                document.getElementById('selectedCount').textContent = this.selectedProducts.length;
            });
        });
    }

    renderSalesScript() {
        const container = document.getElementById('salesScript');
        const company = this.currentProspect.company;
        const location = this.currentProspect.location;
        const menu = this.currentProspect.menu;
        
        const script = this.generateSalesScript(company, location, menu);
        
        container.innerHTML = `
            <div class="script-content">
                <div class="script-header">
                    <i class="fas fa-phone"></i>
                    <strong>Script de Abordagem Personalizado</strong>
                </div>
                <div class="script-text">
                    ${script}
                </div>
            </div>
        `;
    }

    generateSalesScript(company, location, menu) {
        const nomeEmpresa = company.fantasia || company.nome;
        const cidade = company.municipio;
        const atividade = this.detectActivityType(company, menu);
        
        let script = `
            <div class="script-section">
                <h4>üéØ ABERTURA PERSONALIZADA</h4>
                <p>Ol√°! Falo com o respons√°vel pelas compras do(a) <strong>${nomeEmpresa}</strong>?</p>
                <p>Meu nome √© [SEU NOME], sou consultor comercial da <strong>PMG Atacadista</strong>, uma empresa com 30 anos no mercado de distribui√ß√£o de alimentos e bebidas.</p>
            </div>

            <div class="script-section">
                <h4>üè¢ CONTEXTUALIZA√á√ÉO</h4>
                <p>Estive analisando o perfil da sua empresa aqui em <strong>${cidade}</strong> e vi que voc√™s trabalham com <strong>${company.atividade_principal.toLowerCase()}</strong>.</p>
                ${location.perfil_economico.includes('Alto') ? 
                    '<p>A regi√£o tem um excelente potencial de consumo, o que √© uma grande oportunidade para crescimento!</p>' : 
                    '<p>Sabemos que a regi√£o tem suas particularidades, e por isso oferecemos condi√ß√µes especiais para parceiros locais.</p>'
                }
            </div>

            <div class="script-section">
                <h4>üéØ PROPOSTA DE VALOR</h4>
                <p>Com nossos 30 anos de experi√™ncia, atendemos mais de 20.000 clientes e oferecemos:</p>
                <ul>
                    <li>‚úÖ <strong>Pre√ßos competitivos</strong> - Mas nosso objetivo √© agregar valor ao seu neg√≥cio</li>
                    <li>‚úÖ <strong>Entrega programada</strong> - Somos a maior distribuidora de bebidas e alimento de SP</li>
                    <li>‚úÖ <strong>Qualidade garantida</strong> - Produtos das melhores marcas do mercado</li>
                    <li>‚úÖ <strong>Condi√ß√µes especiais</strong> - Prazo e formas de pagamento flex√≠veis</li>
                </ul>
            </div>
        `;

        // Adicionar se√ß√£o espec√≠fica baseada no tipo de atividade
if (atividade === 'pizzaria') {
    script += `
        <div class="script-section">
            <h4>üçï ESPECIALIZADO PARA PIZZARIAS</h4>
            <p>Trabalhamos com produtos espec√≠ficos para pizzarias:</p>
            <ul>
                <li>ü•© Calabresa Aurora, Pepperoni e outras prote√≠nas de primeira qualidade</li>
                <li>üßÄ Mu√ßarela Tirolez, Catupiry e queijos especiais para pizza</li>
                <li>üçÖ Molho de Tomate Pizza Cep√™ra e Extrato sem acidez</li>
                <li>ü´í Azeitonas Colosso e Arco Bello importadas e nacionais</li>
                <li>ü•ì Bacon em cubos Aurora e muito mais</li>
            </ul>
        </div>
    `;
} else if (atividade === 'restaurante' || atividade === 'restaurante_cantina') {
    script += `
        <div class="script-section">
            <h4>üçΩÔ∏è ESPECIALIZADO PARA RESTAURANTES</h4>
            <p>Oferecemos produtos premium para restaurantes:</p>
            <ul>
                <li>ü•© Carnes bovinas resfriadas Plena, Jordan√©sia e BOI Brasil</li>
                <li>üçó Frangos Adoro, Copacol e aves selecionados</li>
                <li>üçö Arroz Food Service Camil tipo 1 para pratos executivos</li>
                <li>ü•ò Temperos Penina, Saz√≥n Ajinomoto e condimentos especiais</li>
                <li>üêü Peixes Palemon e frutos do mar Oceani</li>
            </ul>
        </div>
    `;
} else if (atividade === 'lanchonete') {
    script += `
        <div class="script-section">
            <h4>üçî ESPECIALIZADO PARA LANCHONETES</h4>
            <p>Temos uma linha completa para lanchonetes:</p>
            <ul>
                <li>üçü Batatas pr√©-fritas congeladas McCain, Simplot e Lambweston</li>
                <li>ü•ì Bacon Aurora fatiado e em cubos</li>
                <li>üçñ Hamb√∫rgueres Maturatta Friboi e Mister Beef</li>
                <li>üßà Maioneses Hellmann's, Catchup Heinz e molhos especiais</li>
                <li>ü•§ Coca Cola, Guaran√° Antarctica e bebidas para revenda</li>
            </ul>
        </div>
    `;
} else if (atividade === 'padaria') {
    script += `
        <div class="script-section">
            <h4>ü•ñ ESPECIALIZADO PARA PADARIAS</h4>
            <p>Linha completa para panifica√ß√£o e confeitaria:</p>
            <ul>
                <li>üåæ Farinhas Dona Benta, Anaconda e Rosa Branca tipo 1</li>
                <li>üßÅ Fermento Fleischmann, a√ß√∫car Uni√£o e insumos</li>
                <li>üç´ Chocolate Forne√°vel Harald, Melken e coberturas</li>
                <li>ü•õ Leite Condensado Mo√ßa, Creme de Leite e latic√≠nios</li>
                <li>üßà Margarinas Primor, √≥leos e gorduras para massas</li>
            </ul>
        </div>
    `;
} else if (atividade === 'supermercado') {
    script += `
        <div class="script-section">
            <h4>üõí ESPECIALIZADO PARA SUPERMERCADOS</h4>
            <p>Produtos Food Service em grandes volumes:</p>
            <ul>
                <li>üì¶ Arroz, Feij√£o e gr√£os Camil Food Service</li>
                <li>üßΩ Linha completa de limpeza Yp√™</li>
                <li>ü•õ Latic√≠nios Italac, Tirolez para revenda</li>
                <li>ü•© Carnes resfriadas em grandes volumes</li>
                <li>üç∫ Bebidas Coca Cola, cervejas para distribui√ß√£o</li>
            </ul>
        </div>
    `;
} else if (atividade === 'pessoa_fisica') {
    script += `
        <div class="script-section">
            <h4>üë§ PARA PESSOA F√çSICA</h4>
            <p>Produtos em embalagens familiares:</p>
            <ul>
                <li>üè† Produtos b√°sicos para uso dom√©stico</li>
                <li>üçö Arroz, feij√£o e gr√£os em embalagens de 1kg</li>
                <li>ü•õ Leites, queijos e latic√≠nios para fam√≠lia</li>
                <li>üßπ Produtos de limpeza para casa</li>
                <li>üçñ Carnes fracionadas e embalagens pequenas</li>
            </ul>
        </div>
    `;
} else if (atividade === 'pastelaria') {
    script += `
        <div class="script-section">
            <h4>ü•ü ESPECIALIZADO PARA PASTELARIAS</h4>
            <p>Produtos espec√≠ficos para frituras e salgados:</p>
            <ul>
                <li>üåæ Farinha para Pastel Anaconda e massas prontas</li>
                <li>üõ¢Ô∏è √ìleo Soya, Liza para fritura de qualidade</li>
                <li>üßÄ Mu√ßarela Tirolez e queijos para recheio</li>
                <li>ü•© Presunto Aurora, carne mo√≠da e recheios</li>
                <li>ü´í Palmito Du Campo picado e conservas</li>
            </ul>
        </div>
    `;
} else if (atividade === 'bar' || atividade === 'bar_choperia') {
    script += `
        <div class="script-section">
            <h4>üç∫ ESPECIALIZADO PARA BARES E CHOPERIAS</h4>
            <p>Bebidas e petiscos para estabelecimentos:</p>
            <ul>
                <li>üç∫ Cervejas Skol, Brahma, Heineken e artesanais</li>
                <li>ü•É Whisky Johnnie Walker, Vodka Smirnoff e destilados</li>
                <li>üç∑ Vinhos nacionais e importados</li>
                <li>ü•ú Amendoim Brasilseco, azeitonas e petiscos</li>
                <li>ü•ì Lingui√ßas, bacon e tira-gostos</li>
            </ul>
        </div>
    `;
} else if (atividade === 'mercearia' || atividade === 'mercearia_sacolao') {
    script += `
        <div class="script-section">
            <h4>ü•¨ ESPECIALIZADO PARA MERCEARIAS E SACOL√ïES</h4>
            <p>Produtos b√°sicos e conservas:</p>
            <ul>
                <li>üçö Gr√£os Camil, arroz e feij√£o tipo 1</li>
                <li>ü•´ Conservas Quero, Bonare e enlatados</li>
                <li>üßÇ Temperos Penina, sal Lebre e condimentos</li>
                <li>ü´í Azeitonas, palmito e conservas diversas</li>
                <li>üõ¢Ô∏è √ìleos, azeites e produtos b√°sicos</li>
            </ul>
        </div>
    `;
} else if (atividade === 'hotel' || atividade === 'hotel_motel_pousada') {
    script += `
        <div class="script-section">
            <h4>üè® ESPECIALIZADO PARA HOTELARIA</h4>
            <p>Produtos para caf√© da manh√£ e room service:</p>
            <ul>
                <li>‚òï Caf√© Pil√£o, leite Italac para caf√© da manh√£</li>
                <li>ü•õ Leite condensado, a√ß√∫car e ado√ßantes</li>
                <li>üßà Margarinas, geleias e acompanhamentos</li>
                <li>üßΩ Produtos de limpeza e higiene para quartos</li>
                <li>üíß √Ågua Crystal e bebidas para frigobar</li>
            </ul>
        </div>
    `;
} else if (atividade === 'esfiharia') {
    script += `
        <div class="script-section">
            <h4>ü•ô ESPECIALIZADO PARA ESFIHARIAS</h4>
            <p>Produtos para culin√°ria √°rabe:</p>
            <ul>
                <li>üåæ Farinha de Trigo Dona Benta para massas √°rabes</li>
                <li>ü•© Carne mo√≠da, queijos para recheios</li>
                <li>üßà Fermento, azeite e ingredientes para massas</li>
                <li>üßÑ Temperos √°rabes, alho e cebola</li>
                <li>ü´í Azeitonas e conservas especiais</li>
            </ul>
        </div>
    `;
} else if (atividade === 'cozinha_oriental') {
    script += `
        <div class="script-section">
            <h4>üçú ESPECIALIZADO PARA COZINHA ORIENTAL</h4>
            <p>Produtos asi√°ticos aut√™nticos:</p>
            <ul>
                <li>ü•¢ Shoyu Cep√™ra, Tar√™ Mitsuwa e molhos orientais</li>
                <li>üç∂ Saqu√™ Azuma Kirin e bebidas japonesas</li>
                <li>üåø Wasabi Taichi, gengibre e temperos asi√°ticos</li>
                <li>üçú Macarr√£o Yakissoba, algas Nori</li>
                <li>ü¶Ä Kani Oceani e ingredientes para sushi</li>
            </ul>
        </div>
    `;
} else if (atividade === 'cozinha_industrial') {
    script += `
        <div class="script-section">
            <h4>üè≠ ESPECIALIZADO PARA COZINHA INDUSTRIAL</h4>
            <p>Produtos Food Service em grandes volumes:</p>
            <ul>
                <li>üì¶ Temperos Ajinomoto Food Service 5kg e 10kg</li>
                <li>ü•© Carnes em grandes volumes para produ√ß√£o</li>
                <li>üçö Gr√£os Camil Food Service para alimenta√ß√£o coletiva</li>
                <li>üõ¢Ô∏è √ìleos em gal√µes e gorduras industriais</li>
                <li>üßÇ Caldos concentrados e bases culin√°rias</li>
            </ul>
        </div>
    `;
} else if (atividade === 'churrascaria') {
    script += `
        <div class="script-section">
            <h4>ü•© ESPECIALIZADO PARA CHURRASCARIAS</h4>
            <p>Cortes nobres e produtos para churrasco:</p>
            <ul>
                <li>ü•© Picanha Jordan√©sia, Alcatra e Fraldinha BOI Brasil</li>
                <li>üî• Sal Grosso Master, temperos para churrasco</li>
                <li>üå∂Ô∏è Chimichurri Brasilseco e molhos especiais</li>
                <li>ü•ì Lingui√ßa Toscana Aurora e embutidos</li>
                <li>‚ö´ Briquete e carv√£o para churrasqueiras</li>
            </ul>
        </div>
    `;
} else if (atividade === 'colaborador') {
    script += `
        <div class="script-section">
            <h4>üë• PARA COLABORADORES</h4>
            <p>Benef√≠cios e produtos para funcion√°rios:</p>
            <ul>
                <li>üõí Cestas b√°sicas com produtos Camil</li>
                <li>üçö Arroz, feij√£o e itens essenciais</li>
                <li>‚òï Caf√©, a√ß√∫car e produtos b√°sicos</li>
                <li>ü•õ Leite e produtos para alimenta√ß√£o</li>
                <li>üéÅ Benef√≠cios alimenta√ß√£o para equipes</li>
            </ul>
        </div>
    `;
} else if (atividade === 'fabrica_massas') {
    script += `
        <div class="script-section">
            <h4>üçù ESPECIALIZADO PARA F√ÅBRICAS DE MASSAS</h4>
            <p>Mat√©rias-primas para produ√ß√£o de massas:</p>
            <ul>
                <li>üåæ Farinha Grano Duro Petybon para massas</li>
                <li>ü•ö Ovos Fleischeggs pasteurizados para produ√ß√£o</li>
                <li>üçù Massas Famigliare frescas e ingredientes</li>
                <li>üßÇ Temperos e aditivos para massas</li>
                <li>üì¶ Embalagens e insumos para produ√ß√£o</li>
            </ul>
        </div>
    `;
} else if (atividade === 'confeitaria') {
    script += `
        <div class="script-section">
            <h4>üßÅ ESPECIALIZADO PARA CONFEITARIAS</h4>
            <p>Ingredientes premium para doces finos:</p>
            <ul>
                <li>üç´ Chocolate Harald Confeiteiro, Melken para temperar</li>
                <li>üç∞ A√ß√∫car Confeiteiro, Glucose e ado√ßantes</li>
                <li>üé® Corantes, ess√™ncias e aromas</li>
                <li>‚ú® Granulado Harald, confeitos e decora√ß√£o</li>
                <li>ü•õ Cremes, recheios Mo√ßa e coberturas</li>
            </ul>
        </div>
    `;
} else if (atividade === 'laticinios' || atividade === 'laticinios_distribuidor') {
    script += `
        <div class="script-section">
            <h4>ü•õ ESPECIALIZADO PARA LATIC√çNIOS</h4>
            <p>Produtos l√°cteos para distribui√ß√£o:</p>
            <ul>
                <li>üßÄ Queijos Tirolez, Scala e linha premium</li>
                <li>ü•õ Leites Italac, Piracanjuba para revenda</li>
                <li>üßà Requeij√£o Catupiry, Cream Cheese Philadelphia</li>
                <li>üßà Manteigas Tirolez e margarinas especiais</li>
                <li>üì¶ Produtos em atacado para distribui√ß√£o</li>
            </ul>
        </div>
    `;
} else if (atividade === 'loja_conveniencia') {
    script += `
        <div class="script-section">
            <h4>üè™ ESPECIALIZADO PARA LOJAS DE CONVENI√äNCIA</h4>
            <p>Produtos de alta rota√ß√£o e praticidade:</p>
            <ul>
                <li>ü•§ Coca Cola, Guaran√° Antarctica em latas</li>
                <li>‚ö° Red Bull, Monster Energy e energ√©ticos</li>
                <li>üç´ Bombons Lacta, doces e snacks</li>
                <li>üßÄ Polenguinho, queijos em espeto</li>
                <li>üßä Produtos para frigobar e conveni√™ncia</li>
            </ul>
        </div>
    `;
} else if (atividade === 'acougue') {
    script += `
        <div class="script-section">
            <h4>ü•© ESPECIALIZADO PARA A√áOUGUES</h4>
            <p>Carnes frescas e embutidos:</p>
            <ul>
                <li>ü•© Carnes bovinas Plena, Jordan√©sia resfriadas</li>
                <li>üçó Frangos Adoro, Copacol e aves</li>
                <li>üê∑ Su√≠nos Pamplona e cortes especiais</li>
                <li>ü•ì Embutidos Aurora, lingui√ßas e bacon</li>
                <li>üßÇ Temperos para carnes e condimentos</li>
            </ul>
        </div>
    `;
} else if (atividade === 'rotisserie') {
    script += `
        <div class="script-section">
            <h4>üçó ESPECIALIZADO PARA ROTISSERIES</h4>
            <p>Produtos semi-prontos e assados:</p>
            <ul>
                <li>üçó Frangos Adoro temperados para assar</li>
                <li>üßÇ Temperos Penina, Baiano para assados</li>
                <li>ü•ñ P√£o de Alho congelado Brasa Burguers</li>
                <li>‚ùÑÔ∏è Congelados McCain, salgados prontos</li>
                <li>üå∂Ô∏è Molhos e temperos para grelhados</li>
            </ul>
        </div>
    `;
} else if (atividade === 'adega') {
    script += `
        <div class="script-section">
            <h4>üç∑ ESPECIALIZADO PARA ADEGAS</h4>
            <p>Vinhos e bebidas finas:</p>
            <ul>
                <li>üç∑ Vinhos Concha Y Toro, Santa Helena importados</li>
                <li>ü•Ç Espumantes Chandon e bebidas premium</li>
                <li>ü•É Whisky Johnnie Walker, Jack Daniel's</li>
                <li>üçæ Vodka Absolut, Gin Tanqueray</li>
                <li>ü´í Petiscos gourmet, azeitonas especiais</li>
            </ul>
        </div>
    `;
} else if (atividade === 'clube' || atividade === 'clube_associacao') {
    script += `
        <div class="script-section">
            <h4>‚öΩ ESPECIALIZADO PARA CLUBES E ASSOCIA√á√ïES</h4>
            <p>Produtos para eventos sociais e esportivos:</p>
            <ul>
                <li>üç∫ Cervejas Skol, Brahma para eventos</li>
                <li>ü•© Carnes para churrascos e confraterniza√ß√µes</li>
                <li>ü•§ Refrigerantes Coca Cola em grandes volumes</li>
                <li>ü•ì Lingui√ßas, petiscos e aperitivos</li>
                <li>üéâ Produtos para festas e recrea√ß√£o</li>
            </ul>
        </div>
    `;
} else if (atividade === 'buffet') {
    script += `
        <div class="script-section">
            <h4>üéâ ESPECIALIZADO PARA BUFFETS</h4>
            <p>Produtos para eventos e festas:</p>
            <ul>
                <li>ü•© Carnes BOI Brasil para grandes volumes</li>
                <li>‚ùÑÔ∏è Congelados McCain, salgadinhos e finger foods</li>
                <li>ü•õ Latic√≠nios Tirolez para doces e salgados</li>
                <li>ü•§ Bebidas Coca Cola, sucos para eventos</li>
                <li>üç∞ Ingredientes Nestl√© para doces de festa</li>
            </ul>
        </div>
    `;
} else if (atividade === 'hamburgeria') {
    script += `
        <div class="script-section">
            <h4>üçî ESPECIALIZADO PARA HAMBURGERIAS GOURMET</h4>
            <p>Produtos premium para hamb√∫rgueres artesanais:</p>
            <ul>
                <li>üçñ Hamb√∫rgueres Maturatta Friboi sabor picanha</li>
                <li>ü•ì Bacon Aurora premium e embutidos especiais</li>
                <li>üßÄ Queijos Tirolez, Cheddar e especiais</li>
                <li>üçü Batatas McCain r√∫sticas e onion rings</li>
                <li>üå∂Ô∏è Molhos Billy & Jack, especiais gourmet</li>
            </ul>
        </div>
    `;
} else if (atividade === 'outros') {
    script += `
        <div class="script-section">
            <h4>üì¶ PRODUTOS DIVERSOS</h4>
            <p>Atendemos diversos tipos de estabelecimentos:</p>
            <ul>
                <li>üè™ Produtos b√°sicos para varejo</li>
                <li>üçö Gr√£os, temperos e conservas</li>
                <li>ü•õ Latic√≠nios e bebidas</li>
                <li>ü•© Carnes e prote√≠nas diversas</li>
                <li>üìû Consulte nossa equipe para solu√ß√µes personalizadas</li>
            </ul>
        </div>
    `;
}


        script += `
            <div class="script-section">
                <h4>ü§ù PR√ìXIMOS PASSOS</h4>
                <p>Gostaria de apresentar nossos produtos?</p>
                <p>Posso enviar um cat√°logo personalizado com sugest√µes espec√≠ficas para o seu neg√≥cio.</p>
                <p><strong>Quando seria um bom hor√°rio para conversarmos com mais detalhes?</strong></p>
            </div>

            <div class="script-section contact-info">
                <p><strong>PMG Atacadista - 30 anos de tradi√ß√£o</strong></p>
                <p>üåê Site: www.pmg.com.br</p>
                </div>

            <div class="script-section">
                <h4>üí° DICAS IMPORTANTES</h4>
                <ul>
                    <li>üéØ Demonstre conhecimento sobre o neg√≥cio do cliente</li>
                    <li>üëÇ Escute as necessidades espec√≠ficas</li>
                    <li>üí∞ Enfatize o custo-benef√≠cio da parceria</li>
                    <li>‚è∞ Seja pontual e cumpra os compromissos</li>
                    <li>üìä Prepare uma proposta personalizada ap√≥s a visita</li>
                </ul>
            </div>
        `;

        return script;
    }

    copySalesScript() {
        const scriptElement = document.querySelector('.script-text');
        const text = scriptElement.innerText;
        
        navigator.clipboard.writeText(text).then(() => {
            const btn = document.getElementById('copySalesScript');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-check"></i> Copiado!';
            btn.classList.add('btn-success');
            
            setTimeout(() => {
                btn.innerHTML = originalText;
                btn.classList.remove('btn-success');
            }, 2000);
        }).catch(err => {
            alert('‚ùå Erro ao copiar texto: ' + err.message);
        });
    }

    createOfferArt() {
    if (this.selectedProducts.length === 0) {
        alert('‚ùå Selecione pelo menos um produto para criar a arte da oferta');
        return;
    }

    const company = this.currentProspect.company;
    const nomeEmpresa = company.fantasia || company.nome;

    // Gerar arte da oferta
    const offerHtml = this.generateOfferTemplate(nomeEmpresa, this.selectedProducts);
    
    // Mostrar no modal
    document.getElementById('offerPreview').innerHTML = offerHtml;
    document.getElementById('offerModal').style.display = 'block';
    
    this.offerCount++;
    this.updateStats();
}

generateOfferTemplate(clientName, products) {
    return `
        <div class="offer-template">
            <div class="offer-header">
                <img src="logo.png" alt="Logo da Empresa" class="company-logo" crossorigin="anonymous">
                <h1>üéØ OFERTA EXCLUSIVA</h1>
                <p>Especialmente para <strong>${clientName}</strong> üíº</p>
            </div>

            <div class="offer-products">
                ${products.map(product => `
                    <div class="offer-product">
                        <img src="${product.image}" alt="${product.name}" onerror="this.src='${this.getProductImage(product.code)}'">
                        <h3>${product.name}</h3>
                        <div class="price">üí∞ R$ ${product.price.toFixed(2)}</div>
                        <div class="unit">üì¶ Por ${product.unit}</div>
                    </div>
                `).join('')}
            </div>

            <div class="offer-footer">
                <h2>üèÜ PMG Atacadista - 30 Anos</h2>
                <div class="benefits">
                    <p>‚úÖ Qualidade Garantida</p>
                    <p>üöõ Entrega Programada</p>
                    <p>üí≥ Condi√ß√µes Especiais</p>
                    <p>üìû Melhor Atendimento</p>
                </div>
                <div class="contact">
                    <p>üåê www.pmg.com.br</p>
                    <p><strong>Entre em contato e garante j√°!</strong> üì±</p>
                </div>
            </div>
        </div>
    `;
}


    downloadOffer() {
    try {
        const offerContent = document.querySelector('.offer-template');
        if (!offerContent) {
            alert('‚ùå Conte√∫do da oferta n√£o encontrado');
            return;
        }

        // Incluir estilos inline no HTML para download
        const htmlWithStyles = this.addInlineStylesToImages(offerContent.outerHTML);
        
        const completeHtml = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Oferta PMG Atacadista</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; }
        .offer-template { max-width: 100%; margin: 0 auto; }
        /* Estilos cr√≠ticos para garantir formata√ß√£o */
        .offer-product img {
            width: 100% !important;
            height: 150px !important;
            object-fit: contain !important;
            background: rgba(255,255,255,0.9) !important;
        }
        .company-logo {
            width: 150px !important;
            height: 150px !important;
            object-fit: contain !important;
            background: white !important;
        }
    </style>
</head>
<body>
    ${htmlWithStyles}
</body>
</html>`;

        // Criar e baixar arquivo
        const blob = new Blob([completeHtml], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `oferta_${Date.now()}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log('üì• Download realizado com estilos preservados');
    } catch (error) {
        console.error('‚ùå Erro no download:', error);
        alert('‚ùå Erro ao fazer download da oferta');
    }
}

    async copyOfferText() {
    try {
        if (!this.currentProspect) {
            alert('‚ùå Nenhuma prospec√ß√£o ativa para copiar');
            return;
        }

        const company = this.currentProspect.company;
        const nomeEmpresa = company.fantasia || company.razao_social || 'Empresa';
        const cidade = company.municipio || 'sua cidade';
        
        // Gerar texto formatado da oferta (mesmo conte√∫do do modal)
        const offerText = this.generateOfferText(nomeEmpresa, cidade, company);
        
        await navigator.clipboard.writeText(offerText);
        
        // Feedback visual
        const button = document.getElementById('copyOfferText');
        const originalText = button.innerHTML;
        button.innerHTML = '‚úÖ Texto Copiado!';
        button.style.backgroundColor = '#28a745';
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.style.backgroundColor = '';
        }, 2000);
        
        console.log('‚úÖ Texto da oferta copiado para √°rea de transfer√™ncia');
        
    } catch (error) {
        console.error('‚ùå Erro ao copiar texto da oferta:', error);
        alert('‚ùå Erro ao copiar texto da oferta');
    }
}

generateOfferText(nomeEmpresa, cidade, company) {
    const selectedProductsText = this.selectedProducts.length > 0 
        ? this.selectedProducts.map(product => 
            `‚Ä¢ ${product.name} - R$ ${product.price.toFixed(2)}/${product.unit}`
          ).join('\n')
        : 'Produtos selecionados conforme an√°lise do seu neg√≥cio';

    return `üéØ PROPOSTA COMERCIAL PERSONALIZADA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Empresa: ${nomeEmpresa}
Cidade: ${cidade}
CNPJ: ${company.cnpj || 'N√£o informado'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Ol√°! Falo com o respons√°vel pelas compras do(a) ${nomeEmpresa}?

Meu nome √© [SEU NOME], sou consultor comercial da PMG Atacadista, uma empresa com 30 anos no mercado de distribui√ß√£o de alimentos e bebidas.

Estive analisando o perfil da sua empresa aqui em ${cidade} e vi que voc√™s trabalham com ${company.atividade_principal?.toLowerCase() || 'alimenta√ß√£o'}.

üèÜ PRODUTOS RECOMENDADOS:
${selectedProductsText}

üíº NOSSOS DIFERENCIAIS:
‚úÖ 30 anos de experi√™ncia no mercado
‚úÖ Mais de 20.000 clientes atendidos
‚úÖ Entrega r√°pida e pontual
‚úÖ Condi√ß√µes especiais de pagamento
‚úÖ Suporte t√©cnico especializado

üìû VAMOS CONVERSAR?
Gostaria de apresentar nossos produtos?

Quando seria um bom hor√°rio para conversarmos com mais detalhes?

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üåê PMG Atacadista - 30 anos de tradi√ß√£o
Site: www.pmg.com.br
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;
}

async copyOfferImage() {
    try {
        console.log('üì∏ Iniciando c√≥pia da imagem da oferta...');
        
        // CORRE√á√ÉO CR√çTICA: Verificar se o modal est√° aberto
        const modal = document.getElementById('offerModal');
        if (!modal || modal.style.display !== 'block') {
            this.showCopyFeedback('‚ùå Modal de oferta n√£o est√° aberto', 'error');
            return;
        }
        
        // CORRE√á√ÉO: Usar seletor mais espec√≠fico dentro do modal
        const offerElement = modal.querySelector('.offer-template');
        if (!offerElement) {
            console.error('‚ùå Elemento .offer-template n√£o encontrado no modal');
            this.showCopyFeedback('‚ùå Template da oferta n√£o encontrado', 'error');
            return;
        }
        
        // CORRE√á√ÉO CR√çTICA: Verificar se h√° produtos na oferta
        const products = offerElement.querySelectorAll('.offer-product');
        if (products.length === 0) {
            console.error('‚ùå Nenhum produto encontrado na oferta');
            this.showCopyFeedback('‚ùå Oferta sem produtos para capturar', 'error');
            return;
        }
        
        console.log(`‚úÖ Encontrados ${products.length} produtos para capturar`);
        
        // CORRE√á√ÉO: Aguardar carregamento completo das imagens
        await this.waitForImagesToLoad(offerElement);
        
        // CORRE√á√ÉO: Aplicar estilos de captura melhorados
        const originalStyles = await this.applyEnhancedCaptureStyles(offerElement);
        
        // CORRE√á√ÉO: Aguardar renderiza√ß√£o dos estilos
        await new Promise(resolve => setTimeout(resolve, 300));
        
        const canvas = await html2canvas(offerElement, {
    scale: 2,
    useCORS: true,
    allowTaint: false,
    backgroundColor: '#ffffff',
    width: 1200,
    height: null,
    scrollX: 0,
    scrollY: 0,
    foreignObjectRendering: false,
    removeContainer: false,
    imageTimeout: 30000,
    logging: false,
    // CORRE√á√ÉO ESPEC√çFICA PARA IMAGENS
    ignoreElements: function(element) {
        // Ignorar elementos problem√°ticos, mas manter imagens
        return false;
    },
    onclone: (clonedDoc) => {
        const clonedElement = clonedDoc.querySelector('.offer-template');
        if (clonedElement) {
            // Aplicar classe de captura no clone
        clonedElement.classList.add('capturing');
        
        // CORRE√á√ÉO ESPEC√çFICA: Logo no clone
        const clonedLogo = clonedElement.querySelector('.company-logo');
        if (clonedLogo) {
            // For√ßar estilos espec√≠ficos da logo
            clonedLogo.style.cssText = `
                width: 150px !important;
                height: 150px !important;
                object-fit: cover !important;
                object-position: center !important;
                background-color: white !important;
                display: block !important;
                margin: 0 auto 20px auto !important;
                border-radius: 0 !important;
                border: 4px solid white !important;
                transform: none !important;
                position: relative !important;
                z-index: 2 !important;
                aspect-ratio: 1/1 !important;
                box-sizing: border-box !important;
                max-width: 150px !important;
                max-height: 150px !important;
                min-width: 150px !important;
                min-height: 150px !important;
                flex-shrink: 0 !important;
            `;
            console.log('‚úÖ Logo configurada no clone');
        }
        
        // Imagens de produtos separadamente
        const productImages = clonedElement.querySelectorAll('.offer-product img:not(.company-logo)');
        productImages.forEach(img => {
            img.style.cssText += `
                width: 120px !important;
                height: 120px !important;
                object-fit: contain !important;
            `;
        });
            // Aplicar classe de captura no clone
            clonedElement.classList.add('capturing');
            
            // CORRE√á√ÉO CR√çTICA: For√ßar estilos nas imagens do clone
            const clonedImages = clonedElement.querySelectorAll('img');
            clonedImages.forEach(img => {
                img.style.cssText += `
                    width: 120px !important;
                    height: 120px !important;
                    object-fit: contain !important;
                    object-position: center !important;
                    background-color: #ffffff !important;
                    display: block !important;
                    margin: 0 auto !important;
                `;
                
                // Logo espec√≠fico
                if (img.classList.contains('company-logo') || 
                    img.parentElement.classList.contains('offer-header')) {
                    img.style.cssText += `
                        width: 100px !important;
                        height: 100px !important;
                        border-radius: 0 !important;
                        border: 3px solid white !important;
                    `;
                }
            });
        }
    }
});

        
        // Restaurar estilos originais
        this.restoreOriginalStyles(offerElement, originalStyles);
        
        // CORRE√á√ÉO: Verificar se o canvas foi criado corretamente
        if (!canvas || canvas.width === 0 || canvas.height === 0) {
            throw new Error('Canvas vazio ou inv√°lido gerado');
        }
        
        console.log(`‚úÖ Canvas gerado: ${canvas.width}x${canvas.height}`);
        
        // Converter para blob e copiar
        canvas.toBlob(async (blob) => {
            if (!blob) {
                this.showCopyFeedback('‚ùå Erro ao gerar imagem', 'error');
                return;
            }
            
            try {
                await navigator.clipboard.write([
                    new ClipboardItem({ 'image/png': blob })
                ]);
                
                this.showCopyFeedback('‚úÖ Imagem copiada com sucesso!', 'success');
                console.log('‚úÖ Imagem da oferta copiada para √°rea de transfer√™ncia');
                
            } catch (clipboardError) {
                console.error('‚ùå Erro ao copiar para √°rea de transfer√™ncia:', clipboardError);
                // Fallback: download da imagem
                this.downloadImageFallback(canvas);
            }
        }, 'image/png', 1.0); // CORRE√á√ÉO: qualidade m√°xima
        
    } catch (error) {
        console.error('‚ùå Erro detalhado ao copiar imagem:', error);
        this.showCopyFeedback(`‚ùå Erro: ${error.message}`, 'error');
    }
}

// NOVO M√âTODO: Aguardar carregamento das imagens
async waitForImagesToLoad(element) {
    const images = element.querySelectorAll('img');
    const imagePromises = Array.from(images).map(img => {
        return new Promise((resolve) => {
            if (img.complete && img.naturalWidth > 0) {
                resolve();
            } else {
                img.onload = () => resolve();
                img.onerror = () => resolve(); // Resolve mesmo com erro para n√£o travar
                // Timeout de seguran√ßa
                setTimeout(() => resolve(), 5000);
            }
        });
    });
    
    console.log(`‚è≥ Aguardando ${images.length} imagens carregarem...`);
    await Promise.all(imagePromises);
    console.log('‚úÖ Todas as imagens processadas');
}

async applyEnhancedCaptureStyles(element) {
    const originalStyles = {};
    
    // Adicionar classe de captura
    element.classList.add('capturing');
    
    // Adicionar classe de captura
    element.classList.add('capturing');
    
    // CORRE√á√ÉO ESPEC√çFICA PARA LOGO - tratamento separado
    const logo = element.querySelector('.company-logo');
    if (logo) {
        console.log('üñºÔ∏è Processando logo da empresa...');
        
        // Salvar TODOS os estilos originais
        originalStyles.logo = {
            width: logo.style.width,
            height: logo.style.height,
            objectFit: logo.style.objectFit,
            objectPosition: logo.style.objectPosition,
            backgroundColor: logo.style.backgroundColor,
            display: logo.style.display,
            margin: logo.style.margin,
            borderRadius: logo.style.borderRadius,
            border: logo.style.border,
            transform: logo.style.transform,
            position: logo.style.position,
            zIndex: logo.style.zIndex,
            aspectRatio: logo.style.aspectRatio,
            boxSizing: logo.style.boxSizing,
            crossOrigin: logo.crossOrigin,
            // Salvar computedStyles tamb√©m
            computedWidth: window.getComputedStyle(logo).width,
            computedHeight: window.getComputedStyle(logo).height
        };
        
        // CORRE√á√ÉO CR√çTICA: Aguardar logo carregar ANTES de aplicar estilos
        await this.ensureLogoLoaded(logo);
        
        // APLICAR estilos espec√≠ficos da logo
        logo.crossOrigin = 'anonymous';
        logo.style.width = '150px';
        logo.style.height = '150px';
        logo.style.objectFit = 'cover'; // Cover para logo
        logo.style.objectPosition = 'center';
        logo.style.backgroundColor = 'white';
        logo.style.display = 'block';
        logo.style.margin = '0 auto 20px auto';
        logo.style.borderRadius = '50%';
        logo.style.border = '4px solid white';
        logo.style.transform = 'none';
        logo.style.position = 'relative';
        logo.style.zIndex = '2';
        logo.style.aspectRatio = '1/1';
        logo.style.boxSizing = 'border-box';
        logo.style.maxWidth = '150px';
        logo.style.maxHeight = '150px';
        logo.style.minWidth = '150px';
        logo.style.minHeight = '150px';
        logo.style.flexShrink = '0';
        
        console.log('‚úÖ Logo configurada para captura');
    }
    
    // Tratamento das OUTRAS imagens (produtos)
    const productImages = element.querySelectorAll('.offer-product img:not(.company-logo)');
    originalStyles.productImages = [];
    
    productImages.forEach((img, index) => {
        originalStyles.productImages[index] = {
            width: img.style.width,
            height: img.style.height,
            objectFit: img.style.objectFit
        };
        
        // Configura√ß√µes espec√≠ficas para imagens de produtos
        img.style.width = '120px';
        img.style.height = '120px';
        img.style.objectFit = 'contain'; // Contain para produtos
    });
    // CORRE√á√ÉO CR√çTICA: Aguardar imagens carregarem e aplicar estilos espec√≠ficos
    const images = element.querySelectorAll('img');
    originalStyles.images = [];
    
    for (let i = 0; i < images.length; i++) {
        const img = images[i];
        
        // Salvar estilos originais
        originalStyles.images[i] = {
            width: img.style.width,
            height: img.style.height,
            objectFit: img.style.objectFit,
            objectPosition: img.style.objectPosition,
            backgroundColor: img.style.backgroundColor,
            display: img.style.display,
            margin: img.style.margin,
            borderRadius: img.style.borderRadius,
            border: img.style.border,
            crossOrigin: img.crossOrigin
        };
        
        // CORRE√á√ÉO PRINCIPAL: Aplicar estilos fixos para cada imagem
        img.crossOrigin = 'anonymous'; // Para evitar problemas de CORS
        img.style.width = '120px';
        img.style.height = '120px';
        img.style.objectFit = 'contain';
        img.style.objectPosition = 'center';
        img.style.backgroundColor = '#ffffff';
        img.style.display = 'block';
        img.style.margin = '0 auto';
        img.style.borderRadius = '8px';
        img.style.overflow = 'hidden';
        
        
        // CORRE√á√ÉO CR√çTICA: Aguardar cada imagem carregar
        if (!img.complete || img.naturalWidth === 0) {
            await new Promise((resolve) => {
                const timeout = setTimeout(resolve, 2000); // Timeout de seguran√ßa
                img.onload = () => {
                    clearTimeout(timeout);
                    resolve();
                };
                img.onerror = () => {
                    clearTimeout(timeout);
                    console.warn(`Imagem falhou ao carregar: ${img.src}`);
                    resolve();
                };
            });
        }
    }
    
    // Aplicar outros estilos gerais
    element.style.width = '1200px';
    element.style.maxWidth = '1200px';
    element.style.height = 'auto';
    element.style.transform = 'none';
    element.style.backgroundColor = '#ffffff';
    element.style.visibility = 'visible';
    element.style.opacity = '1';
    
    return originalStyles;
}
// NOVO: M√©todo espec√≠fico para garantir carregamento da logo
async ensureLogoLoaded(logoElement) {
    return new Promise((resolve) => {
        if (logoElement.complete && logoElement.naturalWidth > 0) {
            console.log('‚úÖ Logo j√° carregada');
            resolve();
            return;
        }
        
        console.log('‚è≥ Aguardando carregamento da logo...');
        
        const timeout = setTimeout(() => {
            console.warn('‚ö†Ô∏è Timeout no carregamento da logo, continuando...');
            resolve();
        }, 5000);
        
        logoElement.onload = () => {
            clearTimeout(timeout);
            console.log('‚úÖ Logo carregada com sucesso');
            resolve();
        };
        
        logoElement.onerror = () => {
            clearTimeout(timeout);
            console.error('‚ùå Erro ao carregar logo, continuando...');
            resolve();
        };
        
        // For√ßar recarregamento se necess√°rio
        if (logoElement.src) {
            const currentSrc = logoElement.src;
            logoElement.src = '';
            logoElement.src = currentSrc + '?' + Date.now(); // Cache bust
        }
    });
}

// NOVO M√âTODO: For√ßar visibilidade no clone
forceVisibilityInClone(clonedElement) {
    // Aplicar estilos diretamente via CSS inline
    clonedElement.style.cssText += `
        position: relative !important;
        visibility: visible !important;
        opacity: 1 !important;
        display: block !important;
        width: 1200px !important;
        max-width: 1200px !important;
        background-color: #ffffff !important;
    `;
    
    // For√ßar visibilidade dos produtos
    const products = clonedElement.querySelectorAll('.offer-product');
    products.forEach(product => {
        product.style.cssText += `
            visibility: visible !important;
            opacity: 1 !important;
            display: block !important;
            background-color: rgba(255,255,255,0.95) !important;
        `;
        
        const img = product.querySelector('img');
        if (img) {
            img.style.cssText += `
                visibility: visible !important;
                opacity: 1 !important;
                display: block !important;
                width: 120px !important;
                height: 120px !important;
            `;
        }
    });
    
    // For√ßar visibilidade do grid
    const grid = clonedElement.querySelector('.offer-products');
    if (grid) {
        grid.style.cssText += `
            display: grid !important;
            visibility: visible !important;
            opacity: 1 !important;
        `;
    }
}

restoreOriginalStyles(element, originalStyles) {
    // Remover classe de captura
    element.classList.remove('capturing');
     // CORRE√á√ÉO: Restaurar estilos do logo especificamente
    if (originalStyles.logo) {
        const logo = element.querySelector('.company-logo');
        if (logo) {
            Object.assign(logo.style, originalStyles.logo);
        }
    }
    // CORRE√á√ÉO: Restaurar estilos das imagens especificamente
    if (originalStyles.images) {
        const images = element.querySelectorAll('img');
        images.forEach((img, index) => {
            if (originalStyles.images[index]) {
                const original = originalStyles.images[index];
                img.style.width = original.width || '';
                img.style.height = original.height || '';
                img.style.objectFit = original.objectFit || '';
                img.style.objectPosition = original.objectPosition || '';
                img.style.backgroundColor = original.backgroundColor || '';
                img.style.display = original.display || '';
                img.style.margin = original.margin || '';
                img.style.borderRadius = original.borderRadius || '';
                img.style.border = original.border || '';
                img.crossOrigin = original.crossOrigin || null;
            }
        });
    }
    
    // Restaurar estilos gerais do elemento
    element.style.width = '';
    element.style.maxWidth = '';
    element.style.height = '';
    element.style.transform = '';
    element.style.backgroundColor = '';
    element.style.visibility = '';
    element.style.opacity = '';
}


// M√âTODO MELHORADO: Fallback para download
downloadImageFallback(canvas) {
    try {
        const link = document.createElement('a');
        link.download = `oferta-personalizada-${new Date().getTime()}.png`;
        link.href = canvas.toDataURL('image/png', 1.0);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        this.showCopyFeedback('üì• Imagem baixada como arquivo', 'info');
    } catch (error) {
        console.error('‚ùå Erro no fallback de download:', error);
        this.showCopyFeedback('‚ùå Erro ao baixar imagem', 'error');
    }
}

// M√âTODO MELHORADO: Feedback visual
showCopyFeedback(message, type = 'success') {
    // Remove feedback anterior se existir
    const existing = document.querySelector('.copy-feedback');
    if (existing) existing.remove();
    
    const feedback = document.createElement('div');
    feedback.className = `copy-feedback ${type}`;
    feedback.textContent = message;
    
    const colors = {
        success: '#28a745',
        error: '#dc3545',
        info: '#17a2b8'
    };
    
    feedback.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type]};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        z-index: 10001;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideInRight 0.3s ease-out;
    `;
    
    document.body.appendChild(feedback);
    
    setTimeout(() => {
        feedback.style.animation = 'slideOutRight 0.3s ease-in forwards';
        setTimeout(() => feedback.remove(), 300);
    }, 4000);
}
debugOfferCapture() {
    const modal = document.getElementById('offerModal');
    const offer = modal?.querySelector('.offer-template');
    const products = offer?.querySelectorAll('.offer-product');
    
    console.log('üîç DEBUG - Estado do modal:', {
        modalExists: !!modal,
        modalVisible: modal?.style.display === 'block',
        offerExists: !!offer,
        productsCount: products?.length || 0,
        offerDimensions: offer ? {
            width: offer.offsetWidth,
            height: offer.offsetHeight
        } : null
    });
    
    products?.forEach((product, i) => {
        const img = product.querySelector('img');
        console.log(`Produto ${i}:`, {
            visible: window.getComputedStyle(product).visibility,
            display: window.getComputedStyle(product).display,
            hasImage: !!img,
            imageLoaded: img?.complete && img?.naturalWidth > 0
        });
    });
}

debugOfferModal() {
    const modal = document.getElementById('offerModal');
    console.log('üîç DEBUG COMPLETO DO MODAL:');
    console.log('Modal encontrado:', !!modal);
    
    if (modal) {
        const computedStyle = window.getComputedStyle(modal);
        
        console.log('üìä Estilos computados:', {
            display: computedStyle.display,
            visibility: computedStyle.visibility,
            opacity: computedStyle.opacity,
            position: computedStyle.position,
            zIndex: computedStyle.zIndex
        });
        
        console.log('üìê Dimens√µes:', {
            offsetWidth: modal.offsetWidth,
            offsetHeight: modal.offsetHeight,
            scrollWidth: modal.scrollWidth,
            scrollHeight: modal.scrollHeight,
            clientWidth: modal.clientWidth,
            clientHeight: modal.clientHeight
        });
        
        console.log('üé® Classes:', modal.className);
        console.log('üîß Estilos inline:', modal.style.cssText);
        
        // Verificar elementos filhos
        const modalContent = modal.querySelector('.modal-content');
        const offerTemplate = modal.querySelector('.offer-template');
        const offerPreview = modal.querySelector('.offer-preview');
        
        console.log('üîç Elementos encontrados:');
        console.log('  .modal-content:', !!modalContent, modalContent?.offsetWidth + 'x' + modalContent?.offsetHeight);
        console.log('  .offer-template:', !!offerTemplate, offerTemplate?.offsetWidth + 'x' + offerTemplate?.offsetHeight);
        console.log('  .offer-preview:', !!offerPreview, offerPreview?.offsetWidth + 'x' + offerPreview?.offsetHeight);
        
        // Verificar se √© vis√≠vel
        const isVisible = modal.offsetWidth > 0 && modal.offsetHeight > 0 && 
                         computedStyle.display !== 'none' && 
                         computedStyle.visibility !== 'hidden' && 
                         parseFloat(computedStyle.opacity) > 0;
                         
        console.log('üëÅÔ∏è Modal vis√≠vel:', isVisible);
        
        return {
            modal,
            modalContent,
            offerTemplate,
            offerPreview,
            isVisible,
            computedStyle
        };
    } else {
        console.log('‚ùå Modal n√£o encontrado!');
        return null;
    }
}


// M√©todo fallback caso o navigator.clipboard n√£o funcione
fallbackCopyMethod() {
    try {
        const offerContent = document.querySelector('.offer-template');
        const htmlWithStyles = this.addInlineStylesToImages(offerContent.outerHTML);
        
        // Criar elemento tempor√°rio para sele√ß√£o
        const textArea = document.createElement('textarea');
        textArea.value = htmlWithStyles;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        
        alert('‚úÖ Oferta copiada (m√©todo compatibilidade)!');
    } catch (error) {
        console.error('‚ùå Erro no m√©todo fallback:', error);
        alert('‚ùå Erro ao copiar. Tente novamente.');
    }
}

// Adicionar este m√©todo na classe ProspeccaoManager
addInlineStylesToImages(htmlString) {
    // Criar um elemento tempor√°rio para manipular o HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlString;
    
    // Aplicar estilos inline √†s imagens dos produtos
    const productImages = tempDiv.querySelectorAll('.offer-product img');
    productImages.forEach(img => {
        img.style.cssText = `
            width: 100% !important;
            height: 150px !important;
            object-fit: contain !important;
            border-radius: 12px !important;
            margin-bottom: 15px !important;
            border: 2px solid rgba(255,255,255,0.3) !important;
            background: rgba(255,255,255,0.9) !important;
            box-sizing: border-box !important;
        `;
    });
    
    // Aplicar estilos inline ao logo da empresa
    const companyLogo = tempDiv.querySelector('.company-logo');
    if (companyLogo) {
        companyLogo.style.cssText = `
            width: 150px !important;
            height: 150px !important;
            border-radius: 0 !important;
            margin-bottom: 20px !important;
            border: 4px solid white !important;
            object-fit: contain !important;
            background: white !important;
            box-sizing: border-box !important;
        `;
    }
    
    // Aplicar estilos aos containers dos produtos
    const offerProducts = tempDiv.querySelectorAll('.offer-product');
    offerProducts.forEach(product => {
        product.style.cssText += `
            max-width: 350px !important;
            box-sizing: border-box !important;
        `;
    });
    
    return tempDiv.innerHTML;
}
// Adicionar este m√©todo tamb√©m
cloneWithInlineStyles(element) {
    const clone = element.cloneNode(true);
    
    // Aplicar estilos computados aos elementos principais
    const originalImages = element.querySelectorAll('img');
    const clonedImages = clone.querySelectorAll('img');
    
    originalImages.forEach((originalImg, index) => {
        if (clonedImages[index]) {
            const computedStyle = window.getComputedStyle(originalImg);
            clonedImages[index].style.cssText = `
                width: ${computedStyle.width} !important;
                height: ${computedStyle.height} !important;
                object-fit: ${computedStyle.objectFit} !important;
                border-radius: ${computedStyle.borderRadius} !important;
                margin-bottom: ${computedStyle.marginBottom} !important;
                border: ${computedStyle.border} !important;
                background: ${computedStyle.background} !important;
            `;
        }
    });
    
    return clone;
}

copyImageToClipboard() {
    if (this.offerImageUrl) {
        fetch(this.offerImageUrl)
            .then(res => res.blob())
            .then(blob => {
                const item = new ClipboardItem({ 'image/png': blob });
                navigator.clipboard.write([item]).then(() => {
                    alert('‚úÖ Imagem copiada para a √°rea de transfer√™ncia!');
                    // Revoga a URL ap√≥s a c√≥pia bem-sucedida
                    URL.revokeObjectURL(this.offerImageUrl);
                    this.offerImageUrl = null;
                    this.isOfferImageGenerated = false;
                }).catch(err => {
                    console.error('‚ùå Erro ao copiar imagem:', err);
                    alert('‚ùå Erro ao copiar imagem: ' + err.message + '. Tente gerar a oferta novamente.');
                });
            }).catch(err => {
                console.error('‚ùå Erro ao buscar blob:', err);
                alert('‚ùå Falha ao acessar a imagem. Verifique o console para mais detalhes.');
            });
    } else {
        alert('‚ùå Imagem n√£o dispon√≠vel. Gere a oferta primeiro.');
    }
}

    

    updateStats() {
        
        
        // Salvar no localStorage
        localStorage.setItem('prospeccaoStats', JSON.stringify({
            prospectCount: this.prospectCount,
            offerCount: this.offerCount
        }));
    }

    loadStats() {
        try {
            const stats = JSON.parse(localStorage.getItem('prospeccaoStats') || '{}');
            this.prospectCount = stats.prospectCount || 0;
            this.offerCount = stats.offerCount || 0;
            this.updateStats();
        } catch (error) {
            console.error('‚ùå Erro ao carregar estat√≠sticas:', error);
        }
    }
}

/// Inicializa√ß√£o coordenada do sistema
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('üöÄ Inicializando sistema completo...');
        
        // Se existe CatalogManager, inicializar primeiro
        if (window.CatalogManager) {
            window.catalogManager = new CatalogManager();
            await window.catalogManager.init();
            console.log('‚úÖ CatalogManager inicializado');
        }
        
        // Depois inicializar ProspeccaoManager
        window.prospeccaoManager = new ProspeccaoManager();
        console.log('‚úÖ Sistema inicializado com sucesso');
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        // Mesmo com erro, tentar inicializar ProspeccaoManager
        try {
            window.prospeccaoManager = new ProspeccaoManager();
        } catch (fallbackError) {
            console.error('‚ùå Erro cr√≠tico na inicializa√ß√£o:', fallbackError);
        }
    }
});


