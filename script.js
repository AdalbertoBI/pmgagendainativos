let currentTab = 'inativos';
let mapLoaded = false;
let mapDataLoaded = false;

// Inicializa√ß√£o da aplica√ß√£o
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Inicializando aplica√ß√£o...');
    
    try {
        if (!window.dbManager) {
            console.error('‚ùå dbManager n√£o est√° definido. Verifique a inicializa√ß√£o.');
            return;
        }
        
        await window.dbManager.init();
        await window.clientManager.init();
        
        // Carregar dados dos clientes do dbManager
        const savedClients = await window.dbManager.loadData('clients') || [];
        const savedAtivos = await window.dbManager.loadData('ativos') || [];
        
        if (savedClients.length > 0 || savedAtivos.length > 0) {
            window.clientManager.data = savedClients;
            window.clientManager.ativos = savedAtivos;
            window.data = savedClients;
            window.ativos = savedAtivos;
        }
        
        // Configurar eventos
        setupEventListeners();
        
        // Configurar PWA
        setupPWA();
        
        // Configurar upload inicial
        setupUploadHandler();
        
        // Aplicar filtros salvos
        applySavedFilters();
        
        // Renderizar interface
        populateCidades();
        renderAtivos();
        renderAgenda();
        
        console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
    }
});

// Manipular upload de arquivo
async function handleFileUpload(event) {
    try {
        const file = event.target.files[0];
        if (!file) return;
        
        // Valida√ß√£o de formato
        const validFormats = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
        if (!validFormats.includes(file.type)) {
            alert('‚ùå Formato de arquivo inv√°lido! Use apenas arquivos .xls ou .xlsx.');
            return;
        }

        if (file.size > 10 * 1024 * 1024) {
            alert('Arquivo muito grande! O limite √© 10MB.');
            return;
        }
        
        console.log('üìÅ Processando arquivo:', file.name);
        
        // Criar backup antes de limpar dados
        await window.clientManager.createBackup('clients', window.clientManager.data);
        await window.clientManager.createBackup('ativos', window.clientManager.ativos);
        
        // Limpar dados existentes
        await window.dbManager.clearData('clients');
        await window.dbManager.clearData('ativos');
        
        window.clientManager.data = [];
        window.clientManager.ativos = [];
        window.data = [];
        window.ativos = [];
        mapDataLoaded = false;
        
        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const bytes = e.target.result;
                const workbook = XLSX.read(bytes, { type: 'binary' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false });
                
                if (rawData.length <= 1) {
                    alert('‚ùå Arquivo inv√°lido ou vazio!');
                    return;
                }
                
                // Normalizar headers
                const headers = rawData[0].map(h => {
                    if (!h) return '';
                    return window.clientManager.mapColumnToField(h);
                });
                
                const dataRows = rawData.slice(1);
                const ativos = [];
                const inativos = [];
                
                dataRows.forEach((row, index) => {
                    const hasValidData = row.some(cell => cell && cell.toString().trim() !== '');
                    if (hasValidData) {
                        let obj = {};
                        headers.forEach((header, j) => {
                            obj[header] = row[j] ? row[j].toString().trim() : '';
                        });
                        obj.id = `client-${Date.now()}-${index}-${Math.random().toString(36).substr(2, 5)}`;
                        
                        // Verificar status e separar
                        if (obj.Status && obj.Status.toLowerCase() === 'ativo') {
                            ativos.push(obj);
                        } else {
                            inativos.push(obj);
                        }
                    }
                });
                
                if (ativos.length === 0 && inativos.length === 0) {
                    alert('‚ùå Nenhum cliente v√°lido encontrado no arquivo!');
                    return;
                }
                
                // Salvar dados
                window.clientManager.data = inativos;
                window.clientManager.ativos = ativos;
                window.data = inativos;
                window.ativos = ativos;
                
                await window.dbManager.saveArrayData('clients', inativos);
                await window.dbManager.saveArrayData('ativos', ativos);
                
                // Atualizar interface
                populateCidades();
                window.clientManager.applyFiltersAndSort();
                renderAtivos();
                
                alert(`‚úÖ Arquivo carregado com sucesso!\nüìä ${ativos.length} clientes ativos e ${inativos.length} inativos encontrados`);
                
            } catch (error) {
                console.error('‚ùå Erro ao processar arquivo durante leitura:', error);
                alert('‚ùå Erro ao processar o arquivo: ' + error.message);
            }
        };
        
        reader.onerror = (error) => {
            console.error('‚ùå Erro ao ler arquivo:', error);
            alert('‚ùå Erro ao ler o arquivo: ' + error.message);
        };
        
        reader.readAsBinaryString(file);
    } catch (error) {
        console.error('‚ùå Erro ao manipular upload de arquivo:', error);
        alert('‚ùå Erro ao processar o arquivo: ' + error.message);
    }



};

// Aplicar filtros salvos
function applySavedFilters() {
    try {
        const savedFilters = window.dbManager.loadFilters();
        
        if (savedFilters.saldoMin) {
            const saldoFilter = document.getElementById('saldoFilter');
            if (saldoFilter) saldoFilter.value = savedFilters.saldoMin;
        }
        
        if (savedFilters.sort) {
            const sortOption = document.getElementById('sortOption');
            if (sortOption) sortOption.value = savedFilters.sort;
        }
        
        // Aplicar filtros
        window.clientManager.applyFiltersAndSort();
    } catch (error) {
        console.error('‚ùå Erro ao aplicar filtros salvos:', error);
    }
}

// Configurar eventos da interface
function setupEventListeners() {
    try {
        // Modal de detalhes
        const closeBtn = document.getElementById('close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                document.getElementById('modal').style.display = 'none';
            });
        }
        
        // Filtros
        const saldoFilter = document.getElementById('saldoFilter');
        if (saldoFilter) {
            saldoFilter.addEventListener('input', () => {
                window.clientManager.applyFiltersAndSort();
                saveFilters();
            });
        }
        
        const sortOption = document.getElementById('sortOption');
        if (sortOption) {
            sortOption.addEventListener('change', () => {
                window.clientManager.applyFiltersAndSort();
                saveFilters();
            });
        }
        
        // Seletor de cidades
        const cidadeSelector = document.getElementById('cidadeSelector');
        if (cidadeSelector) {
            cidadeSelector.addEventListener('click', toggleCidades);
        }
        
        const cidadeList = document.getElementById('cidadeList');
        if (cidadeList) {
            cidadeList.addEventListener('change', () => {
                window.clientManager.applyFiltersAndSort();
                saveFilters();
            });
        }
        
        // Bot√£o de cadastro
        const cadastrarBtn = document.getElementById('cadastrar-cliente-btn');
        if (cadastrarBtn) {
            cadastrarBtn.addEventListener('click', abrirModalCadastro);
        }
        
        // Modal de cadastro
        const closeCadastroBtn = document.getElementById('close-cadastro');
        if (closeCadastroBtn) {
            closeCadastroBtn.addEventListener('click', fecharModalCadastro);
        }
        
        const cancelarCadastroBtn = document.getElementById('cancelar-cadastro');
        if (cancelarCadastroBtn) {
            cancelarCadastroBtn.addEventListener('click', fecharModalCadastro);
        }
        
        const formCadastro = document.getElementById('form-cadastro');
        if (formCadastro) {
            formCadastro.addEventListener('submit', handleCadastroSubmit);
        }
        
        // Modal de sucesso
        const closeSucessoBtn = document.getElementById('close-sucesso');
        if (closeSucessoBtn) {
            closeSucessoBtn.addEventListener('click', fecharModalSucesso);
        }
        
        const fecharSucessoBtn = document.getElementById('fechar-sucesso');
        if (fecharSucessoBtn) {
            fecharSucessoBtn.addEventListener('click', fecharModalSucesso);
        }
        
        const cadastrarOutroBtn = document.getElementById('cadastrar-outro');
        if (cadastrarOutroBtn) {
            cadastrarOutroBtn.addEventListener('click', () => {
                fecharModalSucesso();
                abrirModalCadastro();
            });
        }
        
        // Bot√µes de exporta√ß√£o
        const exportarInativosBtn = document.getElementById('exportar-inativos');
        if (exportarInativosBtn) {
            exportarInativosBtn.addEventListener('click', () => exportarDados('inativos'));
        }
        
        const exportarAtivosBtn = document.getElementById('exportar-ativos');
        if (exportarAtivosBtn) {
            exportarAtivosBtn.addEventListener('click', () => exportarDados('ativos'));
        }
        
        // Bot√µes de a√ß√£o do modal - CORRIGIDO
        const tornarAtivoBtn = document.getElementById('tornarAtivo');
        if (tornarAtivoBtn) {
            tornarAtivoBtn.addEventListener('click', handleTornarAtivo);
        }
        
        const confirmarAtivoBtn = document.getElementById('confirmarAtivo');
        if (confirmarAtivoBtn) {
            confirmarAtivoBtn.addEventListener('click', handleConfirmarAtivo);
        }
        
        const excluirAtivoBtn = document.getElementById('excluirAtivo');
        if (excluirAtivoBtn) {
            excluirAtivoBtn.addEventListener('click', handleExcluirAtivo);
        }
        
        // Bot√£o de edi√ß√£o
        const editarClienteBtn = document.getElementById('editarCliente');
        if (editarClienteBtn) {
            editarClienteBtn.addEventListener('click', toggleEditMode);
        }
        
        const salvarEdicaoBtn = document.getElementById('salvarEdicao');
        if (salvarEdicaoBtn) {
            salvarEdicaoBtn.addEventListener('click', salvarEdicaoCliente);
        }
        
        const cancelarEdicaoBtn = document.getElementById('cancelarEdicao');
        if (cancelarEdicaoBtn) {
            cancelarEdicaoBtn.addEventListener('click', cancelarEdicaoCliente);
        }
        
        // Observa√ß√µes
        const observacoes = document.getElementById('observacoes');
        if (observacoes) {
            observacoes.addEventListener('input', function() {
                const contador = document.getElementById('observacoes-contador');
                if (contador) {
                    contador.textContent = this.value.length + '/2000';
                }
            });
        }
        
        const salvarObsBtn = document.getElementById('salvarObservacoes');
        if (salvarObsBtn) {
            salvarObsBtn.addEventListener('click', salvarObservacoes);
        }
        
        // Formata√ß√£o de data
        const editDataPedido = document.getElementById('editDataPedido');
        if (editDataPedido) {
            editDataPedido.addEventListener('input', function(e) {
                let value = this.value.replace(/\D/g, '').slice(0, 8);
                if (value.length > 4) {
                    value = value.slice(0, 2) + '/' + value.slice(2, 4) + '/' + value.slice(4, 8);
                } else if (value.length > 2) {
                    value = value.slice(0, 2) + '/' + value.slice(2, 4);
                }
                this.value = value;
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao configurar event listeners:', error);
    }
}

// Manipuladores de eventos para os bot√µes de a√ß√£o - NOVOS
function handleTornarAtivo() {
    try {
        const cliente = window.clientManager.currentItem;
        if (!cliente) return;
        
        // Mostrar campos de edi√ß√£o de data
        document.getElementById('editDataPedido').style.display = 'block';
        document.getElementById('labelEditDataPedido').style.display = 'block';
        document.getElementById('confirmarAtivo').style.display = 'inline-block';
        document.getElementById('tornarAtivo').style.display = 'none';
        
        // Preencher com data atual
        const hoje = new Date();
        const dataFormatada = hoje.getDate().toString().padStart(2, '0') + '/' + 
                             (hoje.getMonth() + 1).toString().padStart(2, '0') + '/' + 
                             hoje.getFullYear();
        document.getElementById('editDataPedido').value = dataFormatada;
    } catch (error) {
        console.error('‚ùå Erro ao tornar cliente ativo:', error);
    }
}

async function handleConfirmarAtivo() {
    try {
        const cliente = window.clientManager.currentItem;
        const novaData = document.getElementById('editDataPedido').value;
        
        if (!cliente || !novaData) {
            alert('‚ùå Por favor, insira uma data v√°lida!');
            return;
        }
        
        await window.clientManager.tornarAtivo(cliente, novaData);
        
        // Fechar modal
        document.getElementById('modal').style.display = 'none';
        
        // Atualizar interface
        populateCidades();
        window.clientManager.applyFiltersAndSort();
        renderAtivos();
        
        alert('‚úÖ Cliente tornado ativo com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao confirmar tornar cliente ativo:', error);
        alert('‚ùå Erro ao tornar cliente ativo: ' + error.message);
    }
}

async function handleExcluirAtivo() {
    try {
        const cliente = window.clientManager.currentItem;
        if (!cliente) return;
        
        if (confirm('Tem certeza que deseja excluir este cliente dos ativos?')) {
            await window.clientManager.excluirAtivo(cliente);
            
            // Fechar modal
            document.getElementById('modal').style.display = 'none';
            
            // Atualizar interface
            renderAtivos();
            
            alert('‚úÖ Cliente removido dos ativos com sucesso!');
        }
    } catch (error) {
        console.error('‚ùå Erro ao excluir cliente ativo:', error);
        alert('‚ùå Erro ao excluir cliente ativo: ' + error.message);
    }
}

// Funcionalidades de edi√ß√£o - NOVAS
function toggleEditMode() {
    try {
        const editFields = document.querySelectorAll('.edit-field');
        const displayFields = document.querySelectorAll('.display-field');
        const editBtn = document.getElementById('editarCliente');
        const saveBtn = document.getElementById('salvarEdicao');
        const cancelBtn = document.getElementById('cancelarEdicao');
        
        // Alternar visibilidade
        editFields.forEach(field => field.style.display = 'block');
        displayFields.forEach(field => field.style.display = 'none');
        
        editBtn.style.display = 'none';
        saveBtn.style.display = 'inline-block';
        cancelBtn.style.display = 'inline-block';
        
        // Preencher campos de edi√ß√£o com dados atuais
        const cliente = window.clientManager.currentItem;
        if (cliente) {
            document.getElementById('edit-nome-fantasia').value = cliente['Nome Fantasia'] || '';
            document.getElementById('edit-cliente').value = cliente['Cliente'] || '';
            document.getElementById('edit-cnpj-cpf').value = cliente['CNPJ / CPF'] || '';
            document.getElementById('edit-contato').value = cliente['Contato'] || '';
            document.getElementById('edit-telefone-comercial').value = cliente['Telefone Comercial'] || '';
            document.getElementById('edit-celular').value = cliente['Celular'] || '';
            document.getElementById('edit-email').value = cliente['Email'] || '';
            document.getElementById('edit-endereco').value = cliente['Endereco'] || '';
            document.getElementById('edit-numero').value = cliente['Numero'] || '';
            document.getElementById('edit-bairro').value = cliente['Bairro'] || '';
            document.getElementById('edit-cidade').value = cliente['Cidade'] || '';
            document.getElementById('edit-uf').value = cliente['UF'] || '';
            document.getElementById('edit-cep').value = cliente['CEP'] || '';
            document.getElementById('edit-saldo-credito').value = cliente['Saldo de Credito'] || '';
        }
    } catch (error) {
        console.error('‚ùå Erro ao alternar modo de edi√ß√£o:', error);
    }
}

function cancelarEdicaoCliente() {
    try {
        const editFields = document.querySelectorAll('.edit-field');
        const displayFields = document.querySelectorAll('.display-field');
        const editBtn = document.getElementById('editarCliente');
        const saveBtn = document.getElementById('salvarEdicao');
        const cancelBtn = document.getElementById('cancelarEdicao');
        
        // Restaurar visibilidade
        editFields.forEach(field => field.style.display = 'none');
        displayFields.forEach(field => field.style.display = 'block');
        
        editBtn.style.display = 'inline-block';
        saveBtn.style.display = 'none';
        cancelBtn.style.display = 'none';
    } catch (error) {
        console.error('‚ùå Erro ao cancelar edi√ß√£o:', error);
    }
}

async function salvarEdicaoCliente() {
    try {
        const cliente = window.clientManager.currentItem;
        if (!cliente) return;
        
        // Coletar dados editados
        const dadosEditados = {
            'Nome Fantasia': document.getElementById('edit-nome-fantasia').value.trim(),
            'Cliente': document.getElementById('edit-cliente').value.trim(),
            'CNPJ / CPF': document.getElementById('edit-cnpj-cpf').value.trim(),
            'Contato': document.getElementById('edit-contato').value.trim(),
            'Telefone Comercial': document.getElementById('edit-telefone-comercial').value.trim(),
            'Celular': document.getElementById('edit-celular').value.trim(),
            'Email': document.getElementById('edit-email').value.trim(),
            'Endereco': document.getElementById('edit-endereco').value.trim(),
            'Numero': document.getElementById('edit-numero').value.trim(),
            'Bairro': document.getElementById('edit-bairro').value.trim(),
            'Cidade': document.getElementById('edit-cidade').value.trim(),
            'UF': document.getElementById('edit-uf').value.trim().toUpperCase(),
            'CEP': document.getElementById('edit-cep').value.trim(),
            'Saldo de Credito': document.getElementById('edit-saldo-credito').value
        };
        
        // Valida√ß√£o b√°sica
        if (!dadosEditados['Nome Fantasia']) {
            alert('‚ùå Nome Fantasia √© obrigat√≥rio!');
            return;
        }
        
        // Salvar altera√ß√µes
        await window.clientManager.editarCliente(cliente.id, dadosEditados);
        
        // Fechar modal
        document.getElementById('modal').style.display = 'none';
        
        // Atualizar interface
        populateCidades();
        window.clientManager.applyFiltersAndSort();
        renderAtivos();
        
        alert('‚úÖ Cliente editado com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar edi√ß√£o do cliente:', error);
        alert('‚ùå Erro ao editar cliente: ' + error.message);
    }
}


// Configurar PWA com atualiza√ß√£o for√ßada
function setupPWA() {
    try {
        // Pular service worker em desenvolvimento local
        if (location.hostname === 'localhost' || location.hostname === '127.0.0.1') {
            console.log('‚ö†Ô∏è Service Worker desabilitado para desenvolvimento local');
            return;
        }

        if ('serviceWorker' in navigator) {
            // DESREGISTRAR SERVICE WORKER ANTIGO PRIMEIRO
            navigator.serviceWorker.getRegistrations().then(registrations => {
                registrations.forEach(registration => {
                    console.log('üóëÔ∏è Removendo service worker antigo:', registration.scope);
                    registration.unregister();
                });
            });

            // REGISTRAR NOVO SERVICE WORKER
            navigator.serviceWorker.register('./service-worker.js')
                .then(registration => {
                    console.log('‚úÖ Service Worker registrado:', registration);
                    
                    // VERIFICAR POR ATUALIZA√á√ïES
                    registration.addEventListener('updatefound', () => {
                        const newWorker = registration.installing;
                        console.log('üîÑ Nova vers√£o do Service Worker encontrada');
                        
                        newWorker.addEventListener('statechange', () => {
                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                // NOVA VERS√ÉO DISPON√çVEL - RECARREGAR AUTOMATICAMENTE
                                console.log('üîÑ Nova vers√£o detectada! Recarregando...');
                                window.location.reload();
                            }
                        });
                    });

                    // FOR√áAR VERIFICA√á√ÉO DE ATUALIZA√á√ÉO
                    setInterval(() => {
                        registration.update();
                    }, 60000); // Verificar a cada 1 minuto
                })
                .catch(error => {
                    console.error('‚ùå Erro ao registrar Service Worker:', error);
                });
        }

        // Bot√£o de instala√ß√£o PWA
        let deferredPrompt;
        const installBtn = document.getElementById('install-btn');

        function isPWAInstalled() {
            return window.matchMedia('(display-mode: standalone)').matches || 
                   window.navigator.standalone === true || 
                   document.referrer.includes('android-app://');
        }

        function updateInstallButton() {
            if (isPWAInstalled()) {
                if (installBtn) installBtn.style.display = 'none';
            }
        }

        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            if (!isPWAInstalled() && installBtn) {
                installBtn.style.display = 'block';
            }
        });

        if (installBtn) {
            installBtn.addEventListener('click', async () => {
                if (deferredPrompt) {
                    deferredPrompt.prompt();
                    const { outcome } = await deferredPrompt.userChoice;
                    if (outcome === 'accepted') {
                        installBtn.style.display = 'none';
                    }
                    deferredPrompt = null;
                }
            });
        }

        window.addEventListener('appinstalled', () => {
            if (installBtn) installBtn.style.display = 'none';
            deferredPrompt = null;
        });

        updateInstallButton();

    } catch (error) {
        console.error('‚ùå Erro ao configurar PWA:', error);
    }
}

// Configurar upload de arquivos
function setupUploadHandler() {
    try {
        const xlsxFile = document.getElementById('xlsxFile');
        if (xlsxFile) {
            xlsxFile.addEventListener('change', handleFileUpload);
        }
    } catch (error) {
        console.error('‚ùå Erro ao configurar upload handler:', error);
    }
}

// Manipular upload de arquivo
async function handleFileUpload(event) {
    try {
        const file = event.target.files[0];
        if (!file) return;
        
        // Valida√ß√£o de formato
        const validFormats = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
        if (!validFormats.includes(file.type)) {
            alert('‚ùå Formato de arquivo inv√°lido! Use apenas arquivos .xls ou .xlsx.');
            return;
        }

        if (file.size > 10 * 1024 * 1024) {
            alert('Arquivo muito grande! O limite √© 10MB.');
            return;
        }
        
        console.log('üìÅ Processando arquivo:', file.name);
        
        // Criar backup antes de limpar dados
        await window.clientManager.createBackup('clients', window.clientManager.data);
        await window.clientManager.createBackup('ativos', window.clientManager.ativos);
        
        // Limpar dados existentes
        await window.dbManager.clearData('clients');
        await window.dbManager.clearData('ativos');
        
        // Limpar vari√°veis globais
        window.clientManager.data = [];
        window.clientManager.ativos = [];
        window.data = [];
        window.ativos = [];
        window.filteredData = [];
        
        // Limpar interfaces
        document.getElementById('list').innerHTML = '<li style="text-align: center; color: #666;">Carregando novos dados...</li>';
        document.getElementById('ativos-list').innerHTML = '<li style="text-align: center; color: #666;">Carregando novos dados...</li>';
        document.getElementById('agenda-list').innerHTML = '<div style="text-align: center; color: #666;">Carregando novos dados...</div>';
        
        // Resetar mapa se estiver vis√≠vel
        if (currentTab === 'mapa') {
            if (typeof window.clearMarkers === 'function') {
                window.clearMarkers();
            }
            document.getElementById('map-status').textContent = 'Dados resetados - carregando novo arquivo...';
            mapDataLoaded = false;
        }

        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const bytes = e.target.result;
                const workbook = XLSX.read(bytes, { type: 'binary' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false });
                
                if (rawData.length <= 1) {
                    alert('‚ùå Arquivo inv√°lido ou vazio!');
                    return;
                }
                
                // Normalizar headers
                const headers = rawData[0].map(h => {
                    if (!h) return '';
                    return window.clientManager.mapColumnToField(h);
                });
                
                const dataRows = rawData.slice(1);
                const ativos = [];
                const inativos = [];
                
                dataRows.forEach((row, index) => {
                    const hasValidData = row.some(cell => cell && cell.toString().trim() !== '');
                    if (hasValidData) {
                        let obj = {};
                        headers.forEach((header, j) => {
                            obj[header] = row[j] ? row[j].toString().trim() : '';
                        });
                        obj.id = `client-${Date.now()}-${index}-${Math.random().toString(36).substr(2, 5)}`;
                        
                        // Verificar status e separar
                        if (obj.Status && obj.Status.toLowerCase() === 'ativo') {
                            ativos.push(obj);
                        } else {
                            inativos.push(obj);
                        }
                    }
                });
                
                if (ativos.length === 0 && inativos.length === 0) {
                    alert('‚ùå Nenhum cliente v√°lido encontrado no arquivo!');
                    return;
                }
                
                // Salvar dados
                window.clientManager.data = inativos;
                window.clientManager.ativos = ativos;
                window.data = inativos;
                window.ativos = ativos;
                
                await window.dbManager.saveArrayData('clients', inativos);
                await window.dbManager.saveArrayData('ativos', ativos);
                
                // Atualizar interface baseada na aba atual
                if (currentTab === 'inativos') {
                    window.clientManager.applyFiltersAndSort();
                } else if (currentTab === 'ativos') {
                    renderAtivos();
                } else if (currentTab === 'mapa' && typeof window.loadMapData === 'function') {
                    window.loadMapData();
                    mapDataLoaded = true;
                } else if (currentTab === 'agenda') {
                    renderAgenda();
                }
                
                // Atualizar componentes compartilhados
                populateCidades();
                updateMapStatus('Dados carregados com sucesso');
                
                alert(`‚úÖ Arquivo carregado com sucesso!\nüìä ${ativos.length} clientes ativos e ${inativos.length} inativos encontrados`);
                
            } catch (error) {
                console.error('‚ùå Erro ao processar arquivo:', error);
                
                // Restaurar mensagens de estado vazio em caso de erro
                document.getElementById('list').innerHTML = '<li style="text-align: center; color: #666;">Erro ao carregar dados</li>';
                document.getElementById('ativos-list').innerHTML = '<li style="text-align: center; color: #666;">Erro ao carregar dados</li>';
                document.getElementById('agenda-list').innerHTML = '<div style="text-align: center; color: #666;">Erro ao carregar dados</div>';
                
                if (currentTab === 'mapa') {
                    document.getElementById('map-status').textContent = 'Erro ao carregar dados';
                }
                
                alert('‚ùå Erro ao processar o arquivo: ' + error.message);
            }
        };
        
        reader.onerror = (error) => {
            console.error('‚ùå Erro ao ler arquivo:', error);
            alert('‚ùå Erro ao ler o arquivo: ' + error.message);
        };
        
        reader.readAsBinaryString(file);
    } catch (error) {
        console.error('‚ùå Erro no upload:', error);
        alert('‚ùå Erro no upload: ' + error.message);
    }
}

// Abrir modal de cadastro
function abrirModalCadastro() {
    try {
        document.getElementById('modal-cadastro').style.display = 'flex';
        document.getElementById('form-cadastro').reset();
        document.getElementById('nome-fantasia').focus();
    } catch (error) {
        console.error('‚ùå Erro ao abrir modal de cadastro:', error);
    }
}

// Fechar modal de cadastro
function fecharModalCadastro() {
    try {
        document.getElementById('modal-cadastro').style.display = 'none';
    } catch (error) {
        console.error('‚ùå Erro ao fechar modal de cadastro:', error);
    }
}

// Abrir modal de sucesso
function abrirModalSucesso(clienteData) {
    try {
        const modal = document.getElementById('modal-sucesso');
        const info = document.getElementById('cliente-cadastrado-info');
        
        info.innerHTML = `
            <p><strong>Nome Fantasia:</strong> ${clienteData['Nome Fantasia']}</p>
            <p><strong>Cliente:</strong> ${clienteData['Cliente'] || 'N√£o informado'}</p>
            <p><strong>Cidade:</strong> ${clienteData['Cidade'] || 'N√£o informado'}</p>
            <p><strong>Contato:</strong> ${clienteData['Contato'] || 'N√£o informado'}</p>
        `;
        
        modal.style.display = 'flex';
    } catch (error) {
        console.error('‚ùå Erro ao abrir modal de sucesso:', error);
    }
}

// Fechar modal de sucesso
function fecharModalSucesso() {
    try {
        document.getElementById('modal-sucesso').style.display = 'none';
    } catch (error) {
        console.error('‚ùå Erro ao fechar modal de sucesso:', error);
    }
}

// Manipular submiss√£o do formul√°rio de cadastro
async function handleCadastroSubmit(event) {
    try {
        event.preventDefault();
        
        const formData = {
            nomeFantasia: document.getElementById('nome-fantasia').value.trim(),
            cliente: document.getElementById('cliente').value.trim(),
            cnpjCpf: document.getElementById('cnpj-cpf').value.trim(),
            contato: document.getElementById('contato').value.trim(),
            telefoneComercial: document.getElementById('telefone-comercial').value.trim(),
            celular: document.getElementById('celular').value.trim(),
            email: document.getElementById('email').value.trim(),
            endereco: document.getElementById('endereco').value.trim(),
            numero: document.getElementById('numero').value.trim(),
            bairro: document.getElementById('bairro').value.trim(),
            cidade: document.getElementById('cidade').value.trim(),
            uf: document.getElementById('uf').value.trim().toUpperCase(),
            cep: document.getElementById('cep').value.trim(),
            saldoCredito: document.getElementById('saldo-credito').value,
            dataUltimoPedido: document.getElementById('data-ultimo-pedido').value
        };
        
        // Valida√ß√£o b√°sica
        if (!formData.nomeFantasia) {
            alert('‚ùå Nome Fantasia √© obrigat√≥rio!');
            document.getElementById('nome-fantasia').focus();
            return;
        }
        
        const clienteData = await window.clientManager.cadastrarCliente(formData);
        
        // Fechar modal de cadastro
        fecharModalCadastro();
        
        // Abrir modal de sucesso
        abrirModalSucesso(clienteData);
        
        // Atualizar interface
        populateCidades();
        window.clientManager.applyFiltersAndSort();
        
    } catch (error) {
        console.error('‚ùå Erro ao cadastrar cliente:', error);
        alert('‚ùå Erro ao cadastrar cliente:\n' + error.message);
    }
}

// Fun√ß√£o de exporta√ß√£o de dados
function exportarDados(tipo) {
    try {
        let dados = [];
        let nomeArquivo = '';
        
        if (tipo === 'inativos') {
            dados = window.clientManager.data || [];
            nomeArquivo = `clientes-inativos-${new Date().toISOString().split('T')[0]}.xlsx`;
        } else if (tipo === 'ativos') {
            dados = window.clientManager.ativos || [];
            nomeArquivo = `clientes-ativos-${new Date().toISOString().split('T')[0]}.xlsx`;
        }
        
        if (dados.length === 0) {
            alert(`‚ùå Nenhum cliente ${tipo} encontrado para exportar!`);
            return;
        }
        
        // Estrutura das colunas baseada na planilha original
        const colunas = [
            'ID Cliente',
            'Cliente',
            'Nome Fantasia',
            'CNPJ / CPF',
            'Condi√ß√£o de Pagamento',
            'Condi√ß√£o de Pagamento Padr√£o',
            'Limite de Cr√©dito',
            'Saldo de Credito',
            'Limite de Cr√©dito a Vista',
            'Saldo de Credito a Vista',
            'Nota Fiscal',
            'Inscri√ß√£o Estadual',
            'Tipo',
            'Finalidade',
            'Regime Tribut√°rio',
            'Endere√ßo',
            'N√∫mero',
            'Bairro',
            'Cidade',
            'UF',
            'CEP',
            'Contato',
            'Telefone Comercial',
            'Celular',
            'Email',
            'Zona',
            'Zona ID',
            'SubRegi√£o',
            'SubRegi√£o ID',
            'Segmento',
            'Protestar (dias)',
            'Negativar (dias)',
            'Status',
            'Bloqueio',
            'Cliente Desde',
            'Data √öltimo Pedido',
            'Vendedor',
            'Boletos Vencidos',
            'tipoPessoa PJ/PF'
        ];
        
        // Preparar dados para exporta√ß√£o
        const dadosExportacao = dados.map(cliente => {
            const linha = {};
            colunas.forEach(coluna => {
                // Mapear campos do sistema para as colunas da planilha
                switch (coluna) {
                    case 'ID Cliente':
                        linha[coluna] = cliente.id || cliente['ID Cliente'] || '';
                        break;
                    case 'Endere√ßo':
                        linha[coluna] = cliente.Endereco || cliente['Endere√ßo'] || '';
                        break;
                    case 'N√∫mero':
                        linha[coluna] = cliente.Numero || cliente['N√∫mero'] || '';
                        break;
                    case 'Status':
                        linha[coluna] = tipo === 'ativos' ? 'Ativo' : 'Inativo';
                        break;
                    case 'Cliente Desde':
                        linha[coluna] = cliente['Data Cadastro'] || cliente['Cliente Desde'] || '';
                        break;
                    case 'Saldo de Cr√©dito':
                        linha[coluna] = cliente['Saldo de Credito'] || cliente['Saldo de Cr√©dito'] || '';
                        break;
                    default:
                        linha[coluna] = cliente[coluna] || '';
                }
            });
            return linha;
        });
        
        // Criar workbook
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.json_to_sheet(dadosExportacao, { header: colunas });
        
        // Adicionar worksheet ao workbook
        XLSX.utils.book_append_sheet(wb, ws, tipo.toUpperCase());
        
        // Salvar arquivo
        XLSX.writeFile(wb, nomeArquivo);
        
        alert(`‚úÖ Dados exportados com sucesso!\nüìÅ Arquivo: ${nomeArquivo}\nüìä ${dados.length} clientes exportados`);
        
    } catch (error) {
        console.error('‚ùå Erro ao exportar dados:', error);
        alert('‚ùå Erro ao exportar dados: ' + error.message);
    }
}

// Navega√ß√£o entre abas
function openTab(tab) {
    try {
        console.log(`üìÇ Abrindo aba: ${tab}`);
        
        // Remover classe active de todas as abas
        document.querySelectorAll('.tab-content').forEach(el => el.classList.remove('active'));
        document.querySelectorAll('#tabs button').forEach(el => el.classList.remove('active'));

        // Ativar aba selecionada
        const tabContent = document.getElementById(tab + '-content');
        const tabButton = document.querySelector(`button[onclick="openTab('${tab}')"]`);
        
        if (tabContent) tabContent.classList.add('active');
        if (tabButton) tabButton.classList.add('active');

        currentTab = tab;
        window.clientManager.currentTab = tab;

        // Controlar visibilidade do upload - APENAS NA ABA INATIVOS
        const uploadDiv = document.getElementById('upload');
        if (uploadDiv) {
            uploadDiv.style.display = (tab === 'inativos') ? 'block' : 'none';
        }

        // A√ß√µes espec√≠ficas por aba
        if (tab === 'inativos') {
            window.clientManager.applyFiltersAndSort();
        } else if (tab === 'ativos') {
            renderAtivos();
        } else if (tab === 'agenda') {
            renderAgenda();
        } else if (tab === 'mapa') {
            console.log('üó∫Ô∏è Inicializando aba mapa...');
            setTimeout(() => {
                if (typeof window.initMap === 'function') {
                    window.initMap();

                    setTimeout(() => {
                        // Carregar dados do mapa se houver dados dispon√≠veis
                        if (window.clientManager.data.length > 0 && !mapDataLoaded && typeof window.loadMapData === 'function') {
                            window.loadMapData();
                            mapDataLoaded = true;
                        }

                        if (typeof window.setupEditButton === 'function') {
                            window.setupEditButton();
                        }

                        // Adicionar listener para o checkbox "Incluir inativos"
                        const includeInativosCheckbox = document.getElementById('include-inativos-checkbox');
                        if (includeInativosCheckbox) {
                            includeInativosCheckbox.addEventListener('change', () => {
                                mapDataLoaded = false;
                                if (window.clientManager.data.length > 0 && !mapDataLoaded && typeof window.loadMapData === 'function') {
                                    window.loadMapData();
                                    mapDataLoaded = true;
                                }
                            });
                        }
                    }, 1000);
                }
            }, 100);
        } else if (tab === 'catalogo') {
            console.log('üì¶ Inicializando aba cat√°logo...');
            setTimeout(() => {
                if (window.catalogManager && typeof window.catalogManager.init === 'function') {
                    window.catalogManager.init();
                }
            }, 100);
            } else if (tab === 'prospeccao') {
    console.log('üéØ Inicializando aba prospec√ß√£o...');
    // A funcionalidade est√° toda contida no iframe

        }

    } catch (error) {
        console.error('‚ùå Erro ao abrir aba:', error);
    }
}


// Salvar filtros
function saveFilters() {
    try {
        const filters = {
            saldoMin: parseFloat(document.getElementById('saldoFilter')?.value) || 0,
            cidadesSelecionadas: Array.from(document.querySelectorAll('#cidadeList input:checked')).map(input => input.value),
            sort: document.getElementById('sortOption')?.value || 'nome-az'
        };
        
        window.dbManager.saveFilters(filters);
    } catch (error) {
        console.error('‚ùå Erro ao salvar filtros:', error);
    }
}

// Popular lista de cidades
function populateCidades() {
    try {
        const cidades = [...new Set(window.clientManager.data.map(item => (item['Cidade'] || '').trim()))]
            .filter(c => c)
            .sort((a, b) => a.localeCompare(b, 'pt-BR', {sensitivity: 'base'}));
        
        const list = document.getElementById('cidadeList');
        if (!list) return;
        
        list.innerHTML = '';
        cidades.forEach(cidade => {
            const div = document.createElement('div');
            div.innerHTML = `
                <input type="checkbox" id="cidade-${cidade}" value="${cidade}">
                <label for="cidade-${cidade}">${cidade}</label>
            `;
            list.appendChild(div);
        });
        
        console.log(`üèôÔ∏è ${cidades.length} cidades encontradas`);
    } catch (error) {
        console.error('‚ùå Erro ao popular lista de cidades:', error);
    }
}

// Alternar visibilidade da lista de cidades
function toggleCidades() {
    try {
        const selector = document.getElementById('cidadeSelector');
        const list = document.getElementById('cidadeList');
        
        if (!selector || !list) return;
        
        const aberto = list.classList.toggle('visivel');
        list.classList.toggle('escondido', !aberto);
        selector.classList.toggle('aberto', aberto);
        
        document.getElementById('cidadeSelectorText').textContent = aberto ? 'Ocultar cidades' : 'Selecionar cidades';
    } catch (error) {
        console.error('‚ùå Erro ao alternar visibilidade de cidades:', error);
    }
}

// Renderizar lista de ativos
function renderAtivos() {
    try {
        const list = document.getElementById('ativos-list');
        if (!list) return;
        
        list.innerHTML = '';
        
        if (window.clientManager.ativos.length === 0) {
            list.innerHTML = '<li style="text-align: center; color: #666;">Nenhum cliente ativo encontrado</li>';
            return;
        }
        
        window.clientManager.ativos.forEach(item => {
            const li = document.createElement('li');
            li.innerHTML = `
                <div>
                    <strong>${item['Nome Fantasia'] || 'Sem Nome'}</strong>
                    <span class="days-since">Ativo desde: ${item['Data Ultimo Pedido'] || 'N/A'}</span>
                </div>
                <div style="font-size: 0.9em; color: #666;">
                    ${item['Cidade'] || ''} - Saldo: R$ ${item['Saldo de Credito'] || '0'}
                </div>
            `;
            li.onclick = () => window.clientManager.openModal(item, 'ativos');
            list.appendChild(li);
        });
    } catch (error) {
        console.error('‚ùå Erro ao renderizar lista de ativos:', error);
    }
}

// Renderizar agenda
function renderAgenda() {
    try {
        const list = document.getElementById('agenda-list');
        if (!list) return;
        
        list.innerHTML = '';
        
        const schedules = window.clientManager.schedules;
        const scheduleEntries = Object.entries(schedules);
        
        if (scheduleEntries.length === 0) {
            list.innerHTML = '<div style="text-align: center; color: #666;">Nenhum agendamento encontrado</div>';
            return;
        }
        
        scheduleEntries.forEach(([clientId, schedule]) => {
            const div = document.createElement('div');
            div.innerHTML = `
                <div>
                    <strong>${schedule.cliente}</strong><br>
                    ${schedule.diaSemana} √†s ${schedule.horario} - ${schedule.tipo}
                </div>
                <button onclick="removerAgendamento('${clientId}')">Remover</button>
            `;
            list.appendChild(div);
        });
    } catch (error) {
        console.error('‚ùå Erro ao renderizar agenda:', error);
    }
}

// Salvar observa√ß√µes
function salvarObservacoes() {
    try {
        const observacoes = document.getElementById('observacoes').value;
        const clienteId = window.clientManager.currentItem?.id;
        
        if (clienteId) {
            window.dbManager.saveObservation(clienteId, observacoes);
            alert('‚úÖ Observa√ß√µes salvas com sucesso!');
        }
    } catch (error) {
        console.error('‚ùå Erro ao salvar observa√ß√µes:', error);
        alert('‚ùå Erro ao salvar observa√ß√µes: ' + error.message);
    }
}

// Salvar agendamento
function salvarAgendamento() {
    try {
        const diaSemana = document.getElementById('diaSemana').value;
        const horario = document.getElementById('horario').value;
        const tipo = document.getElementById('tipoAgendamento').value;
        const repeticao = document.getElementById('repeticao').value;
        
        if (!diaSemana || !horario || !tipo) {
            alert('‚ùå Preencha todos os campos do agendamento!');
            return;
        }
        
        const clienteId = window.clientManager.currentItem?.id;
        const cliente = window.clientManager.currentItem?.['Nome Fantasia'];
        
        if (clienteId) {
            window.clientManager.schedules[clienteId] = {
                cliente,
                diaSemana,
                horario,
                tipo,
                repeticao
            };
            
            window.dbManager.saveData('schedules', window.clientManager.schedules);
            alert('‚úÖ Agendamento salvo com sucesso!');
            
            // Limpar campos
            document.getElementById('diaSemana').value = '';
            document.getElementById('horario').value = '';
            document.getElementById('tipoAgendamento').value = '';
            document.getElementById('repeticao').value = 'Semanal';
        }
    } catch (error) {
        console.error('‚ùå Erro ao salvar agendamento:', error);
        alert('‚ùå Erro ao salvar agendamento: ' + error.message);
    }
}

// Remover agendamento
function removerAgendamento(clientId) {
    try {
        if (confirm('Tem certeza que deseja remover este agendamento?')) {
            delete window.clientManager.schedules[clientId];
            window.dbManager.saveData('schedules', window.clientManager.schedules);
            renderAgenda();
            alert('‚úÖ Agendamento removido com sucesso!');
        }
    } catch (error) {
        console.error('‚ùå Erro ao remover agendamento:', error);
        alert('‚ùå Erro ao remover agendamento: ' + error.message);
    }
}
// FUN√á√ÉO DE EMERG√äNCIA - LIMPAR TUDO
function limparTudoERecarregar() {
    if (confirm('‚ö†Ô∏è Isso vai limpar todos os dados salvos. Continuar?')) {
        // Limpar Service Workers
        navigator.serviceWorker.getRegistrations().then(registrations => {
            registrations.forEach(reg => reg.unregister());
        });
        
        // Limpar todos os storages
        localStorage.clear();
        sessionStorage.clear();
        
        // Limpar IndexedDB
        if (window.dbManager) {
            window.dbManager.clearAllData();
        }
        
        // Limpar caches
        caches.keys().then(names => {
            names.forEach(name => caches.delete(name));
        });
        
        alert('‚úÖ Limpeza conclu√≠da! A p√°gina ser√° recarregada.');
        window.location.reload(true);
    }
}

// Disponibilizar no console para emerg√™ncias
window.limparTudoERecarregar = limparTudoERecarregar;

//teste